{
  "fileName": "traces.md",
  "filePath": "docs/data-tables/raw/traces.md",
  "url": "https://dune.com/docs/data-tables/raw/traces.md",
  "summary": "# Traces\n\nThe Traces tables contain information about the execution of smaller atomic actions generated by transactions. Transactions can trigger smaller atomic actions that modify the internal state of an Ethereum Virtual Machine. Information about the execution of these actions is logged and can be found stored as an EVM execution trace, or just a trace. In Etherscan, these are referred to as \"internal transactions\". The guide provides information on the tables and column data of the traces.\n\n## Tables\n\nThe tables are divided into two engines, V1 and V2. The V2 engine uses Spark SQL, while the V1 engine uses PostgreSQL. The tables are divided by chain and contain information such as the value measured in wei, gas, gas used, block hash, success, tx index, sub-traces, error, tx success, tx hash, from, to, trace address, type, address, code, call type, input, and output. \n\n## Column Data\n\nThe column data provides a detailed description of the data types and their descriptions. For instance, the `block_time` column is of type `timestamptz` and represents the time when the block was mined. The `value` column is of type `numeric` and represents the amount of `[chain_gas_token]` sent in this transaction. The `gas` column is of type `numeric` and represents the gas provided with the message call. The `gas_used` column is of type `numeric` and represents the gas consumed by the transaction in wei. The `success` column is of type `boolean` and represents a true/false value that shows if the trace action succeeded. \n\n## Gas used in `.traces`\n\nThe `gas_used` column in the `.traces` tables is a bit hard to understand. The `gas_used` of a trace will always include the gas consumed by the trace and all its subtraces. The `gas_used` of the initial call will not contain the cost of making the call in the first place. You need to add 21000 gas units + the cost of sending zero + non-zero bytes to the `gas_used` value of the top trace to arrive at the \"true\" `gas_used` value. \n\n## Creation Traces\n\nThe creation traces table contains information about the creation of a smart contract and the transfer of ether to it. The table is divided by chain and contains information such as block time, block number, tx hash, address, from, and code. \n\nThe guide provides examples of the tables and column data. For instance, the guide provides an example of the V2 engine (Spark SQL) table for Ethereum Mainnet. The guide also provides an example of the creation traces table for Ethereum Mainnet. \n\nOverall, the guide provides a detailed explanation of the Traces tables and column data. It also provides examples of the tables and column data.",
  "questions": "1. What is the purpose of the `traces` tables in the different chains listed in the guide?\n- The `traces` tables contain information about the execution of smaller atomic actions generated by transactions in different chains listed in the guide.\n\n2. What is the difference between the V1 and V2 engines in terms of the PostgreSQL database used?\n- The V1 engine uses PostgreSQL while the V2 engine uses Spark SQL.\n\n3. What is the `gas_used` column in the `.traces` tables and how is it calculated?\n- The `gas_used` column in the `.traces` tables includes the gas consumed by the trace and all its subtraces, but not the cost of making the call in the first place. To arrive at the \"true\" `gas_used` value, 21000 gas units plus the cost of sending zero and non-zero bytes should be added to the `gas_used` value of the top trace."
}