{
  "folderName": "solana",
  "folderPath": ".autodoc/docs/json/docs/data-tables/raw/solana",
  "url": "https://dune.com/.autodoc/docs/json/docs/data-tables/raw/solana",
  "files": [
    {
      "fileName": "account-activity.md",
      "filePath": "docs/data-tables/raw/solana/account-activity.md",
      "url": "https://dune.com/docs/data-tables/raw/solana/account-activity.md",
      "summary": "# Account Activity\n\nThis section of the app technical guide covers the `Solana.account_activity` table, which contains information from the transactions table focused on account usage. Each row in the table contains all information about an account's usage in a transaction. The purpose of this table is to provide a detailed view of how an account is being used in the Solana blockchain.\n\nThe table contains several columns, each with a specific purpose. The `block_slot` column contains the slot of the block in which the transaction occurred. The `block_hash` column contains the hash of the block in which the transaction occurred. The `block_time` column contains the timestamp of when the account usage occurred. The `block_date` column contains the date of when the account usage occurred. The `address` column contains the address of the account, also referred to as the public key. The `tx_index` column contains the index of the transaction in the block. The `tx_id` column contains the ID of the transaction in which the account usage occurred. The `tx_success` column indicates whether the transaction succeeded and was committed. The `signed` column indicates whether this account signed the transaction. The `writeable` column indicates whether this account was granted read-write access in the transaction. The `pre_balance` column contains the balance of the account before the transaction was processed. The `pre_token_balance` column contains the token balance before the transaction was processed. The `post_balance` column contains the balance of the account after the transaction was processed. The `post_token_balance` column contains the token balance after the transaction was processed. The `balance_change` column contains the balance change that occurred as part of the transaction. The `token_balance_change` column contains the token balance change that occurred as part of the transaction. The `token_mint_address` column contains the address the associated token address is minting from (i.e. the actual token address). The `token_owner_address` column contains the address that owns this token address.\n\nAn example use case for this table would be to track the usage of a specific account over time. By analyzing the data in this table, developers can gain insights into how an account is being used and make informed decisions about how to optimize their application. For example, if an account is being used frequently and experiencing high traffic, developers may want to consider optimizing the account to handle the increased load.",
      "questions": "1. What blockchain platform is this app technical guide for?\n- The app technical guide is for the Solana blockchain platform.\n\n2. What specific account information is included in the Solana.account_activity table?\n- The Solana.account_activity table contains information about an account's usage in a transaction, including the account's address, pre- and post-transaction balances, and token balances.\n\n3. What is the purpose of the token_mint_address and token_owner_address columns?\n- The token_mint_address column indicates the address from which the associated token is being minted, while the token_owner_address column indicates the address that owns the token address. This information can be useful for tracking token ownership and usage."
    },
    {
      "fileName": "blocks.md",
      "filePath": "docs/data-tables/raw/solana/blocks.md",
      "url": "https://dune.com/docs/data-tables/raw/solana/blocks.md",
      "summary": "# Blocks\n\n## Solana.blocks\n\nThis section of the app technical guide covers the `Solana.blocks` table, which contains block data within Solana's blockchain. The purpose of this table is to identify block activity and transaction changes over time. The table includes several columns such as `hash`, `height`, `slot`, `time`, `date`, `parent_slot`, `previous_block___hash`, `total_transactions`, `successful_transactions`, and `failed_transactions`. Each column has a specific data type and description, which is explained in the table.\n\nFor example, the `hash` column is a string that represents the hash of the block, base-58 encoded. The `height` column is a bigint that represents the number of blocks beneath this block. The `time` column is a timestamp that represents the estimated time this block was produced. The `total_transactions` column is a bigint that represents the total number of transactions in this block. The `successful_transactions` column is a bigint that represents the number of successful transactions in this block. The `failed_transactions` column is a bigint that represents the number of failed transactions in this block.\n\nThe guide also provides two Solana Query examples that can be used with the `Solana.blocks` table. The first example is \"Solana blocks over time,\" which can be found at [https://dune.xyz/queries/389979](https://dune.xyz/queries/389979). This query shows the number of blocks produced over time. The second example is \"Transactions per day,\" which can be found at [https://dune.xyz/queries/390045](https://dune.xyz/queries/390045). This query shows the number of transactions produced per day.\n\nOverall, this section of the app technical guide provides a detailed explanation of the `Solana.blocks` table and its columns. It also provides useful examples of Solana Queries that can be used with this table.",
      "questions": "1. What is the purpose of the `hash` column in the `Solana.blocks` table?\n- The `hash` column in the `Solana.blocks` table contains the hash of each block in Solana's blockchain, encoded in base-58. A blockchain SQL analyst might want to know how this hash is generated and how it is used within the blockchain.\n\n2. How can the `Solana.blocks` table be used to analyze transaction activity over time?\n- The `Solana.blocks` table can be used to identify block activity and transaction changes over time. A blockchain SQL analyst might want to know how to join this table with other tables in order to analyze transaction activity in more detail.\n\n3. Are there any limitations to the data provided in the `Solana.blocks` table?\n- The `Solana.blocks` table provides information on the number of successful and failed transactions in each block, but it does not provide details on the specific transactions themselves. A blockchain SQL analyst might want to know if there are any other limitations to the data provided in this table, and if there are other tables or data sources that can be used to supplement this information."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/data-tables/raw/solana/index.md",
      "url": "https://dune.com/docs/data-tables/raw/solana/index.md",
      "summary": "# Solana Technical Guide\n\nThis technical guide provides information on Solana's raw data and how it differs from other chains. The guide is divided into two main sections: Data Available and Changelog.\n\n## Data Available\n\nThis section provides a list of tables available in Solana's data. The tables are:\n\n- Account Activity: This table contains information from the transactions table focused on account usage.\n- Blocks: Blocks are the building blocks of blockchains and rollups.\n- Rewards: This table contains data about rewards paid out on Solana.\n- Transactions: Transactions are cryptographically signed instructions from accounts.\n- Vote Transactions: This table contains the full set of vote transactions that are submitted by validators to vote on a block.\n\n## Changelog\n\nThis section provides a list of changes made to Solana's data. The changes are:\n\n### 2022-03-25\n\nThe `solana.account_activity` table has been updated to a new version. The new version of the table contains additional information around token activity. The following columns were added to the table:\n\n- `pre_token_balances`: The token balance before the transaction was processed.\n- `post_token_balances`: The token balance after the transaction was processed.\n- `token_balance_changes`: The balance change that occurred as part of the transaction.\n\n### 2022-03-18\n\nThe `solana.account_activity` table was released. The table contains all of the information about an account’s usage in a transaction. The table is optimized to run with ‘WHERE address = …’ queries.\n\n### 2022-03-01\n\nThe `solana.transactions` table has been upgraded to a new version. The new version of the table uses cleaner array structs to make it easier to extract useful information. The vote transactions have also been split into their own table `solana.vote_transactions`, so queries using `solana.transactions` will have better performance. Unfortunately, the table change also means that some existing queries will now break and need to be changed.\n\nThe changes made to the `solana.transactions` table are:\n\n- You won't need to check if a transaction is a vote transaction, which has typically been done with `WHERE ARRAY_CONTAINS(account_keys, \"Vote111111111111111111111111111111111111111\") = false`.\n- The `error_index` and `error_message` columns have been removed, and have been merged into the `error` column (which is a struct). So now instead of `WHERE error_index is not null`, a query should do `WHERE error is not null`.\n- Structs containing indexes to `account_keys` now include the account address directly, so there is no need to use the `account_keys` column to look up the account addresses.\n- The `pre_token_balances` and `post_token_balances` columns have changed. The token balance is now included in the field `amount`. And as mentioned above, the struct in the array now has a field `account`, which is the account of the token balance.\n- The `instructions` column has changed. As mentioned above, the struct in the array now has a field `executing_account`, which is the account executing the instruction.\n- The `inner_instructions` column is removed, and inner instructions have been moved into the `instructions` column.\n\nIn summary, this technical guide provides information on Solana's raw data and the available tables. It also highlights the changes made to the `solana.account_activity` and `solana.transactions` tables. The guide is useful for developers who want to work with Solana's data and need to understand the changes made to the tables.",
      "questions": "1. What is Solana and how does it differ from other chains?\n- Solana is a non-EVM chain and its raw data looks different from other chains. \n\n2. What data is available in Solana and what information does each table contain?\n- Solana has several tables available, including account activity, blocks, rewards, transactions, and vote transactions. Each table contains specific data related to its name.\n\n3. What changes were made to the Solana tables in the latest update and how might this affect existing queries?\n- The latest update added new columns to the `solana.account_activity` table and split vote transactions into their own table. Existing queries may need to be updated to reflect changes in column names and structures."
    },
    {
      "fileName": "rewards.md",
      "filePath": "docs/data-tables/raw/solana/rewards.md",
      "url": "https://dune.com/docs/data-tables/raw/solana/rewards.md",
      "summary": "# Rewards\n\nThis section of the app technical guide covers the `Solana.rewards` table, which contains data about rewards paid out on Solana. The table is structured such that each row corresponds to one reward, and one block may contain zero or more rewards. The purpose of this table is to provide information about rewards paid out on the Solana blockchain, which can be useful for analyzing trends and patterns in reward distribution.\n\nThe table contains several columns, each with a specific purpose. The `block_slot` column contains the block's slot index in the ledger, while the `block_hash` column contains the hash of the block, base-58 encoded. The `block_time` column contains the estimated time the block was produced, and the `block_date` column contains the date of the event. The `commission` column contains the vote account commission when the reward was credited, only present for voting and staking rewards. The `lamports` column contains the number of reward lamports credited or debited by the account, while the `pre_balance` column contains the account balance in lamports before the reward was applied. The `post_balance` column contains the account balance in lamports after the reward was applied, and the `recipient` column contains the public key, as a base-58 encoded string, of the account that received the reward. Finally, the `reward_type` column contains the type of reward, which can be \"fee\", \"rent\", \"voting\", or \"staking\".\n\nAn example query for this table is provided in the guide, which shows how to retrieve the Solana rewards fee per day. This query can be useful for analyzing the distribution of rewards over time and identifying any trends or patterns in reward distribution.\n\nOverall, this section of the app technical guide provides a detailed overview of the `Solana.rewards` table, including its purpose, structure, and columns. It also provides an example query to demonstrate how the table can be used to analyze reward distribution on the Solana blockchain.",
      "questions": "1. What is the purpose of the Solana.rewards table?\n    \n    The Solana.rewards table contains data about rewards paid out on Solana, with each row corresponding to one reward. It includes information such as the block slot, block hash, block time, commission, lamports, pre and post balance, recipient, and reward type.\n\n2. What types of rewards are included in the reward_type column?\n    \n    The reward_type column includes four types of rewards: \"fee\", \"rent\", \"voting\", and \"staking\". The commission column is also present for voting and staking rewards.\n\n3. Are there any limitations or restrictions on the data included in the Solana.rewards table?\n    \n    The app technical guide does not provide information on any limitations or restrictions on the data included in the Solana.rewards table. It is possible that a blockchain SQL analyst may have additional questions or concerns about the accuracy or completeness of the data."
    },
    {
      "fileName": "transactions.md",
      "filePath": "docs/data-tables/raw/solana/transactions.md",
      "url": "https://dune.com/docs/data-tables/raw/solana/transactions.md",
      "summary": "# Transactions\n\nThe Transactions section of the Dune Docs project provides a technical guide for the Solana.transactions table, which contains transaction data within Solana's blockchain. The table includes relevant data related to account, protocol, and program activity. The guide provides a detailed description of each column in the table, including the column name, column type, and description. \n\nThe guide also includes query examples that demonstrate how to extract data from the table. For example, the guide provides a query that shows NFT transactions of popular programs in the past seven days and an overview of the drift-protocol. \n\nThe guide also includes definitions for several data types used in the table, including STRUCT, which allows for representing nested hierarchical data and has key-value pairs. The guide provides examples of how to use these data types to extract data from the table. \n\nThe guide also includes definitions for several struct types used in the table, including token_balance, instructions, inner_instructions, and error. Each struct type includes a field, data type, and description. \n\nOverall, the Transactions section of the Dune Docs project provides a comprehensive technical guide for the Solana.transactions table, including detailed descriptions of each column and struct type, as well as query examples that demonstrate how to extract data from the table.",
      "questions": "1. What is the purpose of the Solana.transactions table?\n   \n   The Solana.transactions table contains transaction data within Solana's blockchain, including relevant data related to account, protocol, and program activity.\n\n2. What is the data type of the token_balance field in the Struct definitions?\n   \n   The data type of the token_balance field in the Struct definitions is Decimal.\n\n3. How can the STRUCT data type be used to group fields together?\n   \n   The STRUCT data type can be used to group fields together to make them more accessible, similar to a dictionary in Python."
    },
    {
      "fileName": "vote-transactions.md",
      "filePath": "docs/data-tables/raw/solana/vote-transactions.md",
      "url": "https://dune.com/docs/data-tables/raw/solana/vote-transactions.md",
      "summary": "# Vote Transactions\n\nThe Vote Transactions section of the Dune Docs project focuses on the Solana.vote_transactions table, which contains the full set of vote transactions submitted by validators to vote on a block. This table can be joined with the non-vote transactions table to get a full breakdown of all transactions. The schema of the Solana.vote_transactions table is the same as the main transactions table.\n\nThe guide provides a detailed description of each column in the Solana.vote_transactions table, including the column name, column type, and description. Some of the columns include block_slot, which is the block's slot index in the ledger, block_time, which is the estimated time the block was produced, and fee, which is the fee charged for the transaction. The guide also includes examples of queries that can be run on the Solana.vote_transactions table, such as the Solana transactions past 30 days query available on Dune.xyz.\n\nOverall, the Vote Transactions section of the Dune Docs project provides a comprehensive guide to the Solana.vote_transactions table, including its schema and how it can be used to analyze vote transactions submitted by validators. This information is useful for developers and analysts working with Solana.vote_transactions and looking to gain a deeper understanding of its structure and contents.",
      "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the dune docs app, so a blockchain SQL analyst may need to seek additional documentation or context. \n\n2. How does the Solana.vote_transactions table differ from the non-vote transactions table mentioned in the guide?\n- The guide mentions that the Solana.vote_transactions table contains only vote transactions submitted by validators to vote on a block, while the non-vote transactions table contains a full breakdown of all transactions. A blockchain SQL analyst may want to know more about the schema and contents of the non-vote transactions table.\n\n3. Can the instructions column in the Solana.vote_transactions table be used to track specific actions taken by validators during the voting process?\n- The guide mentions that the instructions column contains a list of instructions to execute in order, but it does not provide information on what those instructions may be. A blockchain SQL analyst may want to know if the instructions can be used to track specific actions taken by validators during the voting process."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/docs/data-tables/raw/solana` folder contains a comprehensive technical guide for working with Solana's raw data tables. These tables provide valuable insights into various aspects of the Solana blockchain, such as account activity, blocks, rewards, transactions, and vote transactions. This guide is essential for developers and analysts who want to work with Solana's data and understand the structure and contents of these tables.\n\nThe `account-activity.md` file covers the `Solana.account_activity` table, which contains information about account usage in transactions. This table can be used to track the usage of a specific account over time and optimize applications based on account activity patterns.\n\nThe `blocks.md` file provides information on the `Solana.blocks` table, which contains block data within Solana's blockchain. This table can be used to identify block activity and transaction changes over time. The guide also provides Solana Query examples that can be used with the `Solana.blocks` table.\n\nThe `index.md` file serves as an overview of the Solana Technical Guide, providing information on Solana's raw data and how it differs from other chains. It also highlights the changes made to the `solana.account_activity` and `solana.transactions` tables, making it useful for developers who need to understand the updates made to these tables.\n\nThe `rewards.md` file covers the `Solana.rewards` table, which contains data about rewards paid out on Solana. This table can be used to analyze trends and patterns in reward distribution, providing valuable insights into the Solana blockchain's reward system.\n\nThe `transactions.md` file provides a technical guide for the `Solana.transactions` table, which contains transaction data within Solana's blockchain. The guide includes detailed descriptions of each column and struct type, as well as query examples that demonstrate how to extract data from the table.\n\nFinally, the `vote-transactions.md` file focuses on the `Solana.vote_transactions` table, which contains the full set of vote transactions submitted by validators to vote on a block. This table can be joined with the non-vote transactions table to get a full breakdown of all transactions, providing a comprehensive view of validator voting activity on the Solana blockchain.\n\nOverall, the guide in this folder offers a detailed understanding of Solana's raw data tables and their usage. It is an invaluable resource for developers and analysts working with Solana data, providing examples and explanations that can help them make informed decisions and optimize their applications based on the insights gained from these tables.",
  "questions": ""
}