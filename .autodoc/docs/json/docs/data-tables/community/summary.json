{
  "folderName": "community",
  "folderPath": "docs/data-tables/community",
  "url": "https://dune.com/docs/data-tables/community",
  "files": [
    {
      "fileName": "index.md",
      "filePath": "docs/data-tables/community/index.md",
      "url": "https://dune.com/docs/data-tables/community/index.md",
      "summary": "# Dune Docs App Technical Guide: Community\n\nThis section of the Dune Docs project contains data that has been submitted and hosted on Dune by third-party data providers. The purpose of this guide is to provide an overview of the Community section and its features.\n\n## Availability\n\nThe Community section is only available on the V2 Engine. It is important to note that this section is still under development, and the infrastructure is being built to support more datasets.\n\n## Purpose\n\nWhile blockchain data is interesting on its own, sometimes off-chain data or augmented on-chain data is needed as well. The Community section is designed to partner with selected organizations that stream their data directly to Dune. This allows for a more comprehensive view of the data and can provide additional insights.\n\n## Data Providers\n\nThe Community section currently features two data providers: Flashbots and Reservoir. Each provider has its own page with more detailed information about the data they provide.\n\n### Flashbots\n\nFlashbots is a research and development organization that focuses on miner-extractable value (MEV) and the fair distribution of this value. Their page on the Community section provides data related to MEV and other metrics.\n\n### Reservoir\n\nReservoir is a data provider that focuses on Ethereum data. Their page on the Community section provides data related to Ethereum transactions, including gas usage and transaction volume.\n\nIt is important to note that these are just two examples of data providers that may be featured in the Community section. As the infrastructure is built out, more providers may be added.\n\nOverall, the Community section of the Dune Docs project is designed to provide additional data insights through partnerships with third-party data providers. While still under development, this section has the potential to provide valuable information to users of the Dune platform.",
      "questions": "1. What is the V2 Engine and why is it necessary for accessing the Community section?\n- The V2 Engine is required for accessing the Community section, but the guide does not provide information on what it is or why it is necessary.\n\n2. What types of off-chain or augmented on-chain data are being provided by the selected organizations?\n- The guide mentions that selected organizations are streaming their data directly to Dune, but does not provide any information on the types of data being provided.\n\n3. Is there a timeline for when more datasets will be supported in the Community section?\n- The guide mentions that the infrastructure for the Community section is still being built out and that more datasets cannot be supported at the current moment, but does not provide any information on when this may change."
    }
  ],
  "folders": [
    {
      "folderName": "flashbots",
      "folderPath": "docs/data-tables/community/flashbots",
      "url": "https://dune.com/docs/data-tables/community/flashbots",
      "files": [
        {
          "fileName": "arbitrages.md",
          "filePath": "docs/data-tables/community/flashbots/arbitrages.md",
          "url": "https://dune.com/docs/data-tables/community/flashbots/arbitrages.md",
          "summary": "# Dune Docs App Technical Guide: Arbitrages\n\nThe `arbitrages` section of the Dune Docs project is focused on providing additional information about each arbitrage trade. The `flashbots.arbitrages` table contains records with details such as block number, account address, time of record creation, available amount before and after the arbitrage, profit amount, profit token address, protocols involved in the transaction, transaction hash, and timestamp of the latest update of the file.\n\nThe purpose of this technical guide is to provide a clear understanding of the `arbitrages` section of the Dune Docs project. The guide explains the structure of the `flashbots.arbitrages` table, including the column names, data types, and descriptions. It also provides query examples that can be used to retrieve information from the table.\n\nFor instance, the `Total Arb Protocols` query example provided in the guide can be used to retrieve the total number of arbitrage protocols involved in the transaction. This query can be accessed through the link provided in the guide.\n\nOverall, this technical guide serves as a reference for developers and users who want to understand the `arbitrages` section of the Dune Docs project. It provides a clear and concise explanation of the table structure and query examples that can be used to retrieve information from the table.",
          "questions": "1. What is the purpose of the `flashbots.arbitrages` table in the context of blockchain technology?\n- The `flashbots.arbitrages` table contains records with additional information about each arbitrage trade in the blockchain, which can be useful for analyzing trading patterns and identifying potential opportunities for profit.\n\n2. How can a blockchain SQL analyst use the query examples provided in the technical guide?\n- The query examples provided in the technical guide can be used by a blockchain SQL analyst to retrieve specific data from the `flashbots.arbitrages` table, such as information about the protocols involved in a transaction or the profit amount after an arbitrage.\n\n3. Are there any limitations or potential issues with using SQL to analyze blockchain data?\n- While SQL can be a powerful tool for analyzing blockchain data, there are some limitations and potential issues to be aware of, such as the need to handle large amounts of data and the possibility of inaccuracies due to the decentralized nature of the blockchain."
        },
        {
          "fileName": "index.md",
          "filePath": "docs/data-tables/community/flashbots/index.md",
          "url": "https://dune.com/docs/data-tables/community/flashbots/index.md",
          "summary": "# Flashbots\n\nThis section of the app technical guide covers the Flashbots project, a research and development organization focused on ensuring that MEV (Miner Extractable Value) incentives do not become opaque and undemocratic. MEV refers to the profit that miners can extract from reordering, censoring, or including transactions in a block. \n\nThe guide notes that Flashbots' open source engine for generating MEV data, mev-inspect-py, powers dashboards such as mev-explore and Dune's Flashbots integration. The section encourages researchers and developers to report any bugs or implement new features to improve the engine. \n\nThe guide provides links to the Flashbots documentation and Discord server for more information and updates on their data and mev-inspect. \n\nExample: If a developer is working on integrating Flashbots into their project, they can refer to the documentation and join the Discord server to stay up-to-date on any changes or improvements to the engine. They can also report any bugs they encounter to help improve the engine for the community.",
          "questions": "1. What is the purpose of Flashbots and how does it relate to MEV incentives?\n- Flashbots is a research and development organization that aims to prevent MEV incentives from becoming opaque and undemocratic. MEV-inspect-py, their open source engine for generating MEV data, powers dashboards such as mev-explore and Dune's Flashbots integration.\n\n2. How can blockchain SQL analysts contribute to improving Flashbots' open source engine?\n- Flashbots encourages researchers and developers to report and help correct any found bugs, or implement any new features. They can consult the documentation and join the Flashbots discord for more information and updates on their data and mev-inspect.\n\n3. What resources are available for developers and researchers interested in using Flashbots?\n- Flashbots provides documentation on their website and a Discord server for more information and updates on their data and mev-inspect. They also encourage community contributions to improve their open source engine."
        },
        {
          "fileName": "liquidations.md",
          "filePath": "docs/data-tables/community/flashbots/liquidations.md",
          "url": "https://dune.com/docs/data-tables/community/flashbots/liquidations.md",
          "summary": "# Liquidations\n\nThe `liquidations` section of the Dune Docs project focuses on providing details related to executed liquidations. The `flashbots.liquidations` table contains information about liquidations executed using the MEV strategy. The table includes details such as the time of record creation, transaction hash, trace pattern related to the position of the transaction in the chain of all transactions related to the MEV trade, underlying token address of the debt to pay, amount received from the liquidation, protocol name, address of the liquidated user, address of the liquidator user, address of the received asset, block number, amount of purchased debt, and timestamp of the latest update of the file.\n\nThe purpose of this guide is to provide a detailed explanation of the `flashbots.liquidations` table and its columns. The guide also includes a link to query examples for liquidations by protocol. This information is useful for developers who want to understand how liquidations work and how to access the data related to executed liquidations.\n\nAn example of a query that can be run using the `flashbots.liquidations` table is the `Liquidations by Protocol` query, which can be found at [https://dune.com/queries/625715/1166880](https://dune.com/queries/625715/1166880). This query provides information about liquidations executed by protocol, including the protocol name, number of liquidations, total received amount, and average received amount.\n\nOverall, the `liquidations` section of the Dune Docs project provides valuable information for developers who want to understand how liquidations work and how to access the data related to executed liquidations using the MEV strategy.",
          "questions": "1. What is the purpose of the `flashbots.liquidations` table in the context of blockchain and how is it related to MEV (Miner Extractable Value)? \n- The `flashbots.liquidations` table contains details related to executed liquidations, which is another MEV strategy. It is related to MEV because it involves extracting value from transactions before they are included in a block.\n\n2. Can you provide more information on the `trace_address` column and how it relates to the position of the transaction in the chain of all transactions related to the MEV trade? \n- The `trace_address` column contains a trace pattern related to the position of the transaction in the chain of all transactions related to the MEV trade. This can be useful for analyzing the flow of transactions and identifying potential bottlenecks or inefficiencies.\n\n3. Are there any limitations or considerations to keep in mind when using the `debt_purchase_amount` column for analysis? \n- It may be important to consider the specific context and protocol being used when analyzing the `debt_purchase_amount` column, as the amount of purchased debt may vary depending on the protocol and other factors. Additionally, it may be useful to compare this column to other relevant metrics to gain a more complete understanding of the data."
        },
        {
          "fileName": "mev_summary.md",
          "filePath": "docs/data-tables/community/flashbots/mev_summary.md",
          "url": "https://dune.com/docs/data-tables/community/flashbots/mev_summary.md",
          "summary": "# mev_summary\n\nThe `mev_summary` section of the Dune Docs project is focused on providing a summary of all the classified transactions. The `flashbots.mev_summary` table contains information on the various transactions that have taken place, including the block timestamp, block number, base fee per gas, direct transfer to miner's address, error (if any), gas price, amount of gas spent, amount of gas used, total profit from the transaction in USD, address of the miner, payment received by the miner in USD, main interacted protocol, list of protocols involved in the transaction, hash of the transaction, type of the MEV (e.g. arbitrage), and timestamp of the latest update of the file.\n\nThis section of the app technical guide provides a detailed description of the various columns in the `flashbots.mev_summary` table, including their data type and description. For example, the `block_timestamp` column contains a timestamp of the block, while the `gas_price` column contains the price of the gas. The guide also provides a query example that can be used to retrieve information from the `flashbots.mev_summary` table.\n\nOverall, the `mev_summary` section of the Dune Docs project is an important resource for anyone looking to understand the various transactions that have taken place on the platform. By providing detailed information on each transaction, including the type of MEV and the protocols involved, this section of the app technical guide helps users gain a better understanding of how the platform works and how they can use it to their advantage.",
          "questions": "1. What is the purpose of the `mev_summary` table in the context of blockchain and SQL analysis?\n- The `mev_summary` table contains a summary of all classified transactions, which could be useful for analyzing miner revenue and profit in the context of MEV (miner-extractable value) strategies.\n\n2. Are there any limitations or potential issues with using this table for blockchain and SQL analysis?\n- The technical guide does not provide information on any limitations or potential issues with using this table, so a blockchain SQL analyst may need to investigate further to ensure the data is accurate and complete.\n\n3. Are there any additional resources or documentation available for using the `mev_summary` table in Dune Docs?\n- The technical guide provides a link to query examples, but it is unclear if there are any additional resources or documentation available for using this table in Dune Docs. A blockchain SQL analyst may need to reach out to the Dune Docs team or community for more information."
        },
        {
          "fileName": "sandwiched-swaps.md",
          "filePath": "docs/data-tables/community/flashbots/sandwiched-swaps.md",
          "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiched-swaps.md",
          "summary": "# Sandwiched Swaps\n\nThe Sandwiched Swaps section of the Dune Docs project focuses on the `flashbots.sandwiched_swaps` table, which contains additional data about one or more swaps that were sandwiched with a corresponding sandwich in the database. This section provides a detailed explanation of the columns in the table and their respective data types.\n\nThe `created_at` column contains the time of the record's creation, while the `block_number` column contains the block number of the transaction. The `sandwich_id` column contains the internal ID of the sandwiched swap, and the `trace_address` column contains the trace pattern related to the position of the swap in the chain of all swaps related to the arbitrage trade. Finally, the `transaction_hash` column contains the transaction hash, and the `timestamp` column contains the timestamp of the latest update of the file.\n\nThis section also provides query examples for the `flashbots.sandwiched_swaps` table, which can be used as a reference for developers working on the Dune Docs project. The query examples include the column name, data type, and description of each column in the table.\n\nOverall, the Sandwiched Swaps section of the Dune Docs project provides a comprehensive guide to the `flashbots.sandwiched_swaps` table, including its purpose, columns, and query examples. This information is essential for developers working on the Dune Docs project to understand the structure and functionality of the table and to use it effectively in their work.",
          "questions": "1. What is the purpose of the sandwiched_swaps table in the context of blockchain and SQL analysis?\n- A blockchain SQL analyst might want to know how the sandwiched_swaps table fits into the overall data schema and how it can be used to analyze arbitrage trades involving swaps.\n\n2. Are there any limitations or constraints on the data that can be queried from the sandwiched_swaps table?\n- A blockchain SQL analyst might want to know if there are any restrictions on the types of queries that can be run on the sandwiched_swaps table, such as limitations on the time range or block numbers that can be queried.\n\n3. How frequently is the sandwiched_swaps table updated and what triggers these updates?\n- A blockchain SQL analyst might want to know how often the sandwiched_swaps table is updated and what events trigger these updates, such as new blocks being added to the blockchain or new transactions being processed."
        },
        {
          "fileName": "sandwiches.md",
          "filePath": "docs/data-tables/community/flashbots/sandwiches.md",
          "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiches.md",
          "summary": "# Sandwiches Table\n\nThe `sandwiches` table is a part of the Dune Docs project and contains detailed information about executed sandwiches. The table consists of the following columns:\n\n- `created_at`: This column contains the time of the record's creation.\n- `block_number`: This column contains the block number.\n- `backrun_swap_trace_address`: This column contains the address of the swap in the backrun transaction.\n- `backrun_swap_transaction_hash`: This column contains the transaction hash of the backrun transaction of the specified sandwich.\n- `frontrun_swap_trace_address`: This column contains the address of the swap in the frontrun transaction.\n- `frontrun_swap_transaction_hash`: This column contains the transaction hash of the frontrun transaction of the specified sandwich.\n- `id`: This column contains the internal id of the sandwich.\n- `profit_amount`: This column contains the profit amount after the arbitrage.\n- `profit_token_address`: This column contains the address of the profit asset.\n- `sandwicher_address`: This column contains the address of the sandwicher.\n- `timestamp`: This column contains the timestamp of the latest update of the file.\n\nThe `sandwiches` table is used to keep track of executed sandwiches and their details. For example, it can be used to analyze the performance of the sandwicher and the profitability of the arbitrage. \n\nHere is an example of how the `sandwiches` table can be queried:\n\n```\nSELECT *\nFROM sandwiches\nWHERE sandwicher_address = '0x1234567890abcdef'\n```\n\nThis query will return all the sandwiches executed by the sandwicher with the address `0x1234567890abcdef`.",
          "questions": "1. What is the purpose of the \"sandwiches\" table in the Dune Docs app?\n- The \"sandwiches\" table contains detailed information about executed sandwiches, including the time of record creation, block number, swap addresses and transaction hashes, profit amount and token address, sandwicher address, and timestamp of the latest update of the file.\n\n2. How is the data in the \"sandwiches\" table stored and accessed?\n- The data in the \"sandwiches\" table is stored in columns with corresponding data types and descriptions, and can be accessed through SQL queries.\n\n3. Are there any limitations or potential issues with using SQL to analyze the data in the \"sandwiches\" table?\n- It is unclear from the provided technical guide whether there are any limitations or potential issues with using SQL to analyze the data in the \"sandwiches\" table. A blockchain SQL analyst may need to consult additional documentation or perform further testing to determine any such limitations or issues."
        }
      ],
      "folders": [],
      "summary": "The Flashbots folder in the Dune Docs project focuses on providing comprehensive information and guides related to the Flashbots project, which is a research and development organization aimed at ensuring that MEV (Miner Extractable Value) incentives remain transparent and democratic. This folder contains various files that cover different aspects of the Flashbots project, such as arbitrages, liquidations, mev_summary, sandwiched swaps, and sandwiches.\n\nFor instance, the `arbitrages.md` file provides a detailed explanation of the `flashbots.arbitrages` table, which contains records with information about each arbitrage trade. Developers can use this guide to understand the table structure and retrieve information using query examples provided in the guide, such as the `Total Arb Protocols` query.\n\nThe `liquidations.md` file focuses on the `flashbots.liquidations` table, which contains information about liquidations executed using the MEV strategy. Developers can use this guide to understand the table structure and access data related to executed liquidations using query examples provided in the guide, such as the `Liquidations by Protocol` query.\n\nThe `mev_summary.md` file covers the `flashbots.mev_summary` table, which provides a summary of all classified transactions. This guide helps users understand the various transactions that have taken place on the platform, including the type of MEV and the protocols involved. The guide also provides a query example that can be used to retrieve information from the `flashbots.mev_summary` table.\n\nThe `sandwiched-swaps.md` file focuses on the `flashbots.sandwiched_swaps` table, which contains additional data about one or more swaps that were sandwiched with a corresponding sandwich in the database. This guide provides a detailed explanation of the columns in the table and their respective data types, as well as query examples for developers working on the Dune Docs project.\n\nLastly, the `sandwiches.md` file provides a comprehensive guide to the `flashbots.sandwiches` table, which contains detailed information about executed sandwiches. This guide is essential for developers working on the Dune Docs project to understand the structure and functionality of the table and to use it effectively in their work.\n\nOverall, the Flashbots folder in the Dune Docs project serves as a valuable resource for developers and users who want to understand the Flashbots project and its various aspects. The guides provided in this folder offer clear and concise explanations of the table structures, column descriptions, and query examples that can be used to retrieve information from the tables.",
      "questions": ""
    },
    {
      "folderName": "reservoir",
      "folderPath": "docs/data-tables/community/reservoir",
      "url": "https://dune.com/docs/data-tables/community/reservoir",
      "files": [
        {
          "fileName": "ask-events.md",
          "filePath": "docs/data-tables/community/reservoir/ask-events.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/ask-events.md",
          "summary": "# Ask Events\n\nThis section of the app technical guide covers the `reservoir.ask_events` table, which contains records with information about each ask change. The table includes various columns such as `id`, `kind`, `contract`, `token_id`, `order_id`, `maker`, `price`, `quantity_remaining`, `valid_from`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`. \n\nThe `id` column represents the internal event ID, while the `kind` column represents the type of event (e.g. new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice). The `contract` column contains the contract address, and the `token_id` column contains the ID of the token in the collection. The `order_id` column represents the associated ask ID, and the `maker` column contains the associated ask maker wallet address. The `price` column represents the associated ask price in native currency, and the `quantity_remaining` column represents the associated ask tokens remaining. The `valid_from` and `valid_until` columns represent the associated ask validity start and expiration, respectively. The `source` column contains the source of the order (e.g. opensea.io), while the `tx_hash` and `tx_timestamp` columns represent the associated transaction hash and timestamp, respectively. Finally, the `created_at` column represents the timestamp the event was recorded.\n\nThis section also includes query examples that can be found at the specified URLs. These queries can be used to retrieve information from the `reservoir.ask_events` table. \n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.ask_events` table and its various columns. It also includes query examples that can be used to retrieve information from the table.",
          "questions": "1. What is the purpose of the `reservoir.ask_events` table in the Dune Docs app?\n- The `reservoir.ask_events` table contains records with information about each ask change in the app.\n\n2. What are some examples of query options available for the `reservoir.ask_events` table?\n- Query examples for the `reservoir.ask_events` table can be found at the following links: [https://dune.com/queries/1302858/2232178](https://dune.com/queries/1302858/2232178) and [https://dune.com/queries/1302863/2232189](https://dune.com/queries/1302863/2232189).\n\n3. What types of events are included in the `kind` column of the `reservoir.ask_events` table?\n- The `kind` column in the `reservoir.ask_events` table includes various event types such as new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, and reprice."
        },
        {
          "fileName": "asks.md",
          "filePath": "docs/data-tables/community/reservoir/asks.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/asks.md",
          "summary": "## Reservoir.asks\n\nThis section of the app technical guide covers the `reservoir.asks` table, which contains records with information about each listing. The table includes various columns such as `id`, `kind`, `status`, `contract`, `token_id`, `maker`, `taker`, `price`, `start_price`, `end_price`, `currency_address`, `currency_symbol`, `currency_price`, `dynamic`, `quantity`, `quantity_filled`, `quantity_remaining`, `valid_from`, `valid_until`, `nonce`, `source`, `fee_bps`, `expiration`, `raw_data`, `created_at`, and `updated_at`. Each column is described in detail, including its data type and a brief explanation of its purpose.\n\nThe purpose of this guide is to provide developers with a clear understanding of the `reservoir.asks` table and its columns, as well as how to query the table. The guide includes two query examples that can be found at the provided links. Developers can use this information to build applications that interact with the `reservoir.asks` table, such as a marketplace or trading platform.\n\nFor example, a developer building a trading platform could use the `price` column to display the current price of a listing, the `quantity` column to show the amount of tokens available for purchase, and the `valid_from` and `valid_until` columns to display the start and end times of the listing. The `maker` and `taker` columns could be used to identify the parties involved in the transaction, and the `fee_bps` column could be used to calculate the listing fee.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the `reservoir.asks` table and its columns, as well as practical examples of how to use the information to build applications that interact with the table.",
          "questions": "1. What is the purpose of the `reservoir.asks` table in the Dune Docs app?\n- The `reservoir.asks` table contains records with information about each listing in the app.\n\n2. What kind of data is stored in the `price` column of the `reservoir.asks` table?\n- The `price` column stores the current price of the listing in native currency.\n\n3. Is there any information in the `reservoir.asks` table about the transaction history of a listing?\n- No, there is no information in the `reservoir.asks` table about the transaction history of a listing."
        },
        {
          "fileName": "attribute-keys.md",
          "filePath": "docs/data-tables/community/reservoir/attribute-keys.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/attribute-keys.md",
          "summary": "## Attribute Keys\n\nThe `attribute_keys` section of the app technical guide provides information about the `reservoir.attribute_keys` table. This table contains records with information about each attribute key. The table has seven columns: `id`, `collection_id`, `key`, `kind`, `rank`, `created_at`, and `updated_at`. \n\n- `id`: This is the internal attribute key id.\n- `collection_id`: This is the associated collection id.\n- `key`: This is the name of the attribute.\n- `kind`: This is the value type, which can be string, number, date, or range.\n- `rank`: This is the sort order.\n- `created_at`: This is the timestamp the attribute key was created.\n- `updated_at`: This is the timestamp the attribute key was updated.\n\nThe guide also provides a link to query examples for the `reservoir.attribute_keys` table. The link leads to a page on the Dune website that provides examples of queries that can be run on the table. \n\nOverall, this section of the guide is useful for developers who need to work with the `reservoir.attribute_keys` table in the Dune app. It provides a clear understanding of the table's structure and contents, as well as examples of how to query the table.",
          "questions": "1. What is the purpose of the `reservoir.attribute_keys` table in the context of the dune docs app? \n   - The `reservoir.attribute_keys` table contains information about each attribute key in the app, including its name, type, and associated collection.\n2. How are attribute keys sorted in the `reservoir.attribute_keys` table? \n   - Attribute keys are sorted by their `rank` column in the `reservoir.attribute_keys` table.\n3. Are there any examples of queries that can be run using the `reservoir.attribute_keys` table? \n   - Yes, query examples can be found at the URL provided in the app technical guide: [https://dune.com/queries/1302930/2232305](https://dune.com/queries/1302930/2232305)."
        },
        {
          "fileName": "attributes.md",
          "filePath": "docs/data-tables/community/reservoir/attributes.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/attributes.md",
          "summary": "# Attributes\n\nThe `reservoir.attributes` table contains records with information about each attribute. This section of the app technical guide provides a detailed description of the columns in this table, including their data types and descriptions. \n\nThe `id` column is an internal attribute ID, while the `attribute_key_id` column is an internal attribute key ID. The `value` column contains the attribute value, and the `token_count` column indicates the number of tokens that have the attribute. The `on_sale_count` column indicates the number of tokens that have the attribute and are currently on sale. \n\nThe `floor_sell_value` column contains the current floor ask price, while the `sell_updated_at` column indicates the timestamp of the last update to the floor sale. The `collection_id` column contains the associated collection ID, and the `kind` column indicates the value type (string, number, date, range). The `key` column contains the associated key name. \n\nFinally, the `created_at` and `updated_at` columns indicate the timestamps of when the attribute was created and last updated, respectively. \n\nThis section also provides two query examples for the `reservoir.attributes` table, which can be found at the provided links. These examples can be used as a reference for querying the table in the app.",
          "questions": "1. What is the purpose of the `reservoir.attributes` table in the context of the Dune Docs project? \n   - The `reservoir.attributes` table contains records with information about each attribute in the Dune Docs project.\n2. How is the `token_count` column calculated and what does it represent? \n   - The `token_count` column represents the amount of tokens that have the attribute, but it is unclear how it is calculated based on the information provided in the technical guide.\n3. Are there any limitations or constraints on the data types that can be stored in the `value` column? \n   - The technical guide does not provide information on any limitations or constraints on the data types that can be stored in the `value` column."
        },
        {
          "fileName": "bid-events.md",
          "filePath": "docs/data-tables/community/reservoir/bid-events.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/bid-events.md",
          "summary": "# Bid Events\n\nThe `bid_events` table is a part of the Dune Docs project and contains records with information about each bid change. This table is located in the `data-tables` folder of the project.\n\nThe table has several columns that provide information about the bid event, including the event ID, event type, event status, contract address, token set ID, associated bid ID, bid maker wallet address, bid price, bid value, bid tokens remaining, bid validity start and expiration, source of the order, associated transaction hash, and timestamp the event was recorded.\n\nThe purpose of this table is to provide a record of all bid changes that occur within the system. This information can be used to track the progress of bids, monitor the performance of the system, and identify any issues that may arise.\n\nQuery examples for this table are not yet available, but they will be added to the project in the future.\n\nOverall, the `bid_events` table is an important component of the Dune Docs project, providing valuable information about the bidding process within the system.",
          "questions": "1. What is the purpose of the `reservoir.bid_events` table in the context of the Dune Docs project?\n- The `reservoir.bid_events` table contains records with information about each bid change in the project.\n\n2. What are the different types of events that can be found in the `kind` column of the `reservoir.bid_events` table?\n- The different types of events that can be found in the `kind` column of the `reservoir.bid_events` table include new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, and reprice.\n\n3. How is the value of a bid represented in the `reservoir.bid_events` table?\n- The value of a bid is represented in the `reservoir.bid_events` table as the associated bid value in native currency."
        },
        {
          "fileName": "bids.md",
          "filePath": "docs/data-tables/community/reservoir/bids.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/bids.md",
          "summary": "# Bids\n\n## Reservoir.bids\n\nThis section of the app technical guide covers the `reservoir.bids` table, which contains records with information about each bid. The table includes various columns such as `id`, `kind`, `status`, `contract`, `token_set_id`, `maker`, `taker`, `price`, `value`, `currency_address`, `currency_symbol`, `currency_price`, `quantity`, `quantity_filled`, `quantity_remaining`, `valid_from`, `valid_until`, `nonce`, `source`, `fee_bps`, `expiration`, `raw_data`, `created_at`, and `updated_at`.\n\nThe `id` column represents the internal order id, while the `kind` column represents the protocol name (e.g. seaport). The `status` column represents the order status (active, inactive), and the `contract` column represents the contract address. The `token_set_id` column represents the id of the token set, while the `maker` and `taker` columns represent the maker and taker wallet addresses, respectively.\n\nThe `price` column represents the current price in native currency, while the `value` column represents the current value in native currency. The `currency_address` column represents the currency address, and the `currency_symbol` column represents the currency symbol. The `currency_price` column represents the currency price.\n\nThe `quantity` column represents the amount of tokens that is listed, while the `quantity_filled` column represents the amount of tokens that was filled. The `quantity_remaining` column represents the amount of tokens remaining, and the `valid_from` and `valid_until` columns represent the listing start and end times, respectively.\n\nThe `nonce` column represents the order nonce of the maker, while the `source` column represents the source of the listing (e.g. opensea.io). The `fee_bps` column represents the listing fee, and the `expiration` column represents the associated transaction hash. The `raw_data` column represents the raw order data (format will vary per source).\n\nFinally, the `created_at` and `updated_at` columns represent the timestamps the listing was created and updated, respectively.\n\nQuery examples for this table can be found at the link provided in the guide.",
          "questions": "1. What is the purpose of the dune docs project and how does this table fit into it?\n- This app technical guide only provides information about the `reservoir.bids` table and does not give context about the overall purpose of the dune docs project.\n\n2. How is the data in this table being collected and updated?\n- The app technical guide does not provide information about the data collection and update process for this table.\n\n3. Are there any constraints or limitations on the data types or values that can be stored in this table?\n- The app technical guide does not mention any constraints or limitations on the data types or values that can be stored in this table."
        },
        {
          "fileName": "collection-floor-ask-events.md",
          "filePath": "docs/data-tables/community/reservoir/collection-floor-ask-events.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/collection-floor-ask-events.md",
          "summary": "# Collection Floor Ask Events\n\nThis section of the app technical guide covers the `reservoir.collection_floor_ask_events` table, which contains records with information about each collection floor ask change. The table includes columns such as `id`, `kind`, `collection_id`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`.\n\nThe `id` column is an internal event ID, while the `kind` column specifies the type of event (e.g. new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice). The `collection_id` column contains the ID of the collection, and the `contract` column contains the contract address. The `token_id` column specifies the ID of the token in the collection, and the `order_id` column contains the associated ask ID. The `maker` column contains the wallet address of the associated ask maker, and the `price` column contains the associated ask price in native currency. The `previous_price` column contains the previous floor ask price in native currency, and the `valid_until` column specifies the expiration of the associated ask. The `source` column contains the source of the order (e.g. opensea.io), while the `tx_hash` column contains the associated transaction hash. The `tx_timestamp` column specifies the timestamp of the associated transaction, and the `created_at` column contains the timestamp the event was recorded.\n\nThis section also includes query examples for the `reservoir.collection_floor_ask_events` table, which can be found at the following links:\n\n- [https://dune.com/queries/1302799/2232083](https://dune.com/queries/1302799/2232083)\n- [https://dune.com/queries/1302841/2232151](https://dune.com/queries/1302841/2232151)\n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.collection_floor_ask_events` table and its columns, as well as query examples for working with the table.",
          "questions": "1. What is the purpose of the `reservoir.collection_floor_ask_events` table in the context of the Dune Docs project? \n   - The `reservoir.collection_floor_ask_events` table contains records with information about each collection floor ask change.\n2. What kind of events are included in the `kind` column of the table? \n   - The `kind` column includes event types such as new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, and reprice.\n3. Are there any limitations or restrictions on the data that can be queried from this table? \n   - The app technical guide does not provide information on any limitations or restrictions on the data that can be queried from this table."
        },
        {
          "fileName": "collection-top-bid-events.md",
          "filePath": "docs/data-tables/community/reservoir/collection-top-bid-events.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/collection-top-bid-events.md",
          "summary": "# Collection Top Bid Events\n\nThe `collection_top_bid_events` table is a part of the Dune Docs project and contains records with information about each collection top bid change. This table is located in the `data-tables` folder of the project.\n\nThe table has several columns, including `id`, `kind`, `collection_id`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`. Each column has a specific data type and description.\n\nThe `id` column is an internal event ID, while the `kind` column specifies the type of event, such as `new-order`, `expiry`, `sale`, `cancel`, `balance-change`, `approval-change`, `bootstrap`, `revalidation`, or `reprice`. The `collection_id` column contains the ID of the collection, and the `contract` column contains the contract address. The `token_id` column contains the ID of the token in the collection, and the `order_id` column contains the associated bid ID. The `maker` column contains the associated bid maker wallet address, and the `price` column contains the associated bid price in native currency.\n\nThe `previous_price` column contains the previous top bid price in native currency, and the `valid_until` column contains the associated bid validity expiration. The `source` column specifies the source of the order, such as `opensea.io`, and the `tx_hash` column contains the associated transaction hash. The `tx_timestamp` column contains the associated transaction timestamp, and the `created_at` column contains the timestamp the event was recorded.\n\nThe `collection_top_bid_events` table can be queried using SQL. Query examples can be found in the project, but the link is currently TBD. This table is useful for tracking changes in top bids for collections and analyzing bidding behavior.",
          "questions": "1. What is the purpose of the `reservoir.collection_top_bid_events` table in the context of the dune docs project?\n- The `reservoir.collection_top_bid_events` table contains records with information about each collection top bid change in the dune docs project.\n\n2. What are the different event types that can be found in the `kind` column of the `reservoir.collection_top_bid_events` table?\n- The `kind` column in the `reservoir.collection_top_bid_events` table contains different event types such as new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, and reprice.\n\n3. How are the bid prices represented in the `price` and `previous_price` columns of the `reservoir.collection_top_bid_events` table?\n- The `price` and `previous_price` columns in the `reservoir.collection_top_bid_events` table represent the associated bid price and previous top bid price in native currency, respectively."
        },
        {
          "fileName": "collections.md",
          "filePath": "docs/data-tables/community/reservoir/collections.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/collections.md",
          "summary": "# Collections\n\nThis section of the app technical guide focuses on the `reservoir.collections` table, which contains records with information about each NFT collection. The table includes various columns such as `id`, `slug`, `name`, `description`, `token_count`, `contract`, `day1_rank`, `day7_rank`, `day30_rank`, `all_time_rank`, `day1_volume`, `day7_volume`, `day30_volume`, `all_time_volume`, `day1_volume_change`, `day7_volume_change`, `day30_volume_change`, `floor_ask_value`, `day1_floor_sale_value`, `day7_floor_sale_value`, `day30_floor_sale_value`, `day1_floor_sale_change`, `day7_floor_sale_change`, `day30_floor_sale_change`, `created_at`, and `updated_at`.\n\nThe purpose of this guide is to provide developers with information on how to query the `reservoir.collections` table and understand the meaning of each column. The guide includes two query examples that can be found at the provided links. \n\nDevelopers can use this information to build features that utilize NFT collections, such as displaying information about a specific collection or analyzing trends in NFT trading volume and floor sale prices. For example, a developer could use the `day1_volume` column to display the trading volume of a specific collection over the past day, or use the `floor_ask_value` column to display the current floor sale price of a collection in its native currency.\n\nOverall, this section of the app technical guide provides valuable information for developers looking to work with NFT collections in the Dune Docs project.",
          "questions": "1. What is the purpose of the `reservoir.collections` table in the Dune Docs app?\n- The `reservoir.collections` table contains records with information about each NFT collection.\n\n2. What type of data is stored in the `day1_rank`, `day7_rank`, `day30_rank`, and `all_time_rank` columns?\n- The `day1_rank`, `day7_rank`, `day30_rank`, and `all_time_rank` columns store ranking information for the NFT collections.\n\n3. What is the format of the query examples provided in the app technical guide?\n- The query examples provided in the app technical guide are in the form of links to Dune.com queries."
        },
        {
          "fileName": "index.md",
          "filePath": "docs/data-tables/community/reservoir/index.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/index.md",
          "summary": "# Reservoir\n\nThe Reservoir section of the Dune Docs project focuses on enabling the next generation of NFT products and liquidity sources through open-source, on-chain NFT order aggregation. This header provides links to the Reservoir dashboard, documentation, and Discord channel for further information and support.\n\n## Dashboard\n\nThe Reservoir dashboard link provided in this section directs users to the Reservoir0x dashboard on Dune.com. This dashboard provides a visual representation of Reservoir's on-chain NFT order aggregation, allowing users to view and analyze data related to NFT trades and liquidity sources.\n\n## Docs\n\nThe Reservoir documentation link provided in this section directs users to the Reservoir.tools documentation page. This page provides detailed information on how to use Reservoir's open-source, on-chain NFT order aggregation platform. The documentation covers topics such as installation, configuration, and usage of the Reservoir platform.\n\n## Discord\n\nThe Reservoir Discord link provided in this section directs users to the Reservoir Discord channel. This channel provides a community forum for Reservoir users to ask questions, share information, and collaborate on the development of the Reservoir platform.\n\nOverall, the Reservoir section of the Dune Docs project provides users with the resources they need to understand and utilize Reservoir's on-chain NFT order aggregation platform. The dashboard, documentation, and Discord channel all work together to provide a comprehensive support system for Reservoir users.",
          "questions": "1. What is the purpose of Reservoir in the blockchain ecosystem?\n- Reservoir is enabling the next generation of NFT products and liquidity sources through open-source, on-chain NFT order aggregation.\n\n2. What kind of data can be accessed through the Reservoir dashboard?\n- The Reservoir dashboard provides access to data related to the Reservoir project, such as order aggregation.\n\n3. Are there any additional resources available for developers looking to integrate Reservoir into their projects?\n- Yes, the Reservoir documentation provides additional resources for developers looking to integrate Reservoir into their projects."
        },
        {
          "fileName": "sales.md",
          "filePath": "docs/data-tables/community/reservoir/sales.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/sales.md",
          "summary": "# Sales\n\nThis section of the app technical guide covers the `reservoir.sales` table, which contains records with information about each sale. The table includes various columns such as `id`, `contract`, `token_id`, `order_id`, `order_kind`, `order_side`, `order_source`, `from`, `to`, `price`, `usd_price`, `currency_address`, `currency_symbol`, `currency_price`, `amount`, `fill_source`, `aggregator_source`, `wash_trading_score`, `is_primary`, `tx_hash`, `tx_log_index`, `tx_batch_index`, `tx_timestamp`, `created_at`, and `updated_at`.\n\nThe purpose of this guide is to provide an overview of the `reservoir.sales` table and its columns, as well as query examples that can be used to retrieve data from the table. The guide also includes a description of each column, its data type, and its purpose.\n\nFor example, the `id` column contains the internal sale id, while the `contract` column contains the contract address. The `price` column contains the sale price in the native currency, while the `usd_price` column contains the sale price in USD. The `amount` column contains the amount of tokens sold, while the `is_primary` column indicates whether the sale is a paid mint.\n\nThe guide also includes query examples that can be used to retrieve data from the `reservoir.sales` table. These examples demonstrate how to use the `SELECT` statement to retrieve specific columns from the table, as well as how to use the `WHERE` clause to filter the results based on specific criteria.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the `reservoir.sales` table and its columns, as well as query examples that can be used to retrieve data from the table.",
          "questions": "1. What is the purpose of the `reservoir.sales` table in the context of blockchain? \n- The `reservoir.sales` table contains records with information about each sale in the blockchain context.\n\n2. What is the significance of the `currency_address` and `currency_symbol` columns in the `reservoir.sales` table? \n- The `currency_address` and `currency_symbol` columns in the `reservoir.sales` table indicate the currency used for a particular sale in the blockchain context.\n\n3. How is the `wash_trading_score` column calculated in the `reservoir.sales` table? \n- The `wash_trading_score` column in the `reservoir.sales` table is calculated based on past sales and indicates the internal wash trading score in the blockchain context."
        },
        {
          "fileName": "token-attributes.md",
          "filePath": "docs/data-tables/community/reservoir/token-attributes.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/token-attributes.md",
          "summary": "# Explanation of the App Technical Guide for Dune Docs\n\nThe app technical guide for Dune Docs is a documentation resource that provides information on the different features and functionalities of the Dune Docs project. The guide is organized into different sections, each of which covers a specific aspect of the project. \n\nThe first section of the guide is focused on token attributes. The `reservoir.token_attributes` table contains records with information about each NFT token attribute. The table includes columns such as `id`, `contract`, `token_id`, `attribute_id`, `collection_id`, `key`, `value`, `created_at`, and `updated_at`. These columns provide information about the internal token attribute ID, contract address, token ID, attribute ID, collection ID, attribute name, attribute value, and timestamps for when the attribute was created and updated. \n\nThe guide also includes query examples for the `reservoir.token_attributes` table, which can be found at the provided URL. These examples demonstrate how to query the table to retrieve specific information about token attributes. \n\nOverall, the app technical guide for Dune Docs is a valuable resource for developers and users who want to learn more about the different features and functionalities of the project. The guide provides detailed information on each aspect of the project, including tables, queries, and other important components. By using this guide, developers and users can gain a better understanding of how the project works and how to use it effectively.",
          "questions": "1. What is the purpose of the `reservoir.token_attributes` table in the context of a blockchain application? \n- The `reservoir.token_attributes` table contains information about each NFT token attribute, which may be relevant for tracking ownership or other metadata associated with the tokens.\n\n2. How are the `contract` and `collection_id` fields used in this table? \n- The `contract` field contains the address of the contract associated with the token, while the `collection_id` field contains the internal ID of the collection to which the token belongs. These fields may be used to link token attributes to specific contracts or collections.\n\n3. Are there any limitations or constraints on the types of data that can be stored in the `value` field? \n- The app technical guide does not provide information on any limitations or constraints on the types of data that can be stored in the `value` field. A blockchain SQL analyst may need to consult additional documentation or perform testing to determine any such limitations."
        },
        {
          "fileName": "token-floor-ask-events.md",
          "filePath": "docs/data-tables/community/reservoir/token-floor-ask-events.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/token-floor-ask-events.md",
          "summary": "# Token Floor Ask Events\n\nThis section of the app technical guide covers the `reservoir.token_floor_ask_events` table, which contains records with information about each NFT token floor ask change. The table includes various columns such as `id`, `kind`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `nonce`, `valid_from`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`.\n\nThe `kind` column specifies the type of event, which can be one of the following: `new-order`, `expiry`, `sale`, `cancel`, `balance-change`, `approval-change`, `bootstrap`, `revalidation`, or `reprice`. The `contract` column specifies the address of the contract associated with the event, while the `token_id` column specifies the ID of the token in the collection. The `order_id` column specifies the associated ask ID, and the `maker` column specifies the wallet address of the ask maker.\n\nThe `price` column specifies the associated ask price in native currency, while the `previous_price` column specifies the previous ask price in native currency. The `nonce` column specifies the order nonce of the maker, and the `valid_from` and `valid_until` columns specify the validity start and expiration of the ask. The `source` column specifies the source of the order, such as `opensea.io`. The `tx_hash` column specifies the associated transaction hash, and the `tx_timestamp` column specifies the associated transaction timestamp. Finally, the `created_at` column specifies the timestamp the event was recorded.\n\nThis section also includes two query examples that can be found at the specified URLs. These queries can be used to retrieve information from the `reservoir.token_floor_ask_events` table.",
          "questions": "1. What is the purpose of this table in the context of the dune docs project?\n- As a technical guide documentation expert, it is not clear from this table alone what the overall purpose of the dune docs project is, so a blockchain SQL analyst might have this question.\n\n2. What is the meaning of the \"kind\" column and what are the possible values?\n- The \"kind\" column is described as an event type, but it is not clear what each possible value represents, so a blockchain SQL analyst might have this question.\n\n3. Are there any other tables or data sources that are related to this one and can be used to gain a more complete understanding of NFT token floor asks?\n- This table provides information about NFT token floor ask changes, but it is possible that there are other tables or data sources that are related to this one and can provide additional context or insights, so a blockchain SQL analyst might have this question."
        },
        {
          "fileName": "tokens.md",
          "filePath": "docs/data-tables/community/reservoir/tokens.md",
          "url": "https://dune.com/docs/data-tables/community/reservoir/tokens.md",
          "summary": "# App Technical Guide: Tokens\n\n## Reservoir.tokens\n\nThis section of the app technical guide covers the `reservoir.tokens` table, which contains records with information about each NFT token. The table includes various columns such as `id`, `contract`, `token_id`, `name`, `description`, `collection_id`, `owner`, `floor_ask_id`, `floor_ask_value`, `floor_ask_maker`, `floor_ask_valid_from`, `floor_ask_valid_to`, `floor_ask_source`, `last_sale_value`, `last_sale_timestamp`, `created_at`, and `updated_at`.\n\nThe `id` column represents the internal token ID, while the `contract` column contains the contract address. The `token_id` column represents the ID of the token in the collection, and the `name` and `description` columns contain the name and description of the NFT, respectively. The `collection_id` column represents the associated collection ID, and the `owner` column contains the wallet address of the owner.\n\nThe `floor_ask_id`, `floor_ask_value`, `floor_ask_maker`, `floor_ask_valid_from`, `floor_ask_valid_to`, and `floor_ask_source` columns represent the floor ask details, such as the ID, value, maker wallet address, listing start and end times, and source (e.g. opensea.io). The `last_sale_value` and `last_sale_timestamp` columns represent the associated transaction timestamp.\n\nFinally, the `created_at` and `updated_at` columns represent the timestamps when the token was created and updated, respectively.\n\nThis section also includes query examples that can be found at the specified URLs. These examples can be used to retrieve information from the `reservoir.tokens` table.\n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.tokens` table and its various columns, as well as query examples that can be used to retrieve information from the table.",
          "questions": "1. What is the purpose of the `reservoir.tokens` table in the context of blockchain? \n- The `reservoir.tokens` table contains records with information about each NFT token, which can be useful for tracking ownership and transaction history.\n\n2. Are there any limitations or restrictions on the types of queries that can be run on this table? \n- The app technical guide does not provide information on any limitations or restrictions on queries that can be run on this table. \n\n3. How frequently is the `reservoir.tokens` table updated with new token information? \n- The app technical guide does not provide information on the frequency of updates to the `reservoir.tokens` table."
        }
      ],
      "folders": [],
      "summary": "The `docs/data-tables/community/reservoir` folder contains a comprehensive app technical guide for the Reservoir project, which focuses on enabling the next generation of NFT products and liquidity sources through open-source, on-chain NFT order aggregation. The guide is organized into different sections, each covering a specific aspect of the project, such as token attributes, sales, collections, and various events related to bids and asks.\n\nFor example, the `asks.md` section provides an in-depth overview of the `reservoir.asks` table, which contains records with information about each listing. Developers can use this information to build applications that interact with the `reservoir.asks` table, such as a marketplace or trading platform. The guide also includes query examples that can be used to retrieve data from the table.\n\nAnother example is the `attributes.md` section, which covers the `reservoir.attributes` table containing records with information about each attribute. This section provides a detailed description of the columns in this table and includes query examples that can be used as a reference for querying the table in the app.\n\nThe `tokens.md` section covers the `reservoir.tokens` table, which contains records with information about each NFT token. This section provides a detailed overview of the table and its various columns, as well as query examples that can be used to retrieve information from the table.\n\nOverall, this app technical guide serves as a valuable resource for developers and users who want to learn more about the different features and functionalities of the Reservoir project. The guide provides detailed information on each aspect of the project, including tables, queries, and other important components. By using this guide, developers and users can gain a better understanding of how the project works and how to use it effectively.",
      "questions": ""
    }
  ],
  "summary": "The `docs/data-tables/community` folder contains a comprehensive app technical guide for the Community section of the Dune Docs project. This section focuses on providing additional data insights through partnerships with third-party data providers, such as Flashbots and Reservoir. The guide is organized into different sections, each covering a specific aspect of the project, such as availability, purpose, and data providers.\n\nFor example, the `index.md` file provides an overview of the Community section, its availability on the V2 Engine, and its purpose in providing off-chain data or augmented on-chain data. This guide helps users understand the importance of the Community section and how it can provide additional insights through partnerships with selected organizations.\n\nThe guide also covers two data providers currently featured in the Community section: Flashbots and Reservoir. Each provider has its own subfolder with more detailed information about the data they provide. For instance, the `flashbots` subfolder contains various files that cover different aspects of the Flashbots project, such as arbitrages, liquidations, mev_summary, sandwiched swaps, and sandwiches. These guides provide clear and concise explanations of the table structures, column descriptions, and query examples that can be used to retrieve information from the tables.\n\nSimilarly, the `reservoir` subfolder contains a comprehensive app technical guide for the Reservoir project, which focuses on enabling the next generation of NFT products and liquidity sources through open-source, on-chain NFT order aggregation. The guide is organized into different sections, each covering a specific aspect of the project, such as token attributes, sales, collections, and various events related to bids and asks.\n\nOverall, the Community section of the Dune Docs project serves as a valuable resource for developers and users who want to access additional data insights through partnerships with third-party data providers. The guides provided in this folder offer clear and concise explanations of the table structures, column descriptions, and query examples that can be used to retrieve information from the tables. By using this guide, developers and users can gain a better understanding of how the Community section works and how to use it effectively in their work.",
  "questions": ""
}