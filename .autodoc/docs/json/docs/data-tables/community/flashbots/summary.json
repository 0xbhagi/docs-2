{
  "folderName": "flashbots",
  "folderPath": ".autodoc/docs/json/docs/data-tables/community/flashbots",
  "url": "https://dune.com/.autodoc/docs/json/docs/data-tables/community/flashbots",
  "files": [
    {
      "fileName": "arbitrages.md",
      "filePath": "docs/data-tables/community/flashbots/arbitrages.md",
      "url": "https://dune.com/docs/data-tables/community/flashbots/arbitrages.md",
      "summary": "# Dune Docs App Technical Guide: Arbitrages\n\nThe `arbitrages` section of the Dune Docs project is focused on providing additional information about each arbitrage trade. The `flashbots.arbitrages` table contains records with details such as block number, account address, time of record creation, available amount before and after the arbitrage, profit amount, profit token address, protocols involved in the transaction, transaction hash, and timestamp of the latest update of the file.\n\nThe purpose of this technical guide is to provide a clear understanding of the `arbitrages` section of the Dune Docs project. The guide explains the structure of the `flashbots.arbitrages` table, including the column names, data types, and descriptions. It also provides query examples that can be used to retrieve information from the table.\n\nFor instance, the `Total Arb Protocols` query example provided in the guide can be used to retrieve the total number of arbitrage protocols involved in the transaction. This query can be accessed through the link provided in the guide.\n\nOverall, this technical guide serves as a reference for developers and users who want to understand the `arbitrages` section of the Dune Docs project. It provides a clear and concise explanation of the table structure and query examples that can be used to retrieve information from the table.",
      "questions": "1. What is the purpose of the `flashbots.arbitrages` table in the context of blockchain technology?\n- The `flashbots.arbitrages` table contains records with additional information about each arbitrage trade in the blockchain, which can be useful for analyzing trading patterns and identifying potential opportunities for profit.\n\n2. How can a blockchain SQL analyst use the query examples provided in the technical guide?\n- The query examples provided in the technical guide can be used by a blockchain SQL analyst to retrieve specific data from the `flashbots.arbitrages` table, such as information about the protocols involved in a transaction or the profit amount after an arbitrage.\n\n3. Are there any limitations or potential issues with using SQL to analyze blockchain data?\n- While SQL can be a powerful tool for analyzing blockchain data, there are some limitations and potential issues to be aware of, such as the need to handle large amounts of data and the possibility of inaccuracies due to the decentralized nature of the blockchain."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/data-tables/community/flashbots/index.md",
      "url": "https://dune.com/docs/data-tables/community/flashbots/index.md",
      "summary": "# Flashbots\n\nThis section of the app technical guide covers the Flashbots project, a research and development organization focused on ensuring that MEV (Miner Extractable Value) incentives do not become opaque and undemocratic. MEV refers to the profit that miners can extract from reordering, censoring, or including transactions in a block. \n\nThe guide notes that Flashbots' open source engine for generating MEV data, mev-inspect-py, powers dashboards such as mev-explore and Dune's Flashbots integration. The section encourages researchers and developers to report any bugs or implement new features to improve the engine. \n\nThe guide provides links to the Flashbots documentation and Discord server for more information and updates on their data and mev-inspect. \n\nExample: If a developer is working on integrating Flashbots into their project, they can refer to the documentation and join the Discord server to stay up-to-date on any changes or improvements to the engine. They can also report any bugs they encounter to help improve the engine for the community.",
      "questions": "1. What is the purpose of Flashbots and how does it relate to MEV incentives?\n- Flashbots is a research and development organization that aims to prevent MEV incentives from becoming opaque and undemocratic. MEV-inspect-py, their open source engine for generating MEV data, powers dashboards such as mev-explore and Dune's Flashbots integration.\n\n2. How can blockchain SQL analysts contribute to improving Flashbots' open source engine?\n- Flashbots encourages researchers and developers to report and help correct any found bugs, or implement any new features. They can consult the documentation and join the Flashbots discord for more information and updates on their data and mev-inspect.\n\n3. What resources are available for developers and researchers interested in using Flashbots?\n- Flashbots provides documentation on their website and a Discord server for more information and updates on their data and mev-inspect. They also encourage community contributions to improve their open source engine."
    },
    {
      "fileName": "liquidations.md",
      "filePath": "docs/data-tables/community/flashbots/liquidations.md",
      "url": "https://dune.com/docs/data-tables/community/flashbots/liquidations.md",
      "summary": "# Liquidations\n\nThe `liquidations` section of the Dune Docs project focuses on providing details related to executed liquidations. The `flashbots.liquidations` table contains information about liquidations executed using the MEV strategy. The table includes details such as the time of record creation, transaction hash, trace pattern related to the position of the transaction in the chain of all transactions related to the MEV trade, underlying token address of the debt to pay, amount received from the liquidation, protocol name, address of the liquidated user, address of the liquidator user, address of the received asset, block number, amount of purchased debt, and timestamp of the latest update of the file.\n\nThe purpose of this guide is to provide a detailed explanation of the `flashbots.liquidations` table and its columns. The guide also includes a link to query examples for liquidations by protocol. This information is useful for developers who want to understand how liquidations work and how to access the data related to executed liquidations.\n\nAn example of a query that can be run using the `flashbots.liquidations` table is the `Liquidations by Protocol` query, which can be found at [https://dune.com/queries/625715/1166880](https://dune.com/queries/625715/1166880). This query provides information about liquidations executed by protocol, including the protocol name, number of liquidations, total received amount, and average received amount.\n\nOverall, the `liquidations` section of the Dune Docs project provides valuable information for developers who want to understand how liquidations work and how to access the data related to executed liquidations using the MEV strategy.",
      "questions": "1. What is the purpose of the `flashbots.liquidations` table in the context of blockchain and how is it related to MEV (Miner Extractable Value)? \n- The `flashbots.liquidations` table contains details related to executed liquidations, which is another MEV strategy. It is related to MEV because it involves extracting value from transactions before they are included in a block.\n\n2. Can you provide more information on the `trace_address` column and how it relates to the position of the transaction in the chain of all transactions related to the MEV trade? \n- The `trace_address` column contains a trace pattern related to the position of the transaction in the chain of all transactions related to the MEV trade. This can be useful for analyzing the flow of transactions and identifying potential bottlenecks or inefficiencies.\n\n3. Are there any limitations or considerations to keep in mind when using the `debt_purchase_amount` column for analysis? \n- It may be important to consider the specific context and protocol being used when analyzing the `debt_purchase_amount` column, as the amount of purchased debt may vary depending on the protocol and other factors. Additionally, it may be useful to compare this column to other relevant metrics to gain a more complete understanding of the data."
    },
    {
      "fileName": "mev_summary.md",
      "filePath": "docs/data-tables/community/flashbots/mev_summary.md",
      "url": "https://dune.com/docs/data-tables/community/flashbots/mev_summary.md",
      "summary": "# mev_summary\n\nThe `mev_summary` section of the Dune Docs project is focused on providing a summary of all the classified transactions. The `flashbots.mev_summary` table contains information on the various transactions that have taken place, including the block timestamp, block number, base fee per gas, direct transfer to miner's address, error (if any), gas price, amount of gas spent, amount of gas used, total profit from the transaction in USD, address of the miner, payment received by the miner in USD, main interacted protocol, list of protocols involved in the transaction, hash of the transaction, type of the MEV (e.g. arbitrage), and timestamp of the latest update of the file.\n\nThis section of the app technical guide provides a detailed description of the various columns in the `flashbots.mev_summary` table, including their data type and description. For example, the `block_timestamp` column contains a timestamp of the block, while the `gas_price` column contains the price of the gas. The guide also provides a query example that can be used to retrieve information from the `flashbots.mev_summary` table.\n\nOverall, the `mev_summary` section of the Dune Docs project is an important resource for anyone looking to understand the various transactions that have taken place on the platform. By providing detailed information on each transaction, including the type of MEV and the protocols involved, this section of the app technical guide helps users gain a better understanding of how the platform works and how they can use it to their advantage.",
      "questions": "1. What is the purpose of the `mev_summary` table in the context of blockchain and SQL analysis?\n- The `mev_summary` table contains a summary of all classified transactions, which could be useful for analyzing miner revenue and profit in the context of MEV (miner-extractable value) strategies.\n\n2. Are there any limitations or potential issues with using this table for blockchain and SQL analysis?\n- The technical guide does not provide information on any limitations or potential issues with using this table, so a blockchain SQL analyst may need to investigate further to ensure the data is accurate and complete.\n\n3. Are there any additional resources or documentation available for using the `mev_summary` table in Dune Docs?\n- The technical guide provides a link to query examples, but it is unclear if there are any additional resources or documentation available for using this table in Dune Docs. A blockchain SQL analyst may need to reach out to the Dune Docs team or community for more information."
    },
    {
      "fileName": "sandwiched-swaps.md",
      "filePath": "docs/data-tables/community/flashbots/sandwiched-swaps.md",
      "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiched-swaps.md",
      "summary": "# Sandwiched Swaps\n\nThe Sandwiched Swaps section of the Dune Docs project focuses on the `flashbots.sandwiched_swaps` table, which contains additional data about one or more swaps that were sandwiched with a corresponding sandwich in the database. This section provides a detailed explanation of the columns in the table and their respective data types.\n\nThe `created_at` column contains the time of the record's creation, while the `block_number` column contains the block number of the transaction. The `sandwich_id` column contains the internal ID of the sandwiched swap, and the `trace_address` column contains the trace pattern related to the position of the swap in the chain of all swaps related to the arbitrage trade. Finally, the `transaction_hash` column contains the transaction hash, and the `timestamp` column contains the timestamp of the latest update of the file.\n\nThis section also provides query examples for the `flashbots.sandwiched_swaps` table, which can be used as a reference for developers working on the Dune Docs project. The query examples include the column name, data type, and description of each column in the table.\n\nOverall, the Sandwiched Swaps section of the Dune Docs project provides a comprehensive guide to the `flashbots.sandwiched_swaps` table, including its purpose, columns, and query examples. This information is essential for developers working on the Dune Docs project to understand the structure and functionality of the table and to use it effectively in their work.",
      "questions": "1. What is the purpose of the sandwiched_swaps table in the context of blockchain and SQL analysis?\n- A blockchain SQL analyst might want to know how the sandwiched_swaps table fits into the overall data schema and how it can be used to analyze arbitrage trades involving swaps.\n\n2. Are there any limitations or constraints on the data that can be queried from the sandwiched_swaps table?\n- A blockchain SQL analyst might want to know if there are any restrictions on the types of queries that can be run on the sandwiched_swaps table, such as limitations on the time range or block numbers that can be queried.\n\n3. How frequently is the sandwiched_swaps table updated and what triggers these updates?\n- A blockchain SQL analyst might want to know how often the sandwiched_swaps table is updated and what events trigger these updates, such as new blocks being added to the blockchain or new transactions being processed."
    },
    {
      "fileName": "sandwiches.md",
      "filePath": "docs/data-tables/community/flashbots/sandwiches.md",
      "url": "https://dune.com/docs/data-tables/community/flashbots/sandwiches.md",
      "summary": "# Sandwiches Table\n\nThe `sandwiches` table is a part of the Dune Docs project and contains detailed information about executed sandwiches. The table consists of the following columns:\n\n- `created_at`: This column contains the time of the record's creation.\n- `block_number`: This column contains the block number.\n- `backrun_swap_trace_address`: This column contains the address of the swap in the backrun transaction.\n- `backrun_swap_transaction_hash`: This column contains the transaction hash of the backrun transaction of the specified sandwich.\n- `frontrun_swap_trace_address`: This column contains the address of the swap in the frontrun transaction.\n- `frontrun_swap_transaction_hash`: This column contains the transaction hash of the frontrun transaction of the specified sandwich.\n- `id`: This column contains the internal id of the sandwich.\n- `profit_amount`: This column contains the profit amount after the arbitrage.\n- `profit_token_address`: This column contains the address of the profit asset.\n- `sandwicher_address`: This column contains the address of the sandwicher.\n- `timestamp`: This column contains the timestamp of the latest update of the file.\n\nThe `sandwiches` table is used to keep track of executed sandwiches and their details. For example, it can be used to analyze the performance of the sandwicher and the profitability of the arbitrage. \n\nHere is an example of how the `sandwiches` table can be queried:\n\n```\nSELECT *\nFROM sandwiches\nWHERE sandwicher_address = '0x1234567890abcdef'\n```\n\nThis query will return all the sandwiches executed by the sandwicher with the address `0x1234567890abcdef`.",
      "questions": "1. What is the purpose of the \"sandwiches\" table in the Dune Docs app?\n- The \"sandwiches\" table contains detailed information about executed sandwiches, including the time of record creation, block number, swap addresses and transaction hashes, profit amount and token address, sandwicher address, and timestamp of the latest update of the file.\n\n2. How is the data in the \"sandwiches\" table stored and accessed?\n- The data in the \"sandwiches\" table is stored in columns with corresponding data types and descriptions, and can be accessed through SQL queries.\n\n3. Are there any limitations or potential issues with using SQL to analyze the data in the \"sandwiches\" table?\n- It is unclear from the provided technical guide whether there are any limitations or potential issues with using SQL to analyze the data in the \"sandwiches\" table. A blockchain SQL analyst may need to consult additional documentation or perform further testing to determine any such limitations or issues."
    }
  ],
  "folders": [],
  "summary": "The Flashbots folder in the Dune Docs project focuses on providing comprehensive information and guides related to the Flashbots project, which is a research and development organization aimed at ensuring that MEV (Miner Extractable Value) incentives remain transparent and democratic. This folder contains various files that cover different aspects of the Flashbots project, such as arbitrages, liquidations, mev_summary, sandwiched swaps, and sandwiches.\n\nFor instance, the `arbitrages.md` file provides a detailed explanation of the `flashbots.arbitrages` table, which contains records with information about each arbitrage trade. Developers can use this guide to understand the table structure and retrieve information using query examples provided in the guide, such as the `Total Arb Protocols` query.\n\nThe `liquidations.md` file focuses on the `flashbots.liquidations` table, which contains information about liquidations executed using the MEV strategy. Developers can use this guide to understand the table structure and access data related to executed liquidations using query examples provided in the guide, such as the `Liquidations by Protocol` query.\n\nThe `mev_summary.md` file covers the `flashbots.mev_summary` table, which provides a summary of all classified transactions. This guide helps users understand the various transactions that have taken place on the platform, including the type of MEV and the protocols involved. The guide also provides a query example that can be used to retrieve information from the `flashbots.mev_summary` table.\n\nThe `sandwiched-swaps.md` file focuses on the `flashbots.sandwiched_swaps` table, which contains additional data about one or more swaps that were sandwiched with a corresponding sandwich in the database. This guide provides a detailed explanation of the columns in the table and their respective data types, as well as query examples for developers working on the Dune Docs project.\n\nLastly, the `sandwiches.md` file provides a comprehensive guide to the `flashbots.sandwiches` table, which contains detailed information about executed sandwiches. This guide is essential for developers working on the Dune Docs project to understand the structure and functionality of the table and to use it effectively in their work.\n\nOverall, the Flashbots folder in the Dune Docs project serves as a valuable resource for developers and users who want to understand the Flashbots project and its various aspects. The guides provided in this folder offer clear and concise explanations of the table structures, column descriptions, and query examples that can be used to retrieve information from the tables.",
  "questions": ""
}