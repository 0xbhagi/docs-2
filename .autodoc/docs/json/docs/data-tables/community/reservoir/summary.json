{
  "folderName": "reservoir",
  "folderPath": ".autodoc/docs/json/docs/data-tables/community/reservoir",
  "url": "https://dune.com/.autodoc/docs/json/docs/data-tables/community/reservoir",
  "files": [
    {
      "fileName": "ask-events.md",
      "filePath": "docs/data-tables/community/reservoir/ask-events.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/ask-events.md",
      "summary": "# Ask Events\n\nThis section of the app technical guide covers the `reservoir.ask_events` table, which contains records with information about each ask change. The table includes various columns such as `id`, `kind`, `contract`, `token_id`, `order_id`, `maker`, `price`, `quantity_remaining`, `valid_from`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`. \n\nThe `id` column represents the internal event ID, while the `kind` column represents the type of event (e.g. new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice). The `contract` column contains the contract address, and the `token_id` column contains the ID of the token in the collection. The `order_id` column represents the associated ask ID, and the `maker` column contains the associated ask maker wallet address. The `price` column represents the associated ask price in native currency, and the `quantity_remaining` column represents the associated ask tokens remaining. The `valid_from` and `valid_until` columns represent the associated ask validity start and expiration, respectively. The `source` column contains the source of the order (e.g. opensea.io), while the `tx_hash` and `tx_timestamp` columns represent the associated transaction hash and timestamp, respectively. Finally, the `created_at` column represents the timestamp the event was recorded.\n\nThis section also includes query examples that can be found at the specified URLs. These queries can be used to retrieve information from the `reservoir.ask_events` table. \n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.ask_events` table and its various columns. It also includes query examples that can be used to retrieve information from the table.",
      "questions": "1. What is the purpose of the `reservoir.ask_events` table in the Dune Docs app?\n- The `reservoir.ask_events` table contains records with information about each ask change in the app.\n\n2. What are some examples of query options available for the `reservoir.ask_events` table?\n- Query examples for the `reservoir.ask_events` table can be found at the following links: [https://dune.com/queries/1302858/2232178](https://dune.com/queries/1302858/2232178) and [https://dune.com/queries/1302863/2232189](https://dune.com/queries/1302863/2232189).\n\n3. What types of events are included in the `kind` column of the `reservoir.ask_events` table?\n- The `kind` column in the `reservoir.ask_events` table includes various event types such as new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, and reprice."
    },
    {
      "fileName": "asks.md",
      "filePath": "docs/data-tables/community/reservoir/asks.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/asks.md",
      "summary": "## Reservoir.asks\n\nThis section of the app technical guide covers the `reservoir.asks` table, which contains records with information about each listing. The table includes various columns such as `id`, `kind`, `status`, `contract`, `token_id`, `maker`, `taker`, `price`, `start_price`, `end_price`, `currency_address`, `currency_symbol`, `currency_price`, `dynamic`, `quantity`, `quantity_filled`, `quantity_remaining`, `valid_from`, `valid_until`, `nonce`, `source`, `fee_bps`, `expiration`, `raw_data`, `created_at`, and `updated_at`. Each column is described in detail, including its data type and a brief explanation of its purpose.\n\nThe purpose of this guide is to provide developers with a clear understanding of the `reservoir.asks` table and its columns, as well as how to query the table. The guide includes two query examples that can be found at the provided links. Developers can use this information to build applications that interact with the `reservoir.asks` table, such as a marketplace or trading platform.\n\nFor example, a developer building a trading platform could use the `price` column to display the current price of a listing, the `quantity` column to show the amount of tokens available for purchase, and the `valid_from` and `valid_until` columns to display the start and end times of the listing. The `maker` and `taker` columns could be used to identify the parties involved in the transaction, and the `fee_bps` column could be used to calculate the listing fee.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the `reservoir.asks` table and its columns, as well as practical examples of how to use the information to build applications that interact with the table.",
      "questions": "1. What is the purpose of the `reservoir.asks` table in the Dune Docs app?\n- The `reservoir.asks` table contains records with information about each listing in the app.\n\n2. What kind of data is stored in the `price` column of the `reservoir.asks` table?\n- The `price` column stores the current price of the listing in native currency.\n\n3. Is there any information in the `reservoir.asks` table about the transaction history of a listing?\n- No, there is no information in the `reservoir.asks` table about the transaction history of a listing."
    },
    {
      "fileName": "attribute-keys.md",
      "filePath": "docs/data-tables/community/reservoir/attribute-keys.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/attribute-keys.md",
      "summary": "## Attribute Keys\n\nThe `attribute_keys` section of the app technical guide provides information about the `reservoir.attribute_keys` table. This table contains records with information about each attribute key. The table has seven columns: `id`, `collection_id`, `key`, `kind`, `rank`, `created_at`, and `updated_at`. \n\n- `id`: This is the internal attribute key id.\n- `collection_id`: This is the associated collection id.\n- `key`: This is the name of the attribute.\n- `kind`: This is the value type, which can be string, number, date, or range.\n- `rank`: This is the sort order.\n- `created_at`: This is the timestamp the attribute key was created.\n- `updated_at`: This is the timestamp the attribute key was updated.\n\nThe guide also provides a link to query examples for the `reservoir.attribute_keys` table. The link leads to a page on the Dune website that provides examples of queries that can be run on the table. \n\nOverall, this section of the guide is useful for developers who need to work with the `reservoir.attribute_keys` table in the Dune app. It provides a clear understanding of the table's structure and contents, as well as examples of how to query the table.",
      "questions": "1. What is the purpose of the `reservoir.attribute_keys` table in the context of the dune docs app? \n   - The `reservoir.attribute_keys` table contains information about each attribute key in the app, including its name, type, and associated collection.\n2. How are attribute keys sorted in the `reservoir.attribute_keys` table? \n   - Attribute keys are sorted by their `rank` column in the `reservoir.attribute_keys` table.\n3. Are there any examples of queries that can be run using the `reservoir.attribute_keys` table? \n   - Yes, query examples can be found at the URL provided in the app technical guide: [https://dune.com/queries/1302930/2232305](https://dune.com/queries/1302930/2232305)."
    },
    {
      "fileName": "attributes.md",
      "filePath": "docs/data-tables/community/reservoir/attributes.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/attributes.md",
      "summary": "# Attributes\n\nThe `reservoir.attributes` table contains records with information about each attribute. This section of the app technical guide provides a detailed description of the columns in this table, including their data types and descriptions. \n\nThe `id` column is an internal attribute ID, while the `attribute_key_id` column is an internal attribute key ID. The `value` column contains the attribute value, and the `token_count` column indicates the number of tokens that have the attribute. The `on_sale_count` column indicates the number of tokens that have the attribute and are currently on sale. \n\nThe `floor_sell_value` column contains the current floor ask price, while the `sell_updated_at` column indicates the timestamp of the last update to the floor sale. The `collection_id` column contains the associated collection ID, and the `kind` column indicates the value type (string, number, date, range). The `key` column contains the associated key name. \n\nFinally, the `created_at` and `updated_at` columns indicate the timestamps of when the attribute was created and last updated, respectively. \n\nThis section also provides two query examples for the `reservoir.attributes` table, which can be found at the provided links. These examples can be used as a reference for querying the table in the app.",
      "questions": "1. What is the purpose of the `reservoir.attributes` table in the context of the Dune Docs project? \n   - The `reservoir.attributes` table contains records with information about each attribute in the Dune Docs project.\n2. How is the `token_count` column calculated and what does it represent? \n   - The `token_count` column represents the amount of tokens that have the attribute, but it is unclear how it is calculated based on the information provided in the technical guide.\n3. Are there any limitations or constraints on the data types that can be stored in the `value` column? \n   - The technical guide does not provide information on any limitations or constraints on the data types that can be stored in the `value` column."
    },
    {
      "fileName": "bid-events.md",
      "filePath": "docs/data-tables/community/reservoir/bid-events.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/bid-events.md",
      "summary": "# Bid Events\n\nThe `bid_events` table is a part of the Dune Docs project and contains records with information about each bid change. This table is located in the `data-tables` folder of the project.\n\nThe table has several columns that provide information about the bid event, including the event ID, event type, event status, contract address, token set ID, associated bid ID, bid maker wallet address, bid price, bid value, bid tokens remaining, bid validity start and expiration, source of the order, associated transaction hash, and timestamp the event was recorded.\n\nThe purpose of this table is to provide a record of all bid changes that occur within the system. This information can be used to track the progress of bids, monitor the performance of the system, and identify any issues that may arise.\n\nQuery examples for this table are not yet available, but they will be added to the project in the future.\n\nOverall, the `bid_events` table is an important component of the Dune Docs project, providing valuable information about the bidding process within the system.",
      "questions": "1. What is the purpose of the `reservoir.bid_events` table in the context of the Dune Docs project?\n- The `reservoir.bid_events` table contains records with information about each bid change in the project.\n\n2. What are the different types of events that can be found in the `kind` column of the `reservoir.bid_events` table?\n- The different types of events that can be found in the `kind` column of the `reservoir.bid_events` table include new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, and reprice.\n\n3. How is the value of a bid represented in the `reservoir.bid_events` table?\n- The value of a bid is represented in the `reservoir.bid_events` table as the associated bid value in native currency."
    },
    {
      "fileName": "bids.md",
      "filePath": "docs/data-tables/community/reservoir/bids.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/bids.md",
      "summary": "# Bids\n\n## Reservoir.bids\n\nThis section of the app technical guide covers the `reservoir.bids` table, which contains records with information about each bid. The table includes various columns such as `id`, `kind`, `status`, `contract`, `token_set_id`, `maker`, `taker`, `price`, `value`, `currency_address`, `currency_symbol`, `currency_price`, `quantity`, `quantity_filled`, `quantity_remaining`, `valid_from`, `valid_until`, `nonce`, `source`, `fee_bps`, `expiration`, `raw_data`, `created_at`, and `updated_at`.\n\nThe `id` column represents the internal order id, while the `kind` column represents the protocol name (e.g. seaport). The `status` column represents the order status (active, inactive), and the `contract` column represents the contract address. The `token_set_id` column represents the id of the token set, while the `maker` and `taker` columns represent the maker and taker wallet addresses, respectively.\n\nThe `price` column represents the current price in native currency, while the `value` column represents the current value in native currency. The `currency_address` column represents the currency address, and the `currency_symbol` column represents the currency symbol. The `currency_price` column represents the currency price.\n\nThe `quantity` column represents the amount of tokens that is listed, while the `quantity_filled` column represents the amount of tokens that was filled. The `quantity_remaining` column represents the amount of tokens remaining, and the `valid_from` and `valid_until` columns represent the listing start and end times, respectively.\n\nThe `nonce` column represents the order nonce of the maker, while the `source` column represents the source of the listing (e.g. opensea.io). The `fee_bps` column represents the listing fee, and the `expiration` column represents the associated transaction hash. The `raw_data` column represents the raw order data (format will vary per source).\n\nFinally, the `created_at` and `updated_at` columns represent the timestamps the listing was created and updated, respectively.\n\nQuery examples for this table can be found at the link provided in the guide.",
      "questions": "1. What is the purpose of the dune docs project and how does this table fit into it?\n- This app technical guide only provides information about the `reservoir.bids` table and does not give context about the overall purpose of the dune docs project.\n\n2. How is the data in this table being collected and updated?\n- The app technical guide does not provide information about the data collection and update process for this table.\n\n3. Are there any constraints or limitations on the data types or values that can be stored in this table?\n- The app technical guide does not mention any constraints or limitations on the data types or values that can be stored in this table."
    },
    {
      "fileName": "collection-floor-ask-events.md",
      "filePath": "docs/data-tables/community/reservoir/collection-floor-ask-events.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/collection-floor-ask-events.md",
      "summary": "# Collection Floor Ask Events\n\nThis section of the app technical guide covers the `reservoir.collection_floor_ask_events` table, which contains records with information about each collection floor ask change. The table includes columns such as `id`, `kind`, `collection_id`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`.\n\nThe `id` column is an internal event ID, while the `kind` column specifies the type of event (e.g. new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice). The `collection_id` column contains the ID of the collection, and the `contract` column contains the contract address. The `token_id` column specifies the ID of the token in the collection, and the `order_id` column contains the associated ask ID. The `maker` column contains the wallet address of the associated ask maker, and the `price` column contains the associated ask price in native currency. The `previous_price` column contains the previous floor ask price in native currency, and the `valid_until` column specifies the expiration of the associated ask. The `source` column contains the source of the order (e.g. opensea.io), while the `tx_hash` column contains the associated transaction hash. The `tx_timestamp` column specifies the timestamp of the associated transaction, and the `created_at` column contains the timestamp the event was recorded.\n\nThis section also includes query examples for the `reservoir.collection_floor_ask_events` table, which can be found at the following links:\n\n- [https://dune.com/queries/1302799/2232083](https://dune.com/queries/1302799/2232083)\n- [https://dune.com/queries/1302841/2232151](https://dune.com/queries/1302841/2232151)\n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.collection_floor_ask_events` table and its columns, as well as query examples for working with the table.",
      "questions": "1. What is the purpose of the `reservoir.collection_floor_ask_events` table in the context of the Dune Docs project? \n   - The `reservoir.collection_floor_ask_events` table contains records with information about each collection floor ask change.\n2. What kind of events are included in the `kind` column of the table? \n   - The `kind` column includes event types such as new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, and reprice.\n3. Are there any limitations or restrictions on the data that can be queried from this table? \n   - The app technical guide does not provide information on any limitations or restrictions on the data that can be queried from this table."
    },
    {
      "fileName": "collection-top-bid-events.md",
      "filePath": "docs/data-tables/community/reservoir/collection-top-bid-events.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/collection-top-bid-events.md",
      "summary": "# Collection Top Bid Events\n\nThe `collection_top_bid_events` table is a part of the Dune Docs project and contains records with information about each collection top bid change. This table is located in the `data-tables` folder of the project.\n\nThe table has several columns, including `id`, `kind`, `collection_id`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`. Each column has a specific data type and description.\n\nThe `id` column is an internal event ID, while the `kind` column specifies the type of event, such as `new-order`, `expiry`, `sale`, `cancel`, `balance-change`, `approval-change`, `bootstrap`, `revalidation`, or `reprice`. The `collection_id` column contains the ID of the collection, and the `contract` column contains the contract address. The `token_id` column contains the ID of the token in the collection, and the `order_id` column contains the associated bid ID. The `maker` column contains the associated bid maker wallet address, and the `price` column contains the associated bid price in native currency.\n\nThe `previous_price` column contains the previous top bid price in native currency, and the `valid_until` column contains the associated bid validity expiration. The `source` column specifies the source of the order, such as `opensea.io`, and the `tx_hash` column contains the associated transaction hash. The `tx_timestamp` column contains the associated transaction timestamp, and the `created_at` column contains the timestamp the event was recorded.\n\nThe `collection_top_bid_events` table can be queried using SQL. Query examples can be found in the project, but the link is currently TBD. This table is useful for tracking changes in top bids for collections and analyzing bidding behavior.",
      "questions": "1. What is the purpose of the `reservoir.collection_top_bid_events` table in the context of the dune docs project?\n- The `reservoir.collection_top_bid_events` table contains records with information about each collection top bid change in the dune docs project.\n\n2. What are the different event types that can be found in the `kind` column of the `reservoir.collection_top_bid_events` table?\n- The `kind` column in the `reservoir.collection_top_bid_events` table contains different event types such as new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, and reprice.\n\n3. How are the bid prices represented in the `price` and `previous_price` columns of the `reservoir.collection_top_bid_events` table?\n- The `price` and `previous_price` columns in the `reservoir.collection_top_bid_events` table represent the associated bid price and previous top bid price in native currency, respectively."
    },
    {
      "fileName": "collections.md",
      "filePath": "docs/data-tables/community/reservoir/collections.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/collections.md",
      "summary": "# Collections\n\nThis section of the app technical guide focuses on the `reservoir.collections` table, which contains records with information about each NFT collection. The table includes various columns such as `id`, `slug`, `name`, `description`, `token_count`, `contract`, `day1_rank`, `day7_rank`, `day30_rank`, `all_time_rank`, `day1_volume`, `day7_volume`, `day30_volume`, `all_time_volume`, `day1_volume_change`, `day7_volume_change`, `day30_volume_change`, `floor_ask_value`, `day1_floor_sale_value`, `day7_floor_sale_value`, `day30_floor_sale_value`, `day1_floor_sale_change`, `day7_floor_sale_change`, `day30_floor_sale_change`, `created_at`, and `updated_at`.\n\nThe purpose of this guide is to provide developers with information on how to query the `reservoir.collections` table and understand the meaning of each column. The guide includes two query examples that can be found at the provided links. \n\nDevelopers can use this information to build features that utilize NFT collections, such as displaying information about a specific collection or analyzing trends in NFT trading volume and floor sale prices. For example, a developer could use the `day1_volume` column to display the trading volume of a specific collection over the past day, or use the `floor_ask_value` column to display the current floor sale price of a collection in its native currency.\n\nOverall, this section of the app technical guide provides valuable information for developers looking to work with NFT collections in the Dune Docs project.",
      "questions": "1. What is the purpose of the `reservoir.collections` table in the Dune Docs app?\n- The `reservoir.collections` table contains records with information about each NFT collection.\n\n2. What type of data is stored in the `day1_rank`, `day7_rank`, `day30_rank`, and `all_time_rank` columns?\n- The `day1_rank`, `day7_rank`, `day30_rank`, and `all_time_rank` columns store ranking information for the NFT collections.\n\n3. What is the format of the query examples provided in the app technical guide?\n- The query examples provided in the app technical guide are in the form of links to Dune.com queries."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/data-tables/community/reservoir/index.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/index.md",
      "summary": "# Reservoir\n\nThe Reservoir section of the Dune Docs project focuses on enabling the next generation of NFT products and liquidity sources through open-source, on-chain NFT order aggregation. This header provides links to the Reservoir dashboard, documentation, and Discord channel for further information and support.\n\n## Dashboard\n\nThe Reservoir dashboard link provided in this section directs users to the Reservoir0x dashboard on Dune.com. This dashboard provides a visual representation of Reservoir's on-chain NFT order aggregation, allowing users to view and analyze data related to NFT trades and liquidity sources.\n\n## Docs\n\nThe Reservoir documentation link provided in this section directs users to the Reservoir.tools documentation page. This page provides detailed information on how to use Reservoir's open-source, on-chain NFT order aggregation platform. The documentation covers topics such as installation, configuration, and usage of the Reservoir platform.\n\n## Discord\n\nThe Reservoir Discord link provided in this section directs users to the Reservoir Discord channel. This channel provides a community forum for Reservoir users to ask questions, share information, and collaborate on the development of the Reservoir platform.\n\nOverall, the Reservoir section of the Dune Docs project provides users with the resources they need to understand and utilize Reservoir's on-chain NFT order aggregation platform. The dashboard, documentation, and Discord channel all work together to provide a comprehensive support system for Reservoir users.",
      "questions": "1. What is the purpose of Reservoir in the blockchain ecosystem?\n- Reservoir is enabling the next generation of NFT products and liquidity sources through open-source, on-chain NFT order aggregation.\n\n2. What kind of data can be accessed through the Reservoir dashboard?\n- The Reservoir dashboard provides access to data related to the Reservoir project, such as order aggregation.\n\n3. Are there any additional resources available for developers looking to integrate Reservoir into their projects?\n- Yes, the Reservoir documentation provides additional resources for developers looking to integrate Reservoir into their projects."
    },
    {
      "fileName": "sales.md",
      "filePath": "docs/data-tables/community/reservoir/sales.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/sales.md",
      "summary": "# Sales\n\nThis section of the app technical guide covers the `reservoir.sales` table, which contains records with information about each sale. The table includes various columns such as `id`, `contract`, `token_id`, `order_id`, `order_kind`, `order_side`, `order_source`, `from`, `to`, `price`, `usd_price`, `currency_address`, `currency_symbol`, `currency_price`, `amount`, `fill_source`, `aggregator_source`, `wash_trading_score`, `is_primary`, `tx_hash`, `tx_log_index`, `tx_batch_index`, `tx_timestamp`, `created_at`, and `updated_at`.\n\nThe purpose of this guide is to provide an overview of the `reservoir.sales` table and its columns, as well as query examples that can be used to retrieve data from the table. The guide also includes a description of each column, its data type, and its purpose.\n\nFor example, the `id` column contains the internal sale id, while the `contract` column contains the contract address. The `price` column contains the sale price in the native currency, while the `usd_price` column contains the sale price in USD. The `amount` column contains the amount of tokens sold, while the `is_primary` column indicates whether the sale is a paid mint.\n\nThe guide also includes query examples that can be used to retrieve data from the `reservoir.sales` table. These examples demonstrate how to use the `SELECT` statement to retrieve specific columns from the table, as well as how to use the `WHERE` clause to filter the results based on specific criteria.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the `reservoir.sales` table and its columns, as well as query examples that can be used to retrieve data from the table.",
      "questions": "1. What is the purpose of the `reservoir.sales` table in the context of blockchain? \n- The `reservoir.sales` table contains records with information about each sale in the blockchain context.\n\n2. What is the significance of the `currency_address` and `currency_symbol` columns in the `reservoir.sales` table? \n- The `currency_address` and `currency_symbol` columns in the `reservoir.sales` table indicate the currency used for a particular sale in the blockchain context.\n\n3. How is the `wash_trading_score` column calculated in the `reservoir.sales` table? \n- The `wash_trading_score` column in the `reservoir.sales` table is calculated based on past sales and indicates the internal wash trading score in the blockchain context."
    },
    {
      "fileName": "token-attributes.md",
      "filePath": "docs/data-tables/community/reservoir/token-attributes.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/token-attributes.md",
      "summary": "# Explanation of the App Technical Guide for Dune Docs\n\nThe app technical guide for Dune Docs is a documentation resource that provides information on the different features and functionalities of the Dune Docs project. The guide is organized into different sections, each of which covers a specific aspect of the project. \n\nThe first section of the guide is focused on token attributes. The `reservoir.token_attributes` table contains records with information about each NFT token attribute. The table includes columns such as `id`, `contract`, `token_id`, `attribute_id`, `collection_id`, `key`, `value`, `created_at`, and `updated_at`. These columns provide information about the internal token attribute ID, contract address, token ID, attribute ID, collection ID, attribute name, attribute value, and timestamps for when the attribute was created and updated. \n\nThe guide also includes query examples for the `reservoir.token_attributes` table, which can be found at the provided URL. These examples demonstrate how to query the table to retrieve specific information about token attributes. \n\nOverall, the app technical guide for Dune Docs is a valuable resource for developers and users who want to learn more about the different features and functionalities of the project. The guide provides detailed information on each aspect of the project, including tables, queries, and other important components. By using this guide, developers and users can gain a better understanding of how the project works and how to use it effectively.",
      "questions": "1. What is the purpose of the `reservoir.token_attributes` table in the context of a blockchain application? \n- The `reservoir.token_attributes` table contains information about each NFT token attribute, which may be relevant for tracking ownership or other metadata associated with the tokens.\n\n2. How are the `contract` and `collection_id` fields used in this table? \n- The `contract` field contains the address of the contract associated with the token, while the `collection_id` field contains the internal ID of the collection to which the token belongs. These fields may be used to link token attributes to specific contracts or collections.\n\n3. Are there any limitations or constraints on the types of data that can be stored in the `value` field? \n- The app technical guide does not provide information on any limitations or constraints on the types of data that can be stored in the `value` field. A blockchain SQL analyst may need to consult additional documentation or perform testing to determine any such limitations."
    },
    {
      "fileName": "token-floor-ask-events.md",
      "filePath": "docs/data-tables/community/reservoir/token-floor-ask-events.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/token-floor-ask-events.md",
      "summary": "# Token Floor Ask Events\n\nThis section of the app technical guide covers the `reservoir.token_floor_ask_events` table, which contains records with information about each NFT token floor ask change. The table includes various columns such as `id`, `kind`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `nonce`, `valid_from`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`.\n\nThe `kind` column specifies the type of event, which can be one of the following: `new-order`, `expiry`, `sale`, `cancel`, `balance-change`, `approval-change`, `bootstrap`, `revalidation`, or `reprice`. The `contract` column specifies the address of the contract associated with the event, while the `token_id` column specifies the ID of the token in the collection. The `order_id` column specifies the associated ask ID, and the `maker` column specifies the wallet address of the ask maker.\n\nThe `price` column specifies the associated ask price in native currency, while the `previous_price` column specifies the previous ask price in native currency. The `nonce` column specifies the order nonce of the maker, and the `valid_from` and `valid_until` columns specify the validity start and expiration of the ask. The `source` column specifies the source of the order, such as `opensea.io`. The `tx_hash` column specifies the associated transaction hash, and the `tx_timestamp` column specifies the associated transaction timestamp. Finally, the `created_at` column specifies the timestamp the event was recorded.\n\nThis section also includes two query examples that can be found at the specified URLs. These queries can be used to retrieve information from the `reservoir.token_floor_ask_events` table.",
      "questions": "1. What is the purpose of this table in the context of the dune docs project?\n- As a technical guide documentation expert, it is not clear from this table alone what the overall purpose of the dune docs project is, so a blockchain SQL analyst might have this question.\n\n2. What is the meaning of the \"kind\" column and what are the possible values?\n- The \"kind\" column is described as an event type, but it is not clear what each possible value represents, so a blockchain SQL analyst might have this question.\n\n3. Are there any other tables or data sources that are related to this one and can be used to gain a more complete understanding of NFT token floor asks?\n- This table provides information about NFT token floor ask changes, but it is possible that there are other tables or data sources that are related to this one and can provide additional context or insights, so a blockchain SQL analyst might have this question."
    },
    {
      "fileName": "tokens.md",
      "filePath": "docs/data-tables/community/reservoir/tokens.md",
      "url": "https://dune.com/docs/data-tables/community/reservoir/tokens.md",
      "summary": "# App Technical Guide: Tokens\n\n## Reservoir.tokens\n\nThis section of the app technical guide covers the `reservoir.tokens` table, which contains records with information about each NFT token. The table includes various columns such as `id`, `contract`, `token_id`, `name`, `description`, `collection_id`, `owner`, `floor_ask_id`, `floor_ask_value`, `floor_ask_maker`, `floor_ask_valid_from`, `floor_ask_valid_to`, `floor_ask_source`, `last_sale_value`, `last_sale_timestamp`, `created_at`, and `updated_at`.\n\nThe `id` column represents the internal token ID, while the `contract` column contains the contract address. The `token_id` column represents the ID of the token in the collection, and the `name` and `description` columns contain the name and description of the NFT, respectively. The `collection_id` column represents the associated collection ID, and the `owner` column contains the wallet address of the owner.\n\nThe `floor_ask_id`, `floor_ask_value`, `floor_ask_maker`, `floor_ask_valid_from`, `floor_ask_valid_to`, and `floor_ask_source` columns represent the floor ask details, such as the ID, value, maker wallet address, listing start and end times, and source (e.g. opensea.io). The `last_sale_value` and `last_sale_timestamp` columns represent the associated transaction timestamp.\n\nFinally, the `created_at` and `updated_at` columns represent the timestamps when the token was created and updated, respectively.\n\nThis section also includes query examples that can be found at the specified URLs. These examples can be used to retrieve information from the `reservoir.tokens` table.\n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.tokens` table and its various columns, as well as query examples that can be used to retrieve information from the table.",
      "questions": "1. What is the purpose of the `reservoir.tokens` table in the context of blockchain? \n- The `reservoir.tokens` table contains records with information about each NFT token, which can be useful for tracking ownership and transaction history.\n\n2. Are there any limitations or restrictions on the types of queries that can be run on this table? \n- The app technical guide does not provide information on any limitations or restrictions on queries that can be run on this table. \n\n3. How frequently is the `reservoir.tokens` table updated with new token information? \n- The app technical guide does not provide information on the frequency of updates to the `reservoir.tokens` table."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/docs/data-tables/community/reservoir` folder contains a comprehensive app technical guide for the Reservoir project, which focuses on enabling the next generation of NFT products and liquidity sources through open-source, on-chain NFT order aggregation. The guide is organized into different sections, each covering a specific aspect of the project, such as token attributes, sales, collections, and various events related to bids and asks.\n\nFor example, the `asks.md` section provides an in-depth overview of the `reservoir.asks` table, which contains records with information about each listing. Developers can use this information to build applications that interact with the `reservoir.asks` table, such as a marketplace or trading platform. The guide also includes query examples that can be used to retrieve data from the table.\n\nAnother example is the `attributes.md` section, which covers the `reservoir.attributes` table containing records with information about each attribute. This section provides a detailed description of the columns in this table and includes query examples that can be used as a reference for querying the table in the app.\n\nThe `tokens.md` section covers the `reservoir.tokens` table, which contains records with information about each NFT token. This section provides a detailed overview of the table and its various columns, as well as query examples that can be used to retrieve information from the table.\n\nOverall, this app technical guide serves as a valuable resource for developers and users who want to learn more about the different features and functionalities of the Reservoir project. The guide provides detailed information on each aspect of the project, including tables, queries, and other important components. By using this guide, developers and users can gain a better understanding of how the project works and how to use it effectively.",
  "questions": ""
}