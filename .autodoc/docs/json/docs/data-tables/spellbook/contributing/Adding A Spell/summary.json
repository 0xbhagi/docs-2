{
  "folderName": "Adding A Spell",
  "folderPath": "docs/data-tables/spellbook/contributing/Adding A Spell",
  "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell",
  "files": [
    {
      "fileName": "1-do-some-prerequisites and-set-up-Spellbook-dbt.md",
      "filePath": "docs/data-tables/spellbook/contributing/Adding A Spell/1-do-some-prerequisites and-set-up-Spellbook-dbt.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell/1-do-some-prerequisites and-set-up-Spellbook-dbt.md",
      "summary": "This technical guide provides instructions on how to set up Spellbook dbt on a local computer. The guide is divided into two main sections: prerequisites and setting up Spellbook dbt. \n\nThe prerequisites section outlines the software and tools required to set up Spellbook dbt. These include VSCode, Python 3.9, pip, pipenv, git, and GitHub. The guide provides links to download and install each of these tools. Additionally, the guide instructs users to fork the Spellbook repository, clone it locally, and add an upstream. The guide also includes a video tutorial on how to fork the Spellbook repo.\n\nThe second section of the guide focuses on setting up Spellbook dbt. Once the user has a local copy of their Spellbook fork, they need to install the necessary packages by running `pipenv install` in the terminal. The guide then instructs users to activate their virtual environment by running `pipenv shell` and initialize dbt by running `dbt init`. The guide provides a list of prompts that users should enter when initializing dbt. The guide also instructs users to run `dbt deps` to install dependencies and `dbt compile` to compile the project. Finally, the guide instructs users to create a new branch called \"workshop\" and push it to their remote GitHub repository.\n\nOverall, this guide provides detailed instructions on how to set up Spellbook dbt on a local computer. The guide is well-structured and includes links to relevant resources and a video tutorial. The guide is intended for users who are new to Spellbook dbt and provides step-by-step instructions to ensure that users can set up Spellbook dbt without any issues.",
      "questions": "1. What is the purpose of Spellbook and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of Spellbook or its relation to blockchain technology.\n\n2. Are there any specific SQL databases that Spellbook dbt is compatible with?\n- The app technical guide does not provide information on the specific SQL databases that Spellbook dbt is compatible with.\n\n3. Is there any guidance on how to integrate Spellbook with a blockchain network or smart contract?\n- The app technical guide does not provide information on how to integrate Spellbook with a blockchain network or smart contract."
    },
    {
      "fileName": "2-decide-on-a-Spell-to-cast.md",
      "filePath": "docs/data-tables/spellbook/contributing/Adding A Spell/2-decide-on-a-Spell-to-cast.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell/2-decide-on-a-Spell-to-cast.md",
      "summary": "This app technical guide covers the process of deciding on a Spell to cast in the Dune app. The guide provides three ways to decide on a Spell, including having an idea based on previous experience with Dune, checking out Spellbook bounties in Dework, or asking for suggestions in the #spellbook Discord channel. \n\nThe guide then provides an example of creating a migration Spell, specifically translating the Keep3r network `view_job_log` abstraction from Dune's v1 database into a V2 Spell. The guide directs the user to find the `view_job_log.sql` file in the `deprecated-dune-v1-abstractions` folder within VSCode. \n\nThe guide also includes a note that Dune V1 Abstractions have been moved to a new repository and provides a link to access the code for migrating a V1 Abstraction to a Spell. The guide concludes by instructing the user to set up the file structure for the Spell's SQL schema and source files.\n\nOverall, this guide provides a clear and concise explanation of how to decide on a Spell and create a migration Spell in the Dune app. The example provided helps to illustrate the process and make it more accessible to users.",
      "questions": "1. What is the purpose of the Dune Docs app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the Dune Docs app or its relation to blockchain technology.\n\n2. What is the significance of the migration Spell mentioned in the guide?\n- The migration Spell mentioned in the guide is for translating the Keep3r network `view_job_log` abstraction from Duneâ€™s v1 database into a V2 Spell.\n\n3. How does the Spellbook bounties in Dework relate to blockchain SQL analysis?\n- The Spellbook bounties in Dework provide a way for users to suggest and work on Spells, which may involve SQL analysis related to blockchain technology."
    },
    {
      "fileName": "3-set-up-your-file-structure-for-SQL-schema-and-source-files.md",
      "filePath": "docs/data-tables/spellbook/contributing/Adding A Spell/3-set-up-your-file-structure-for-SQL-schema-and-source-files.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell/3-set-up-your-file-structure-for-SQL-schema-and-source-files.md",
      "summary": "This app technical guide provides instructions on how to set up the file structure for SQL, schema, and source files in the Dune Docs project. The guide explains that all Spells are stored in the `/spellbook/models` directory by project name, then blockchain network. The folder names are all lowercase, and words are separated by underscores. The guide provides an example of the folder structure for the Keep3r network, where the folder is `/spellbook/models/keep3r_network/ethereum`. \n\nThe guide explains that if the project folder exists but a Spell is being created for a new blockchain, a folder for the new blockchain should be created. The guide then explains that three files need to be created: a `.sql` file for the Spell's logic, a `_schema.yml` file to define the Spell's purpose and add generic tests, descriptions, metadata, etc., and a `_sources.yml` file with any project-specific table dependencies. The guide provides an example of the file structure for a Spell folder.\n\nThe guide also explains the naming convention for Spell files. Schema files are named `[project_name]_[blockchain]_schema.yml`, sources files are named `[project_name]_[blockchain]_sources.yml`, and SQL files for Spells are named `[project_name]_[blockchain]_[spell_name].sql`. \n\nThe guide then provides an example of a specific v1 migration example where three additional `.sql` files are needed for a Spell called `keep3r_network_ethereum_view_job_log.sql`. The guide explains that these files are needed because the original `view_job_log.sql` V1 Abstraction has two `FROM` statements that reference two other files that are also abstractions that need to be converted into Spells. The guide also explains that a recursive check needs to be done to see if those abstractions depend on any other abstractions that have yet to be migrated to Spells. \n\nOverall, this app technical guide provides a detailed explanation of how to set up the file structure for Spells in the Dune Docs project and provides examples to help users understand the process.",
      "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain SQL analysis?\n- The app technical guide does not provide information on the purpose of the dune docs app or its relation to blockchain SQL analysis.\n\n2. What is the file structure for storing Spells in the dune docs app?\n- Spells are stored in the `/spellbook/models` directory by project name, then blockchain network. Names are all lower case and words are separated by `_`. The app requires the creation of three files: a `.sql` file for the Spell's logic, a `_schema.yml` file for defining the spell's purpose and adding metadata, and a `_sources.yml` file for project-specific table dependencies.\n\n3. How does the app handle dependencies between Spells and abstractions in the migration process?\n- The app requires a recursive check to see if abstractions depend on any other abstractions that have yet to be migrated to Spells. The app also requires the creation of additional `.sql` files for Spells that depend on other abstractions, and these dependencies are identified by searching for `FROM` statements in the original abstractions."
    },
    {
      "fileName": "4-identify-and-define-sources.md",
      "filePath": "docs/data-tables/spellbook/contributing/Adding A Spell/4-identify-and-define-sources.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell/4-identify-and-define-sources.md",
      "summary": "# App Technical Guide: Identify and Define Sources\n\nThis guide is focused on the `app` folder of the Dune Docs project and covers the process of identifying and defining sources in the `_sources.yml` file. The purpose of this file is to provide a structured way of defining the sources of data that will be used in the project. \n\nThe guide provides an example of how to format the `_sources.yml` file, which includes a version number and a list of sources. Each source is defined by a name, a one-line description, and a list of tables. The guide also explains how to identify the sources that need to be named by searching for `FROM` statements in the V1 abstractions that are being migrated. \n\nThe example provided in the guide is for the Keep3r Network Ethereum sources. The name of the source is `keep3r_network_ethereum`, and the description provides an overview of the Keep3r Network and its purpose. The list of tables includes the names of the tables that will be used as sources of data for the project. \n\nOverall, this guide is a useful resource for developers who are working on the Dune Docs project and need to identify and define sources of data. By following the guidelines provided in this guide, developers can ensure that the sources of data are properly defined and structured, which will make it easier to work with the data in the project.",
      "questions": "1. What is the purpose of the `_sources.yml` file in the Dune Docs project?\n    \n    The `_sources.yml` file in the Dune Docs project is used to define sources, including their names, descriptions, and tables.\n\n2. How are the sources formatted in the `_sources.yml` file?\n    \n    The sources in the `_sources.yml` file are formatted using YAML syntax, with a version number and a list of sources that include a name, description, and tables.\n\n3. How does one determine which tables to include in the `_sources.yml` file?\n    \n    To determine which tables to include in the `_sources.yml` file, one should search for `FROM` statements in the V1 abstractions being migrated and include all tables mentioned that are not abstractions."
    },
    {
      "fileName": "6-write-your-spell-as-SELECT-statement.md",
      "filePath": "docs/data-tables/spellbook/contributing/Adding A Spell/6-write-your-spell-as-SELECT-statement.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell/6-write-your-spell-as-SELECT-statement.md",
      "summary": "This technical guide covers the process of writing a Spell as a SELECT statement in the Dune Docs project. The guide is focused on the app folder of the project. The guide starts by explaining that the endpoint is `_view_job_log.sql`, but the process should start with `_view_job_migrations.sql` because it is the lowest-level dependency. The guide then explains how to migrate from V1 abstraction to V2 Spell by copying the contents of the V1 file to the `keep3r_network_ethereum_view_job_migrations.sql` file. The guide explains that the `CREATE` or `REPLACE` definition statement is not needed, and everything from the first `SELECT` to the last `TRUE` is required. The guide then explains how to replace hard-coded references with JINJA templating. \n\nThe guide provides examples of SQL code and explains how to modify the syntax to V2/Spark SQL. The guide also explains how to replace hard-coded references with JINJA templating. The guide provides examples of how to format references to sources and models using JINJA. The guide emphasizes the need to test the SQL code in dune.com and fix any errors. The guide also provides tips on how to fix errors by googling or asking for help in the community's Discord channel. \n\nIn summary, this technical guide provides a step-by-step process of writing a Spell as a SELECT statement in the Dune Docs project. The guide covers how to migrate from V1 abstraction to V2 Spell, how to replace hard-coded references with JINJA templating, and how to test the SQL code and fix errors.",
      "questions": "1. What is the purpose of the dune docs app?\n- The app technical guide does not provide information on the purpose of the dune docs app.\n\n2. What programming languages or technologies are used in this app?\n- The app technical guide mentions the use of SQL, PostgreSQL, Spark SQL, and JINJA templating.\n\n3. What is the process for migrating from V1 abstraction to V2 Spell style?\n- The app technical guide provides a detailed process for migrating from V1 abstraction to V2 Spell style, including modifying syntax to Spark SQL, replacing hard-coded references with JINJA templating, and testing individual SQL files in dune.com."
    },
    {
      "fileName": "7-configure-alias-and-materialization-strategy.md",
      "filePath": "docs/data-tables/spellbook/contributing/Adding A Spell/7-configure-alias-and-materialization-strategy.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell/7-configure-alias-and-materialization-strategy.md",
      "summary": "This app technical guide covers the configuration of aliases and materialization strategies in the Spellbook project. The guide explains that materialization strategies are used to persist data in the data lake house and there are four materialization strategies in dbt: table, ephemeral, view, and incremental. Spellbook uses view and incremental strategies. \n\nThe guide explains that view Spells are rebuilt each time they are run, meaning every time someone queries a view Spell, the SQL is run, and fresh data is gathered according to the Spellâ€™s SQL logic. On the other hand, incremental Spells allow dbt to insert or update records in a table according to the logic defined. The guide provides an example of how to create an incremental Spell by including a statement of which column to join new data to the existing data each time the Spell is incremented.\n\nThe guide also explains how to configure aliases and materialization. To configure a Spellâ€™s alias and materialization, the configuration is added to the top of each SQL file. The configuration includes creating an alias for the Spell file that will appear in the dune.com UI, defining how the file is stored and categorized in the UI, and naming the contributors. The guide provides an example of how to configure a Spellâ€™s alias and materialization using a view materialization strategy.\n\nFinally, the guide explains how to add new models to the dbt_project.yml file in the Spellbook root folder. The guide provides an example of how to specify the project name, schema, and materialization strategy for the project as a whole as well as the specific blockchain(s) that Spells have been created for. \n\nOverall, this guide provides a detailed explanation of how to configure aliases and materialization strategies in the Spellbook project. It is a useful resource for developers working on the project who need to configure aliases and materialization strategies for their Spells.",
      "questions": "1. What are the available materialization strategies in dbt and which ones does Spellbook use?\n- The available materialization strategies in dbt are `table`, `ephemeral`, `view`, and `incremental`. Spellbook uses `view` and `incremental`.\n\n2. How does the `incremental` materialization strategy work and what configuration is needed to implement it?\n- The `incremental` materialization strategy allows dbt to insert or update records in a table according to the logic defined. To implement it, the configuration section of the file needs to include a statement of which column to join new data to existing data, specify that it is an incremental Spell, and provide an instruction for how dbt should combine new/old data using `merge`. Additionally, `if` statements need to be added to any `FROM` for which data needs to be incremented.\n\n3. How do you configure a Spell's alias and materialization and where is this configuration added?\n- To configure a Spell's alias and materialization, the configuration is added to the top of each SQL file. The configuration includes creating an alias for the Spell file that will appear in the UI, defining how the file is stored and categorized in the UI, and specifying whether it is a Spell for a specific project or a whole sector. This configuration assumes the use of a `view` materialization strategy."
    },
    {
      "fileName": "8-make-a-pull-request-get-merged-become-an-archwizard.md",
      "filePath": "docs/data-tables/spellbook/contributing/Adding A Spell/8-make-a-pull-request-get-merged-become-an-archwizard.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell/8-make-a-pull-request-get-merged-become-an-archwizard.md",
      "summary": "This section of the app technical guide covers the process of making a pull request to the official Spellbook in the Dune Docs project. The guide provides step-by-step instructions on how to submit a pull request after committing local changes to the Spellbook GitHub fork. The guide also emphasizes the importance of giving an appropriate message when submitting a pull request and waiting for comments from the team. \n\nThe guide includes an example of the \"Open pull request button\" and encourages users to address any comments from the team before their Spell is approved. The ultimate goal of this section is to guide users towards becoming a Dune Archwizard by having their Spell approved. \n\nOverall, this section of the guide is focused on the app feature of contributing to the official Spellbook and becoming a part of the select few Dune Archwizards. It provides clear instructions and encourages users to take the necessary steps to ensure their pull request is approved.",
      "questions": "1. What is the purpose of the Dune Docs project and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the Dune Docs project or its relation to blockchain technology.\n\n2. What programming languages or frameworks are used in the development of this app?\n- The app technical guide does not provide information on the programming languages or frameworks used in the development of this app.\n\n3. Are there any security measures in place to protect user data or prevent unauthorized access?\n- The app technical guide does not provide information on any security measures in place to protect user data or prevent unauthorized access."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/data-tables/spellbook/contributing/Adding A Spell/index.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/Adding A Spell/index.md",
      "summary": "The app technical guide provides a comprehensive explanation of Spellbook, an open-source dbt repository for creating and maintaining high-level blockchain data tables using SQL and Jinja templating. The guide explains how Spellbook enables the community to build towards a standardized way to transform data into meaningful abstraction layers. The guide also highlights the importance of Spellbook in making blockchain data more transparent, accessible, and meaningful together. \n\nThe guide provides a step-by-step process of how to cast a Spell, which includes setting up Spellbook dbt, deciding on a Spell to cast, setting up a file structure for SQL, schema, and source files, identifying and defining sources, defining expectations with schema and tests, writing a Spell as a SELECT statement, configuring alias and materialization strategy, and making a pull request to become an Archwizard. \n\nThe guide also provides examples of how to use Spellbook to aggregate and organize raw data from multiple sources to make it much easier to query. For instance, the nft.trades Spell enables users to see industry-wide stats like total volume by # of txs and $USD, 24-hr volume, 24-hour and 7-day growth, market share by marketplace, volume by marketplace, and transaction count by marketplace. \n\nOverall, the app technical guide provides a detailed explanation of Spellbook and how to cast a Spell, making it easier for users to create and maintain high-level blockchain data tables using SQL and Jinja templating.",
      "questions": "1. What is Spellbook and how does it relate to blockchain data analytics?\n- Spellbook is an open-source dbt repository for creating and maintaining high-level blockchain data tables using SQL and Jinja templating. It enables the community to build toward a standardized way to transform data into meaningful abstraction layers, making it much easier to query blockchain data.\n\n2. How does Spellbook save time and effort in blockchain data analysis?\n- Spellbook allows users to create abstracted data sets, like dex.trades and nft.trades, which aggregate and organize raw data from multiple sources. This saves time and effort in data analysis as users can skip the manual abstraction work and get straight to the insights.\n\n3. How can a blockchain SQL analyst contribute to Spellbook?\n- A blockchain SQL analyst can contribute to Spellbook by doing the data engineering for a new marketplace, submitting a Pull Request to Spellbook, and having the entire community benefit from their work. They can also follow the 8 steps outlined in the app technical guide to create and maintain high-level blockchain data tables using SQL and Jinja templating."
    }
  ],
  "folders": [],
  "summary": "This folder in the Dune Docs project focuses on the process of contributing a new Spell to the Spellbook, which is an open-source dbt repository for creating and maintaining high-level blockchain data tables using SQL and Jinja templating. The guides in this folder provide detailed instructions on how to set up Spellbook dbt, decide on a Spell to cast, set up a file structure for SQL, schema, and source files, identify and define sources, define expectations with schema and tests, write a Spell as a SELECT statement, configure alias and materialization strategy, and make a pull request to become an Archwizard.\n\nFor example, the guide \"2-decide-on-a-Spell-to-cast.md\" helps users decide on a Spell to cast by providing three ways to decide on a Spell, including having an idea based on previous experience with Dune, checking out Spellbook bounties in Dework, or asking for suggestions in the #spellbook Discord channel. The guide also provides an example of creating a migration Spell, specifically translating the Keep3r network `view_job_log` abstraction from Dune's v1 database into a V2 Spell.\n\nAnother example is the guide \"6-write-your-spell-as-SELECT-statement.md\", which covers the process of writing a Spell as a SELECT statement in the Dune Docs project. The guide provides a step-by-step process of migrating from V1 abstraction to V2 Spell, replacing hard-coded references with JINJA templating, and testing the SQL code and fixing errors.\n\nThese guides are useful for analysts and developers who want to contribute to the Spellbook project by creating and maintaining high-level blockchain data tables. By following the instructions provided in these guides, users can ensure that their Spells are properly structured, tested, and integrated into the Spellbook project. This will ultimately help make blockchain data more transparent, accessible, and meaningful for the entire community.\n\nOverall, the guides in this folder provide a comprehensive explanation of how to contribute a new Spell to the Spellbook project, making it easier for users to create and maintain high-level blockchain data tables using SQL and Jinja templating. The guides are well-structured and include examples to help users understand the process and contribute effectively to the project.",
  "questions": ""
}