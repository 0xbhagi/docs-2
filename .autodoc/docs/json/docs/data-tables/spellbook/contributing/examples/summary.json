{
  "folderName": "examples",
  "folderPath": "docs/data-tables/spellbook/contributing/examples",
  "url": "https://dune.com/docs/data-tables/spellbook/contributing/examples",
  "files": [
    {
      "fileName": "daily-aggregation.md",
      "filePath": "docs/data-tables/spellbook/contributing/examples/daily-aggregation.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/examples/daily-aggregation.md",
      "summary": "# Daily Aggregation\n\nThis section of the app technical guide covers the daily aggregation feature of the Dune Docs project. The purpose of this feature is to sum all transfers for the day. The table is materialized as an incrementally loaded table updated every 15 minutes because the next step includes a slower `[window](https://spark.apache.org/docs/latest/sql-ref-syntax-qry-select-window.html)` function to capture a rolling sum.\n\nThe guide explains the novel components that make this Spell incremental. The `<div data-gb-custom-block data-tag=\"if\"> </div>` JINJA block allows the addition of an arbitrary filter when running in “incremental” mode. Incremental mode is default and a full refresh is denoted by a command line arg to completely recreate the table. The block is used to filter for all data timestamped in the last two days. The model runs every fifteen minutes, but a look back of 2 days is allowed to account for data arriving late from the blockchain.\n\nTo avoid duplicates, a “`merge`” incremental\\_strategy is used. Merge strategies require a unique key and deduplicate the table upon each update. The guide shows that a unique key is created by coalescing several transfer features together that are utilized here.\n\nThe guide also introduces the first use of “refs” in this spellset. A ref, like `{{ ref('tokens_ethereum_erc20') }}` is simply a reference to another model in the DBT project. The ref references the name of the file itself. That means, duplicate file names cannot exist.\n\nThe guide provides an example of the `transfers_ethereum_erc20_agg_day.sql` file, which contains the SQL code for the daily aggregation feature. The code includes a configuration block that specifies the alias, materialized, file format, incremental strategy, and unique key. The SQL code also includes a select statement that retrieves the required data and a group by statement that groups the data by the required fields.\n\nThe guide also provides an example of the `transfers_ethereum_schema.yml` file, which contains the schema for the Ethereum transfers. The schema includes the name of the transfer, the blockchain, the sector, the project, the contributors, the tags, and the columns. The columns include the blockchain, the hour, the wallet address, the token address, the symbol, the amount raw, and the amount USD.\n\nIn summary, this section of the app technical guide provides a detailed explanation of the daily aggregation feature of the Dune Docs project. It explains the novel components that make this Spell incremental, provides examples of the SQL code and schema files, and introduces the concept of refs.",
      "questions": "1. What is the purpose of the Daily Aggregation table in the Dune Docs app?\n- The Daily Aggregation table sums all transfers for the day and is materialized as an incrementally loaded table updated every 15 minutes.\n\n2. How does the app handle duplicates in the Daily Aggregation table?\n- The app uses a \"merge\" incremental strategy that requires a unique key and deduplicates the table upon each update.\n\n3. What is a ref in the Dune Docs app and how is it used?\n- A ref is a reference to another model in the DBT project and is used to reference the name of the file itself. It cannot have duplicate file names."
    },
    {
      "fileName": "final-day-balance.md",
      "filePath": "docs/data-tables/spellbook/contributing/examples/final-day-balance.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/examples/final-day-balance.md",
      "summary": "# Final Daily Balance\n\nThis technical guide covers the Final Daily Balance feature of the Dune Docs project. The feature is located in the `app` folder of the project. \n\nThe Final Daily Balance feature is an Ethereum ERC20 token balances spell that expands the Spell to cover all days, not just the days with transfer activity. The feature adds price data, removes known rebase tokens, and any tokens that resulted in large negative balances. \n\nThe `balances_ethereum_erc20_day.sql` file contains the SQL code for the feature. It uses the `transfers_ethereum_erc20_rolling_day` table to derive the `balances_ethereum_erc20_noncompliant` table, which looks for unique token addresses with larger negative balances that indicate the contract may not be compliant with ERC20. The `balances_ethereum_erc20_day` table then removes rebase tokens from balances and likely non-compliant tokens due to negative balances. \n\nThe `transfers_ethereum_schema.yml` file contains the schema for the `balances_ethereum_erc20_day` table. The table provides daily token balances of ERC20 Ethereum tokens per wallet and contract address pair. The table depends on `erc20_ethereum_transfers`. \n\nOverall, the Final Daily Balance feature provides a comprehensive view of daily Ethereum ERC20 token balances, including price data and compliance checks.",
      "questions": "1. What is the purpose of the `transfers_ethereum_erc20_rolling_day` table and how is it used in the `balances_ethereum_erc20_day` SQL query?\n   \n   The blockchain SQL analyst might want to know more about the `transfers_ethereum_erc20_rolling_day` table and how it is used in the `balances_ethereum_erc20_day` SQL query to understand how the daily token balances are calculated.\n\n2. How are rebase tokens and non-compliant tokens identified and removed from the final daily balances?\n\n   The blockchain SQL analyst might want to know more about how rebase tokens and non-compliant tokens are identified and removed from the final daily balances to understand the accuracy and reliability of the data.\n\n3. What is the significance of the `prices` table and how is it used in the `balances_ethereum_erc20_day` SQL query?\n\n   The blockchain SQL analyst might want to know more about the `prices` table and how it is used in the `balances_ethereum_erc20_day` SQL query to understand how the daily token balances are converted to USD."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/data-tables/spellbook/contributing/examples/index.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/examples/index.md",
      "summary": "The app technical guide titled \"Spellbook Examples\" provides an overview of how to track daily balances for ERC-20 tokens using the Dune app. The guide starts by introducing ERC-20 tokens and their contract standard set by the Ethereum Foundation. The main focus of the guide is to identify transfers and track daily balances using the Dune app.\n\nThe guide provides a modular series of spells that can be used to track daily balances. The first spell is \"Reformatted transfers\" which reformats the data from the `erc20_ethereum.evt_Transfer` table. The second spell is \"Daily aggregation\" which aggregates the daily transfers. The third spell is \"Rolling sum\" which calculates the rolling sum of daily transfers. The final spell is \"Final daily balances\" which calculates the final daily balances for Ethereum ERC20 tokens.\n\nThe guide also includes a video that demonstrates how to find the `erc20_ethereum.evt_Transfer` table using the data explorer. The guide is focused on the app folder of the Dune app and provides examples of how to use the app to track daily balances for ERC-20 tokens.",
      "questions": "1. What is the purpose of the Dune table `erc20_ethereum.evt_Transfer` and how does it relate to blockchain data analysis?\n   \n   A blockchain SQL analyst might want to know more about the structure and contents of the `erc20_ethereum.evt_Transfer` table, as well as how it can be used to track daily balances of ERC-20 tokens. They may also want to know how this table is populated and updated over time.\n\n2. How do the modular spells in this app technical guide work together to provide a comprehensive analysis of ERC-20 token transfers?\n\n   A blockchain SQL analyst might be interested in understanding how the different spells in this guide fit together to provide a complete picture of daily balances for ERC-20 tokens. They may also want to know how these spells can be customized or adapted for different use cases.\n\n3. Are there any limitations or potential issues with using this app technical guide for blockchain data analysis?\n\n   A blockchain SQL analyst might want to know about any potential limitations or issues with using this app technical guide, such as data quality or accuracy concerns, or any assumptions or simplifications made in the analysis. They may also want to know about any potential performance or scalability issues when working with large datasets."
    },
    {
      "fileName": "reformatted.md",
      "filePath": "docs/data-tables/spellbook/contributing/examples/reformatted.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/examples/reformatted.md",
      "summary": "# Reformatted Transfers\n\nThis technical guide is focused on the `app` folder of the Dune Docs project and covers the reformatted transfers feature. The purpose of this feature is to make it easier to sum up transfers by munging the base table into a union of sent transactions and received transactions. \n\nThe guide explains that WETH requires special handling due to the additional functions of deposit and withdrawal. Therefore, `zeroex_ethereum.weth9_evt_deposit` is added as a source. The model is defined in a YAML file where the description, tests, and metadata are defined. Contributors are also tracked in this file. \n\nThe JINJA config block is used to define the alias for this view as `erc20`. Without this alias, the table name would default to the file name. The schema name for this view is defined in the `dbt_project.yml` file in the root of the Spellbook project. Schema’s are defined there by the directory structure. The name of this view would be `transfers_ethereum.erc20` given the current structure.\n\nThe guide provides an SQL example of the `transfers_ethereum_erc20.sql` file, which includes four CTEs: `sent_transfers`, `received_transfers`, `deposited_weth`, and `withdrawn_weth`. These CTEs are used to select unique transaction IDs, wallet addresses, token addresses, event block times, and raw amounts for each transfer type. The `unique_tx_id`, `blockchain`, `wallet_address`, `token_address`, `evt_block_time`, and `amount_raw` columns are then selected from each CTE and unioned together to create the final table.\n\nThe `transfers_ethereum_schema.yml` file is also provided as an example. This file includes metadata such as the blockchain, sector, project, contributors, tags, and description for the `transfers_ethereum_erc20` model. The `dbt_project.yml` file is also included as an example, which defines the schema and materialized view for the `transfers` and `ethereum` folders.\n\nOverall, this technical guide provides a detailed explanation of the reformatted transfers feature in the Dune Docs app. It covers the purpose of the feature, how it works, and provides examples of the SQL, YAML, and `dbt_project.yml` files used to implement it.",
      "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain SQL analysis?\n   \n   The app is a documentation platform for spells used in Dune Analytics, which is a platform for blockchain SQL analysis. Blockchain SQL analysts may use this app to understand the data models and schemas used in Dune Analytics.\n\n2. What is the purpose of the `transfers_ethereum_erc20` model and how is it defined?\n   \n   The `transfers_ethereum_erc20` model is used to track ERC20 token transfers on the Ethereum blockchain. It is defined in a YAML file and a SQL file, where the SQL file defines the logic for the model and the YAML file defines metadata such as the description, tests, and contributors.\n\n3. How does the app handle WETH deposits and withdrawals?\n   \n   The app handles WETH deposits and withdrawals by adding `zeroex_ethereum.weth9_evt_deposit` as a source and defining two SQL queries to handle deposited and withdrawn WETH. These queries are then combined with queries for sent and received transfers to create a union of all transfer types."
    },
    {
      "fileName": "rolling-sum.md",
      "filePath": "docs/data-tables/spellbook/contributing/examples/rolling-sum.md",
      "url": "https://dune.com/docs/data-tables/spellbook/contributing/examples/rolling-sum.md",
      "summary": "# Rolling Sum of Daily Transfers\n\nThis section of the app technical guide covers the rolling sum window function applied to each daily transfer sum. The purpose of this query is to calculate the rolling sum of raw amounts of ERC20 tokens held after taking into account token decimals. The query is contained in the `transfers_ethereum_erc20_rolling_day.sql` file located in the `app` folder of the project. \n\nThe query selects the blockchain, day, wallet address, token address, symbol, last updated timestamp, recency index, and the rolling sum of the raw amount of ERC20 tokens held. The `transfers_ethereum_erc20_agg_day` reference is used to partition the data by token address and wallet address and order it by day. \n\nThe `transfers_ethereum_erc20_schema.yml` file in the `app` folder of the project contains the schema for the `transfers_ethereum_erc20_rolling_hour` table. The table includes columns for blockchain, hour, wallet address, token address, symbol, amount raw, amount, amount USD, updated at, and recency index. \n\nOverall, this section of the app technical guide provides information on how to calculate the rolling sum of raw amounts of ERC20 tokens held using a window function. It also includes the schema for the table that stores the results of this calculation.",
      "questions": "1. What is the purpose of the `rolling sum window function` in this app technical guide?\n    \n    The purpose of the `rolling sum window function` is to apply it to each daily transfer sum in order to calculate the rolling sum of raw amount of ERC20 token held.\n\n2. What is the significance of the `recency_index` column in the `transfers_ethereum_erc20_schema.yml` file?\n    \n    The `recency_index` column is an index of the most recent balance ascending, where `recency_index=1` is the wallet/contract pair's most recent balance.\n\n3. How does the `transfers_ethereum_erc20_rolling_hour` table differ from the `transfers_ethereum_erc20_agg_day` table?\n    \n    The `transfers_ethereum_erc20_rolling_hour` table calculates the rolling sum of raw amount of ERC20 token held after taking into account token decimals, while the `transfers_ethereum_erc20_agg_day` table does not."
    }
  ],
  "folders": [],
  "summary": "This folder contains a series of technical guides focused on the `app` folder of the Dune Docs project, specifically covering the process of tracking daily balances for Ethereum ERC-20 tokens. The guides provide detailed explanations of various features and functionalities, including reformatted transfers, daily aggregation, rolling sum, and final daily balances. These guides are essential for analysts who want to understand the inner workings of the Dune Docs project and how to use it effectively.\n\nThe `reformatted.md` guide explains the reformatted transfers feature, which simplifies the process of summing up transfers by creating a union of sent and received transactions. It covers the handling of WETH, the use of JINJA config blocks, and provides examples of the `transfers_ethereum_erc20.sql` and `transfers_ethereum_schema.yml` files.\n\nThe `daily-aggregation.md` guide covers the daily aggregation feature, which sums all transfers for the day. It explains the incremental nature of the feature, the use of merge strategies, and the concept of refs. The guide also provides examples of the `transfers_ethereum_erc20_agg_day.sql` file and the `transfers_ethereum_schema.yml` file.\n\nThe `rolling-sum.md` guide focuses on the rolling sum window function applied to each daily transfer sum. It explains how to calculate the rolling sum of raw amounts of ERC20 tokens held, using the `transfers_ethereum_erc20_rolling_day.sql` file. The guide also includes the schema for the `transfers_ethereum_erc20_rolling_hour` table, as found in the `transfers_ethereum_erc20_schema.yml` file.\n\nThe `final-day-balance.md` guide covers the Final Daily Balance feature, which provides a comprehensive view of daily Ethereum ERC20 token balances, including price data and compliance checks. It explains the use of the `balances_ethereum_erc20_day.sql` file and the schema for the `balances_ethereum_erc20_day` table, as found in the `transfers_ethereum_schema.yml` file.\n\nLastly, the `index.md` guide provides an overview of the entire process of tracking daily balances for ERC-20 tokens using the Dune app. It introduces the concept of ERC-20 tokens and their contract standard, as well as the modular series of spells used to track daily balances.\n\nThese guides are useful for analysts who want to gain a deeper understanding of the Dune Docs project and its features. By following the examples provided in the guides, analysts can effectively track daily balances for ERC-20 tokens and make informed decisions based on the data.",
  "questions": ""
}