{
  "folderName": "top tables",
  "folderPath": "docs/data-tables/spellbook/top tables",
  "url": "https://dune.com/docs/data-tables/spellbook/top tables",
  "files": [
    {
      "fileName": "dex.trades.md",
      "filePath": "docs/data-tables/spellbook/top tables/dex.trades.md",
      "url": "https://dune.com/docs/data-tables/spellbook/top tables/dex.trades.md",
      "summary": "# Dex.Trades App Technical Guide\n\nThe Dex.Trades app is a decentralized exchange aggregator that collects data from multiple DEX platforms into one simple table. This guide provides an overview of the app and its features.\n\n## Overview\n\nDecentralized exchanges are the backbone of the DeFi industry, allowing users to swap any native (ETH) or ERC-20 token for any ERC-20 token through smart contracts. However, with so many decentralized exchanges available, it can be challenging to work with the smart contract data for all of them. Dex.Trades solves this problem by standardizing and normalizing trading data across virtually all relevant decentralized exchanges.\n\n## Column Data\n\nThe Dex.Trades table contains the following columns:\n\n- `block_time`: The timestamp of the block that included this transaction.\n- `token_a_symbol`: The symbol of one of the two tokens that got traded.\n- `token_b_symbol`: The symbol of one of the two tokens that got traded.\n- `token_a_amount`: The amount of token A that got traded.\n- `token_b_amount`: The amount of token B that got traded.\n- `project`: The DEX on which this trade was executed.\n- `version`: Which version of the DEX got used?\n- `blockchain`: Which blockchain did this occur on?\n- `taker`: Which contract called the DEX contract?\n- `maker`: In some special cases, there actually is a counterparty to transactions, and this party will get displayed here if applicable.\n- `token_a_amount_raw`: The raw amount of token A that got traded.\n- `token_b_amount_raw`: The raw amount of token B that got traded.\n- `usd_amount`: The USD value of this trade.\n- `token_a_address`: The ERC-20 token contract address of token A.\n- `token_b_address`: The ERC-20 token contract address of token B.\n- `exchange_contract_address`: The address of the decentralized exchange contract that made this trade possible.\n- `tx_hash`: The hash of the transaction that contained this trade.\n- `tx_from`: Which address initiated this transaction?\n- `tx_to`: What was the first smart contract that got called during this tx?\n- `trace_address`: Which position in the graph tree does the execution of the trade have?\n- `evt_index`: This logs index position in the block (cumulative amount of logs ordered by execution).\n- `trade_id`: Just for database magic.\n\n## Conclusion\n\nThe Dex.Trades app is an essential tool for anyone looking to work with decentralized exchanges. By aggregating data across multiple DEX platforms into one simple table, Dex.Trades makes it easy to query for trading data for your favorite tokens without having to deal with all of the different DEX smart contracts yourself. The scripts that generate the table can be found in the public Github repo.",
      "questions": "1. What is the purpose of dex.trades and how does it work?\n- Answer: dex.trades is a table that standardizes and normalizes trading data across multiple decentralized exchanges, making it easier to query for trading data for different tokens without having to deal with different DEX smart contracts. It works by aggregating data from various DEX platforms into one simple table.\n\n2. What specific data is included in the dex.trades table?\n- Answer: The dex.trades table includes data such as the timestamp of the block that included the transaction, the symbols and amounts of the tokens traded, the DEX on which the trade was executed, the blockchain on which it occurred, the contract addresses involved, and the USD value of the trade.\n\n3. Where can the scripts that generate the dex.trades table be found?\n- Answer: The scripts that generate the dex.trades table can be found in the public github repo at https://github.com/duneanalytics/spellbook/tree/master/ethereum/dex."
    },
    {
      "fileName": "labels.md",
      "filePath": "docs/data-tables/spellbook/top tables/labels.md",
      "url": "https://dune.com/docs/data-tables/spellbook/top tables/labels.md",
      "summary": "# Labels\n\nThe Labels technical guide is a feature on Dune that allows users to add, update, and query labels for any address. The guide explains what labels are, how to add them, and how to use them. \n\nA label is a piece of metadata about an address, a tag, or metadata. It comes in the form of a key-value pair. The key is the label type, and the value is the label name. Users can browse addresses and labels on the labels page. Labels on Dune are open-ended and crowd-sourced, meaning users are free to come up with new types and label names. \n\nThe guide provides examples of what users can do with labels, such as labeling all addresses that used a certain dapp, labeling all addresses that hold a certain amount of a token, labeling all addresses that use a dapp more than X times per month, and labeling all addresses that sent money to Binance. Users can also do more novel and involved things around user patterns like who did arbitrage trades or profited from flash loans and so much more.\n\nThe Labels table stores labels in the new `labels.labels` table, which has the following schema: `id`, `address`, `name`, `blockchain`, `author`, `source`, `updated_at`, `label_type`, and `model_name`. \n\nThe guide also provides a warning that the Using Labels section is currently under construction. \n\nOverall, the Labels technical guide provides a comprehensive overview of the Labels feature on Dune, including what labels are, how to add them, and how to use them. It also provides examples of what users can do with labels and explains how labels are stored in the Labels table.",
      "questions": "1. What is the purpose of the Labels feature on Dune?\n- The Labels feature on Dune allows users to add, update, and query labels for any address, providing metadata about an address in the form of a key-value pair.\n\n2. How are labels created on Dune?\n- Labels on Dune are open-ended and crowd-sourced, meaning users are free to come up with both new types and label names. Labels can be added using Dune queries, which can be used to label addresses based on various criteria such as dapp usage, token holdings, and more.\n\n3. What is the schema of the `labels.labels` table?\n- The `labels.labels` table stores labels and has columns for the label ID, address, name, blockchain, author, source, updated_at, label_type, and model_name."
    },
    {
      "fileName": "nft.trades.md",
      "filePath": "docs/data-tables/spellbook/top tables/nft.trades.md",
      "url": "https://dune.com/docs/data-tables/spellbook/top tables/nft.trades.md",
      "summary": "The `nft.trades` technical guide is a documentation of the effort to make NFT trading data easily available to everyone on Dune. The guide provides an overview of the `nft.trades` table, which aggregates and standardizes the data between different data platforms and provides auxiliary information and metadata all in one table. The guide explains how the dataset makes it extremely easy to query for any NFT related trading data across all indexed platforms. \n\nThe guide provides information on how the `nft.trades` table works, including Single Item Trade, Bundle Trade, and Aggregator Trade. The Single Item Trade occurs between a buyer and a seller, and they exchange an item that is uniquely identified by the combination of `nft_contract_address` and `token_id`. The Bundle Trade contains multiple items, and each of these items is uniquely identified through a combination of `nft_contract_address` and `token_id`. The Aggregator Trade is a trade in which a single trade transaction contains multiple items, and the approach is to unravel aggregator trades so that each row corresponds to a unique item that was traded, with its associated ID, price, collection, etc.\n\nThe guide also provides information on Platform and Royalty Fees. In the most recent version of `nft.trades`, information about the amount and percent of royalty fees in the original amount and in USD is available when this information was able to be retrieved. Royalty fees are going to the creator, and Platform fees are collected by the NFT platform. \n\nThe guide provides examples of queries that can be run on the `nft.trades` table, including All trades for a given NFT, Trades in the last 24 hour on a given platform, and Platform volumes in the last year. The guide also provides examples of dashboards that utilize parameters and look across the entire ecosystem.\n\nFinally, the guide provides a column data table that lists the column name, data type, and description of the `nft.trades` table. The guide also explains that the SQL code that processes the data for every marketplace is open source and available in their GitHub repository. Everyone can review the code, make pull requests, and submit code to add more marketplaces.",
      "questions": "1. What platforms are currently indexed by nft.trades?\n- OpenSea, Rarible, SuperRare, CryptoPunks, Foundation, and LooksRare are currently indexed by nft.trades.\n\n2. What metadata is provided about the traded NFT?\n- The metadata provided about the traded NFT includes nft_project_name and erc_standard.\n\n3. Can a blockchain SQL analyst add their own aggregator platform to the nft.trades table?\n- Yes, a blockchain SQL analyst can make a pull request to add their own aggregator platform to the nft.trades table."
    },
    {
      "fileName": "prices.md",
      "filePath": "docs/data-tables/spellbook/top tables/prices.md",
      "url": "https://dune.com/docs/data-tables/spellbook/top tables/prices.md",
      "summary": "# Prices\n\nThis technical guide covers the `Prices` feature of the Dune Docs project. The `Prices` feature allows users to get the price of almost all relevant ERC20 tokens. The data is pulled from the Coinpaprika API and the price is the volume-weighted price based on real-time market data, translated to USD.\n\nThe guide provides two tables for getting prices: `prices.usd` and `prices_from_dex_data`. The `prices.usd` table supports a range of ERC20 tokens. If the token you desire is not listed in this table, you can make a pull request to the GitHub repository. The `prices_from_dex_data` table creates price feeds based on decentralized exchange trading data. This table covers much more assets than `prices.usd`, since it covers all assets that are traded on any of the decentralized exchanges that are indexed in `dex.trades`. However, this table is very resource-intensive and can only be updated every few hours. Also, the resolution is only hourly, so if you need minutely prices, you should refer to `prices.usd`.\n\nThe guide provides a detailed explanation of how the `prices_from_dex_data` table works. The script generates median hourly prices based on data from decentralized exchanges found in `dex.trades`. It assigns asset prices based on a trading pair which has a price feed in `prices.usd`. For example, if the $SPELL/ETH pool is used, the $ETH price is contained in `prices.usd`, but the $SPELL price is not. In order to get the $SPELL price, the script will dynamically calculate the price of $SPELL based on the price of $ETH that was exchanged for it. The guide provides an example of how this calculation is done.\n\nThe guide also highlights known issues with the `prices_from_dex_data` table. In rare cases, the script will generate price feeds that are based on illiquid pairs and therefore report wrong data. This happens when all liquid trading pools of this token do not have a price feed in `prices.usd`. The guide provides an example of how this issue can occur and how to manually construct a price feed in such cases.\n\nOverall, this technical guide provides a comprehensive explanation of the `Prices` feature of the Dune Docs project, including how to use the `prices.usd` and `prices_from_dex_data` tables, how the `prices_from_dex_data` table works, and known issues with the table.",
      "questions": "1. What is the source of the price data for the decentralized exchange trading data table?\n- The source of the price data for the decentralized exchange trading data table is the trading data from decentralized exchanges found in `dex.trades`.\n\n2. What is the resolution for the `prices.usd` table?\n- The resolution for the `prices.usd` table is by minute.\n\n3. What are the known issues with the script that generates median hourly prices based on data from decentralized exchanges found in `dex.trades`?\n- In rare cases, the script will generate price feeds that are based on illiquid pairs and therefore report wrong data. This happens when all liquid trading pools of a token do not have a price feed in `prices.usd`. In cases like this, a manual price feed construction is required."
    },
    {
      "fileName": "tokens.md",
      "filePath": "docs/data-tables/spellbook/top tables/tokens.md",
      "url": "https://dune.com/docs/data-tables/spellbook/top tables/tokens.md",
      "summary": "# Tokens\n\nThis section of the app technical guide for the Dune Docs project covers token transfers and metadata. The guide is aimed at individuals who will be working with fungible (ERC20) and non-fungible (ERC721 and ERC1155) tokens in their analysis. The guide provides information on two metadata tables and two transfer tables that are essential for working with tokens.\n\nThe metadata tables include:\n\n1. `tokens.erc20`: This table contains useful information such as the token `symbol` and the `decimals` for any given `contract_address`. The `decimals` information is needed to get the actual amount from raw amounts in on-chain data.\n\n2. `tokens.nft`: This table contains the collection `name` and `symbol` for any given `contract_address`.\n\nThese tables are usually joined on `contract_address` at the end of a query to make everything more human-readable.\n\nThe transfer tables include:\n\n1. `erc20_ethereum.evt_Transfer`: This table contains all transfer events for every ERC20 token. The guide provides a link to a video guide that explains how to get ERC20 balances, mints, and burns.\n\n2. `nft.transfers`: This table contains all transfer events for every ERC721 or ERC1155 token. The guide provides a link to a guide that explains how to leverage this table to find NFT balances, transfers, and mints.\n\nIf you're looking for information on how to calculate native token balances like Ethereum (ETH) balances, the guide provides a link to another guide that covers this topic.\n\nOverall, this section of the app technical guide provides essential information for individuals working with tokens in their analysis. The metadata and transfer tables are crucial for understanding token transfers and metadata, and the guide provides links to additional resources for further learning.",
      "questions": "1. What types of tokens does this app support?\n- The app supports both fungible (erc20) and nonfungible (erc721 and erc1155) tokens.\n\n2. What information can be found in the metadata tables?\n- The metadata tables contain information such as the token symbol, decimals, collection name, and symbol for a given contract address.\n\n3. What transfer events can be found in the transfer tables?\n- The transfer tables contain all transfer events for erc20, erc721, and erc1155 tokens, and can be used to find balances, transfers, mints, and burns."
    }
  ],
  "folders": [],
  "summary": "This folder contains technical guides for various features and tables related to the Dune Docs project, specifically focusing on data tables and their usage. These guides provide detailed explanations, examples, and use cases for working with different aspects of the project, such as decentralized exchange trades, labels, NFT trades, token prices, and token metadata.\n\nFor example, the `dex.trades.md` guide covers the Dex.Trades app, which is a decentralized exchange aggregator that collects data from multiple DEX platforms into one simple table. This guide provides an overview of the app, its features, and the columns in the Dex.Trades table. This guide is useful for anyone looking to work with decentralized exchanges and aggregate data across multiple DEX platforms.\n\nThe `labels.md` guide focuses on the Labels feature, which allows users to add, update, and query labels for any address. This guide explains what labels are, how to add them, and how to use them. It also provides examples of what users can do with labels and explains how labels are stored in the Labels table.\n\nThe `nft.trades.md` guide documents the effort to make NFT trading data easily available on Dune. It provides an overview of the `nft.trades` table, which aggregates and standardizes the data between different data platforms and provides auxiliary information and metadata all in one table. This guide is useful for anyone looking to query NFT related trading data across all indexed platforms.\n\nThe `prices.md` guide covers the Prices feature,",
  "questions": ""
}