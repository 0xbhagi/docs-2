{
  "folderName": "dune-v2",
  "folderPath": ".autodoc\\docs\\json\\docs\\reference\\dune-v2",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\reference\\dune-v2",
  "files": [
    {
      "fileName": "dunesql-changes.md",
      "filePath": "docs\\reference\\dune-v2\\dunesql-changes.md",
      "url": "https://dune.com/blob/master/reference\\dune-v2\\dunesql-changes.md",
      "summary": "The DuneSQL migration technical guide provides documentation on the changes made to DuneSQL on March 2nd, 2023. The guide is divided into several sections, each with a specific focus. \n\nThe warning section highlights the issues with datatypes in some tables in DuneSQL and provides a temporary workaround for the affected tables. \n\nThe DuneSQL Alpha Deprecation and Data Type Changes section explains the changes made to DuneSQL. The changes include the use of the same data types as the underlying EVM blockchain, support for uint256 and int256, correction of an ancient mistake in the database, and modification of the from_hex native function. The section also explains the implications of these changes for users, including improved query speed, easier query maintenance, and full wei-level precision calculations. \n\nThe What do I need to do? section provides a step-by-step guide on what users need to do to adjust their queries to use compatible functions before the deprecation date. The section also highlights common errors and fixes, such as casting varchar to varbinary, casting to uint256, using bytearray_substring, and using bytearray_starts_with instead of LIKE expression. \n\nThe Changes section provides a summary of the changes made to DuneSQL, including the renaming of logs.topicX columns to topic0, topic1, topic2, topic3, and the removal of automatic coercion of breaking type changes of contract updates. \n\nOverall, the DuneSQL migration technical guide provides a comprehensive overview of the changes made to DuneSQL and the implications for users. The guide is useful for developers and users who want to understand the changes and how to adjust their queries to use compatible functions.",
      "questions": "1. What are the current issues with datatypes in some tables in DuneSQL and when are they expected to be resolved?\n- The current issues with datatypes in some tables in DuneSQL include some Spellbook tables, `flashbots.*`, `reservoir.*`, and `snapshot.*` and `cowswap.*`. The issue with `prices.usd` has already been fixed on March 6th, 2023. The issues with `flashbots.*` and `reservoir.*` are expected to be fixed by March 10th, 2023, while the issues with `snapshot.*` and `cowswap.*` are still to be determined.\n\n2. What are the benefits of switching to the `varbinary` datatype in DuneSQL?\n- Switching to the `varbinary` datatype in DuneSQL should significantly improve the speed of queries by approximately 30%. It also eliminates the need for string casts and conversions, making queries more readable and easier to maintain. Additionally, the introduction of `uint256` and `int256` allows for full wei-level precision calculations.\n\n3. What are some common errors and fixes when working with the new data types in DuneSQL?\n- Some common errors and fixes when working with the new data types in DuneSQL include casting varchar to varbinary using `from_hex(x))`, casting to uint256 using `cast(xxx as uint256)`, using `bytearray_substring` and `bytearray_starts_with` instead of LIKE expression, and adjusting the indexing of topics from `Topic1` to `Topic0`, `Topic2` to `Topic1`, etc."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\reference\\dune-v2\\index.md",
      "url": "https://dune.com/blob/master/reference\\dune-v2\\index.md",
      "summary": "The Dune V2 technical guide provides an overview of the new features and updates to the Dune Engine V2, which is a query engine and database that enables users to query, extract, and visualize blockchain data. The guide explains that Dune V2 brings a new level of performance, scalability, and functionality to the core tools that let Wizards query, extract, and visualize the vast amounts of blockchain data available. \n\nThe guide highlights two significant updates to the Dune V2: a scalable column-oriented database and two new query engines, Dune SQL and Spark SQL. The new database architecture is transitioning away from a PostgreSQL database to a scalable columnar database. The difference between the two systems is that V2 uses a columnar storage format in contrast to PostgreSQL’s row-oriented approach. Traditional indexes are replaced by block range indexes, which are chunk level min/max values. \n\nThe guide also explains that DuneV2 leverages two different query engines as it transitions away from a PostgreSQL database to a data lake house. Spark SQL was the initial choice for a V2 Query engine, but after gathering data and feedback from the Beta release, the team realized it won’t allow them to continue to have the best blockchain data querying experience as they scale. The solution is Dune SQL powered by Trino, and it is live in alpha. \n\nThe guide also explains that abstractions in DuneV2 run on dbt (data build tool), which enables analytics engineers to transform data in their warehouses by simply writing select statements, then dbt handles turning these select statements into tables and views. Spells currently run on Spark SQL in Dune v2 but can also be queried on Dune SQL. \n\nThe guide provides links to resources where users can find more information about the new query engines and built-in functions. The guide also encourages users to reach out to the Dune team for help and feedback. \n\nOverall, the Dune V2 technical guide provides a comprehensive overview of the new features and updates to the Dune Engine V2, which is a query engine and database that enables users to query, extract, and visualize blockchain data. The guide is useful for developers and data analysts who want to learn more about the new features and updates to the Dune Engine V2.",
      "questions": "1. What is the difference between Dune V2's column oriented database and PostgreSQL's row oriented approach?\n- Dune V2's database uses a columnar storage format, while PostgreSQL uses a row oriented approach.\n2. Why did the Dune team decide to transition from Spark SQL to Dune SQL?\n- After gathering data and feedback from their Beta release, the Dune team realized that Dune SQL powered by Trino would provide a better blockchain data querying experience as they scale.\n3. What is the best way to get help from the Dune team and Wizard community when encountering issues with Dune V2?\n- The best place to get help is the #dune-sql Discord channel, and users can also send an email to dunesql-feedback@dune.com for assistance with updating and optimizing the app."
    },
    {
      "fileName": "query-engine.md",
      "filePath": "docs\\reference\\dune-v2\\query-engine.md",
      "url": "https://dune.com/blob/master/reference\\dune-v2\\query-engine.md",
      "summary": "The app technical guide covers the transition from PostgreSQL to Dune SQL and Spark SQL query engines in Dune V2. It provides a detailed comparison of syntax and operator differences between the three engines, including examples for various operations such as casting, indexing, type conversions, and aggregate functions.\n\nThe guide also explains the data types and functions available in Dune SQL, with a focus on numerical types, byte array functions, and byte array to numeric functions. It provides a comprehensive list of helper functions for working with byte arrays and their respective descriptions.\n\nAdditionally, the guide explains how to query queries as views in Dune SQL using the `query_<queryId>` identifier and provides an example for reference. It also highlights the limitations and requirements for using this feature.\n\nFinally, the guide suggests using Google and the respective documentation for Spark SQL and Trino SQL to find answers to specific questions. It also recommends the #dune-sql Discord channel for community support and encourages users to provide feedback via email.",
      "questions": "1. **What are the differences in syntax and keyword operators between PostgreSQL, Spark SQL, and Dune SQL?**\n\n   The app technical guide provides a syntax comparison table that highlights the key differences between PostgreSQL, Spark SQL, and Dune SQL. Some examples include differences in casting hex/bytea to a number, handling decimals for prices.usd, and aggregate functions.\n\n2. **What are the available byte array functions in Dune SQL?**\n\n   Dune SQL offers several byte array functions such as `bytearray_concat`, `bytearray_length`, `bytearray_ltrim`, `bytearray_position`, `bytearray_replace`, `bytearray_reverse`, `bytearray_rtrim`, `bytearray_starts_with`, and `bytearray_substring`. These functions simplify interactions with byte arrays by accounting for the `0x`-prefix and using byte index instead of character index.\n\n3. **How can I query queries as views in Dune SQL?**\n\n   In Dune SQL, you can query non-parameterized queries as views using the identifier `query_<queryId>`. For example, `select * from query_1234`. Note that all output columns of the query being queried must be named, parameterized queries are not supported, only public queries can be queried, only saved queries can be queried, and only queries written in Dune SQL can be queried."
    }
  ],
  "folders": [],
  "summary": "The Dune V2 technical guide, located in the `.autodoc\\docs\\json\\docs\\reference\\dune-v2` folder, focuses on the updates and new features introduced in the Dune Engine V2, a query engine and database for blockchain data. The guide is essential for developers and data analysts who want to learn more about the new features and updates to the Dune Engine V2.\n\nThe guide covers the following key aspects:\n\n1. **DuneSQL migration technical guide (dunesql-changes.md)**: This guide provides a comprehensive overview of the changes made to DuneSQL and their implications for users. It includes a step-by-step guide on adjusting queries to use compatible functions before the deprecation date and highlights common errors and fixes. This guide is useful for developers and users who want to understand the changes and how to adjust their queries accordingly.\n\n2. **Dune V2 overview (index.md)**: This guide provides an overview of the new features and updates to the Dune Engine V2, including the transition to a scalable column-oriented database and the introduction of two new query engines, Dune SQL and Spark SQL. The guide also explains the use of dbt (data build tool) for data transformation and the support for Spells in Dune v2. This guide is useful for developers and data analysts who want to learn more about the new features and updates to the Dune Engine V2.\n\n3. **Query engine transition (query-engine.md)**: This guide covers the transition from PostgreSQL to Dune SQL and Spark SQL query engines in Dune V2. It provides a detailed comparison of syntax and operator differences between the three engines, including examples for various operations such as casting, indexing, type conversions, and aggregate functions. The guide also explains the data types and functions available in Dune SQL, with a focus on numerical types, byte array functions, and byte array to numeric functions. This guide is useful for developers and data analysts who want to understand the differences between the query engines and how to work with them effectively.\n\nOverall, the guides in this folder provide a comprehensive understanding of the new features and updates in the Dune Engine V2, enabling users to query, extract, and visualize blockchain data more efficiently. The guides are essential for developers and data analysts who want to learn more about the new features and updates to the Dune Engine V2 and how they might fit into the larger project or work with other parts of the project.",
  "questions": ""
}