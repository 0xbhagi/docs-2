{
  "folderName": "quick-start",
  "folderPath": ".autodoc\\docs\\json\\docs\\api\\quick-start",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\api\\quick-start",
  "files": [
    {
      "fileName": "api-js.md",
      "filePath": "docs\\api\\quick-start\\api-js.md",
      "url": "https://dune.com/blob/master/api\\quick-start\\api-js.md",
      "summary": "The app technical guide provides a tutorial on how to access the Dune API via JavaScript. The guide is not yet comprehensive, and users are advised to reach out to the Dune team via the dune-api channel on Discord if they have any questions. The guide assumes that users have some level of familiarity with Node.js, Node Package Manager (NPM), and Node Version Manager (NVM). \n\nThe guide provides a step-by-step process for getting set up, which includes ensuring that users are using the current LTS version of Node.js (Node 18) and the latest version of NPM. Users are also required to install the node-fetch package and create a project directory and initiate an ESM-compatible Node project. \n\nThe guide provides an example Dune API script that fetches a small set of data using a simple query with the query_id 1258228. Users are required to replace `#! YOUR_API_KEY` with their Dune API key in the code. The guide also provides an example Dune API script for a parameterized query that takes in a wallet address as a parameter. \n\nThe guide concludes by providing instructions on how to run the script from the command line and a link to the code in a Github repository. The guide is focused on the app folder of the Dune Docs project and provides a detailed explanation of how to access the Dune API via JavaScript.",
      "questions": "1. What is the Dune API and how does it relate to blockchain technology?\n- The app technical guide provides information on how to access the Dune API via JavaScript, but it does not explain what the Dune API is or how it relates to blockchain technology.\n\n2. Are there any security measures in place to protect user data when using the Dune API?\n- The app technical guide does not mention any security measures in place to protect user data when using the Dune API, which may be a concern for a blockchain SQL analyst.\n\n3. Are there any limitations or restrictions on the types of queries that can be executed using the Dune API?\n- The app technical guide provides examples of how to execute queries using the Dune API, but it does not mention any limitations or restrictions on the types of queries that can be executed, which may be important information for a blockchain SQL analyst."
    },
    {
      "fileName": "api-py.md",
      "filePath": "docs\\api\\quick-start\\api-py.md",
      "url": "https://dune.com/blob/master/api\\quick-start\\api-py.md",
      "summary": "This app technical guide covers how to access the Dune API using Python. It provides a step-by-step guide to set up the environment, install necessary libraries, and create functions to interact with the Dune API. The guide assumes prior experience with Python and recommends using Python3, a virtual environment, and the `pip` package manager.\n\nThe guide covers the following sections:\n\n1. **Getting Set Up**: Installing the `requests`, `pandas`, and `jupyter notebook` libraries.\n2. **Import the necessary libraries**: Importing `requests` and `pandas`.\n3. **API Keys**: Setting up the API key and header for making API calls.\n4. **Simplifying URL generation**: Creating a function to generate URLs for different API endpoints.\n5. **Wrapping API endpoints in functions**: Defining functions to execute a query, get query status, get query results, and cancel query execution.\n6. **Using the Dune API**: Demonstrating how to execute a query, get query execution status, get query results, and cancel query execution.\n7. **Parameterized Queries**: Creating a function to execute queries with parameters.\n\nThe guide provides examples for each section, making it easy to follow and implement the code. The complete code for this tutorial is available on [GitHub](https://github.com/SusmeetJain/dune_api_python).",
      "questions": "1. **How do I pass my API key to the Dune API?**\n\n   You need to pass your API key in the header of your API calls. In the example provided, the API key is stored in a variable called `API_KEY`, and the header is created as a dictionary: `HEADER = {\"x-dune-api-key\" : API_KEY}`.\n\n2. **How can I execute a parameterized query using the Dune API?**\n\n   To execute a parameterized query, you need to create a dictionary containing the parameter values and pass it to the `execute_query_with_params` function along with the query ID. For example: `parameters = {\"wallet_address\" : \"0xb10f35351ff21bb81dc02d4fd901ac5ae34e8dc4\"}` and `execution_id = execute_query_with_params(\"638435\", parameters)`.\n\n3. **How can I cancel a query execution if it's taking too long?**\n\n   You can cancel a query execution by calling the `cancel_query_execution` function and passing the `execution_id` of the running query. For example: `response = cancel_query_execution(execution_id)`."
    },
    {
      "fileName": "api-ready-queries.md",
      "filePath": "docs\\api\\quick-start\\api-ready-queries.md",
      "url": "https://dune.com/blob/master/api\\quick-start\\api-ready-queries.md",
      "summary": "This app technical guide provides a list of queries that are ready for API use in the Dune Docs project. The guide is divided into four sections, each containing a query with its respective query ID, parameters, and output columns. The first query is for getting the ERC20 balances for a given address. The parameters include the address, block number, chain, and dust, while the output columns include the symbol, notional value, total value, and token price. The second query is for getting all the holders and their balances for a given ERC20 address. The parameters include the address, block number, and chain, while the output columns include the holder, holder_ens, notional value, total value, and token price. The third query is for getting the NFT balances for a given address. The parameters include the address, block number, and chain, while the output columns include the symbol, name, category, token_id, contract_address, acquired_how, and acquired_on_block_number. The fourth query is for getting all the holders and their balances for a given NFT address. The parameters include the address, block number, and chain, while the output columns include the holder, holder_ens, tokens_held, and token_ids. The guide also provides valid choices for each parameter and examples of how to use the queries. Overall, this guide serves as a reference for developers who want to use the Dune Docs API and provides them with the necessary information to use the queries effectively.",
      "questions": "1. What are the available EVM chains that this app supports?\n   - The available EVM chains that this app supports are `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n2. Can this app retrieve NFT balances and holders for non-EVM blockchains?\n   - No, this app can only retrieve NFT balances and holders for EVM blockchains.\n3. How often is the data updated for the balances and holders queries?\n   - The data is updated every ~3 minutes/15 blocks, as specified in the `blocknumber` parameter."
    },
    {
      "fileName": "community-clients.md",
      "filePath": "docs\\api\\quick-start\\community-clients.md",
      "url": "https://dune.com/blob/master/api\\quick-start\\community-clients.md",
      "summary": "# Community Clients\n\nThis guide provides a list of Dune API clients built by the community. It is focused on the `app` folder of the Dune Docs project. The purpose of this guide is to showcase the various API clients built by the community and provide instructions on how to install them. \n\nThe guide starts with a brief introduction to the API clients and a call to action for the community to share their own clients. It also includes a warning disclaimer that the clients are not directly maintained by the Dune team.\n\nThe guide then proceeds to list the various API clients available, including the Cow Protocol Python Client, Cow Protocol Typescript Client, Dune Go Client, and Dune Ruby Client. Each client is introduced with a brief description and the name of the developer who built it. The guide also includes links to the respective GitHub pages and installation instructions for each client.\n\nFor example, the Cow Protocol Python Client can be installed with a simple pip install command:\n\n```python\npip install dune-client\n```\n\nThe guide also includes a link to the client's GitHub page for more information on how it works. Similarly, the Dune Ruby Client can be installed by adding the following line to the Gemfile:\n\n```ruby\ngem \"dune\"\n```\n\nAnd then running `$ bundle install` from the terminal.\n\nOverall, this guide serves as a helpful resource for developers looking to use Dune API clients built by the community. It provides clear installation instructions and links to the relevant GitHub pages for more information.",
      "questions": "1. What is the purpose of the Dune Docs app?\n    \n    The app technical guide does not provide information on the purpose of the Dune Docs app, so a blockchain SQL analyst might have to look for additional documentation or context to understand the app's purpose.\n\n2. Are there any security concerns with using the community-built API clients?\n\n    The app technical guide mentions that the community-built API clients are not directly maintained by the Dune team, so a blockchain SQL analyst might want to investigate the security measures implemented by the community-built clients to ensure they are safe to use.\n\n3. Are there any limitations or restrictions on the usage of the API clients?\n\n    The app technical guide does not provide information on any limitations or restrictions on the usage of the API clients, so a blockchain SQL analyst might have to look for additional documentation or context to understand any potential limitations or restrictions."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\api\\quick-start\\index.md",
      "url": "https://dune.com/blob/master/api\\quick-start\\index.md",
      "summary": "# API Quick Start\n\nThis technical guide covers the quick start guides for using the API in the Dune Docs project. The purpose of this guide is to provide users with the necessary information to get started with the API quickly. \n\nThe guide starts by providing a link to example queries that can be used with the API. These queries include NFT or ERC20 balances or holders. This section is useful for users who want to quickly test the API and see how it works.\n\nThe guide also provides a link to a pipeline setup using Python and Celery. This section is useful for users who want to set up an ingestion pipeline and need guidance on how to do so.\n\nThe main section of the guide provides quick start guides for using the API with Python, Javascript, and community clients. These guides provide step-by-step instructions on how to get started with the API using these programming languages. \n\nFor example, the Python guide covers how to install the necessary packages, how to authenticate with the API, and how to make requests. The Javascript guide covers how to make requests using the fetch API and how to handle responses. The community clients guide covers how to use community-built clients to interact with the API.\n\nOverall, this technical guide is a useful resource for users who want to get started with the API quickly and efficiently. The guide provides clear and concise instructions for using the API with different programming languages and includes links to example queries and pipeline setups.",
      "questions": "1. What kind of data does this API provide access to?\n- The API provides access to example queries for NFT or ERC20 balances or holders, as well as quick start guides for Python, Javascript, and community clients.\n\n2. Are there any limitations or restrictions on the usage of this API?\n- The app technical guide does not mention any limitations or restrictions on API usage.\n\n3. Is there any information on how the API handles data security and privacy?\n- The app technical guide does not provide any information on how the API handles data security and privacy."
    }
  ],
  "folders": [],
  "summary": "The quick-start folder in the Dune Docs project focuses on providing users with a comprehensive guide to get started with the Dune API using different programming languages and tools. The guides in this folder are designed to help users quickly and efficiently set up their environment, authenticate with the API, and make requests to fetch data.\n\nFor example, the `api-js.md` guide provides a step-by-step tutorial on accessing the Dune API via JavaScript. It assumes users have some familiarity with Node.js, NPM, and NVM. The guide covers setting up the environment, installing the required packages, and provides example scripts for fetching data using simple and parameterized queries. This guide is useful for developers who prefer working with JavaScript and want to integrate the Dune API into their projects.\n\nSimilarly, the `api-py.md` guide covers accessing the Dune API using Python. It provides a detailed walkthrough on setting up the environment, installing necessary libraries, and creating functions to interact with the Dune API. This guide is beneficial for developers who prefer Python and want to fetch data from the Dune API for their projects.\n\nThe `api-ready-queries.md` guide offers a list of ready-to-use queries for the Dune API, including ERC20 and NFT balances and holders. This guide serves as a reference for developers who want to use the Dune API effectively and provides them with the necessary information to use the queries efficiently.\n\nThe `community-clients.md` guide showcases various Dune API clients built by the community, including Python, TypeScript, Go, and Ruby clients. It provides installation instructions and links to the respective GitHub pages for each client. This guide is helpful for developers who want to use community-built clients to interact with the Dune API.\n\nLastly, the `index.md` file serves as an overview of the quick-start guides, providing users with links to example queries, pipeline setups, and guides for using the API with Python, JavaScript, and community clients.\n\nOverall, the quick-start folder in the Dune Docs project is an essential resource for users who want to get started with the Dune API quickly and efficiently. The guides provide clear and concise instructions for using the API with different programming languages and include links to example queries and pipeline setups, making it easier for developers to integrate the Dune API into their projects.",
  "questions": ""
}