{
  "folderName": "quick-start",
  "folderPath": ".autodoc/docs/json/docs/api/quick-start",
  "url": "https://dune.com/.autodoc/docs/json/docs/api/quick-start",
  "files": [
    {
      "fileName": "api-js.md",
      "filePath": "docs/api/quick-start/api-js.md",
      "url": "https://dune.com/docs/api/quick-start/api-js.md",
      "summary": "This app technical guide provides a step-by-step guide on how to access the Dune API via JavaScript. The guide is not yet comprehensive, but it provides a starting point for developers who want to use the Dune API. The guide assumes that the reader has some level of familiarity with Node.js, Node Package Manager (NPM), and Node Version Manager (NVM). \n\nThe guide starts by showing one of the several ways the API can be consumed via JavaScript, using the `node-fetch` package. The guide also mentions that developers can use the native fetch functionality available in the newest LTS version of node, node 18. The guide provides an example of how to set up the environment and install the necessary packages. \n\nThe guide then provides an example of how to call the Dune API using a simple query that fetches a small set of data. The example query has the `query_id`, `1258228`. The guide shows how to replace `#! YOUR_API_KEY` with the Dune API key and add it to the `main.js` file in the project. The guide also provides an example of how to call a parameterized query that takes in a wallet address as a parameter. The example query has the `query_id`, `1258228`, and the guide shows how to pass an example address as a value to the `wallet_address` parameter. \n\nThe guide concludes by showing how to run the script from the command line and how to edit the Query URL to fetch data from any other Queries. The guide also provides a link to a Github repository where developers can find some code from the tutorial. \n\nOverall, this guide provides a useful starting point for developers who want to use the Dune API via JavaScript. The guide is easy to follow and provides clear examples of how to call the API using simple and parameterized queries.",
      "questions": "1. What is the Dune API and how does it relate to blockchain technology?\n- The app technical guide explains how to access the Dune API via JavaScript, but it does not provide information on what the Dune API is or how it relates to blockchain technology.\n\n2. Are there any security measures in place to protect user data when using the Dune API?\n- The app technical guide does not mention any security measures in place to protect user data when using the Dune API, which may be a concern for a blockchain SQL analyst.\n\n3. Are there any limitations or restrictions on the types of queries that can be executed using the Dune API?\n- The app technical guide provides examples of simple and parameterized queries that can be executed using the Dune API, but it does not mention any limitations or restrictions on the types of queries that can be executed."
    },
    {
      "fileName": "api-py.md",
      "filePath": "docs/api/quick-start/api-py.md",
      "url": "https://dune.com/docs/api/quick-start/api-py.md",
      "summary": "This app technical guide covers how to access the Dune API using Python. It provides a step-by-step guide to set up the environment, install necessary libraries, and create functions to interact with the Dune API. The guide assumes prior experience with Python and covers the following topics:\n\n1. **Getting Set Up**: Installing the `requests`, `pandas`, and `jupyter notebook` libraries using `pip`.\n2. **Importing Libraries**: Importing the `requests` and `pandas` libraries.\n3. **API Keys**: Setting up the API key and header for making API calls.\n4. **Simplifying URL Generation**: Creating a function to generate URLs for different API endpoints.\n5. **Wrapping API Endpoints in Functions**: Defining functions to execute queries, get query status, get query results, and cancel query execution.\n6. **Using the Dune API**: Demonstrating how to execute a query, get query execution status, get query results, and cancel query execution.\n7. **Parameterized Queries**: Defining a function to execute queries with parameters and demonstrating its usage.\n\nThe guide includes examples of function calls and their expected outputs, making it easy for users to follow along and interact with the Dune API using Python.",
      "questions": "1. **How do I pass my API key to the Dune API?**\n\n   You need to pass your API key in the header of your API calls. In the provided code, you can set your API key in the `API_KEY` variable and the header is set in the `HEADER` variable as `{\"x-dune-api-key\" : API_KEY}`.\n\n2. **How can I execute a parameterized query using the provided functions?**\n\n   You can use the `execute_query_with_params` function to execute a parameterized query. You need to pass the `query_id` and a dictionary containing the parameter values as arguments to this function.\n\n3. **How can I cancel the execution of a running query?**\n\n   You can use the `cancel_query_execution` function to cancel the execution of a running query. You need to pass the `execution_id` of the running query as an argument to this function."
    },
    {
      "fileName": "api-ready-queries.md",
      "filePath": "docs/api/quick-start/api-ready-queries.md",
      "url": "https://dune.com/docs/api/quick-start/api-ready-queries.md",
      "summary": "# API Ready Queries\n\nThis technical guide provides a list of queries that are ready for API use in the Dune Docs project. The guide contains four queries, each with a unique query ID that can be used in any of the API guides or can be forked and modified to create a new query ID for use in the API. \n\n## Get the ERC20 balances for a given address\n\nThis query provides the ERC20 token balances for a given address. The query ID is 1616880, and it requires the following parameters:\n\n- `address`: The address that you would like to get balances for. It must be a valid EVM address.\n- `blocknumber`: The cutoff block for checking balances. Use 0 if you want the most recent block, otherwise any block number that has been processed will work (~3 minute/15 block delay).\n- `chain`: The EVM chain you'd like to check balances for. Valid choices include `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n- `dust`: Keep or remove dust tokens (worth less than $0.01). Valid choices are `keep` or `remove`.\n\nThe output columns include:\n\n- `symbol`: The token symbol, if available.\n- `notional_value`: The notional amount of tokens held, rounded to 5 decimals.\n- `total_value`: The $USD value of tokens held, rounded to 3 decimals.\n- `token_price`: The $USD price of the token.\n\n## Get all the holders and their balances for a given ERC20 address\n\nThis query provides all the holders and their balances for a given ERC20 address. The query ID is 1618116, and it requires the following parameters:\n\n- `address`: The ERC20 token address you would like to get holders of. It must be a valid EVM address.\n- `blocknumber`: The cutoff block for checking balances. Use 0 if you want the most recent block, otherwise any block number that has been processed will work (~3 minute/15 block delay).\n- `chain`: The EVM chain you'd like to check balances for. Valid choices include `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n\nThe output columns include:\n\n- `holder`: The address of the holder.\n- `holder_ens`: The ENS of the holder address, if any.\n- `notional_value`: The notional amount of tokens held, rounded to 5 decimals.\n- `total_value`: The $USD value of tokens held, rounded to 3 decimals.\n- `token_price`: The $USD price of the token.\n\n## Get the NFT balances for a given address\n\nThis query provides the NFT balances for a given address. The query ID is 1617158, and it requires the following parameters:\n\n- `address`: The address that you would like to get balances for. It must be a valid EVM address.\n- `blocknumber`: The cutoff block for checking balances. Use 0 if you want the most recent block, otherwise any block number that has been processed will work (~3 minute/15 block delay).\n- `chain`: The EVM chain you'd like to check balances for. Valid choices include `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n\nThe output columns include:\n\n- `symbol`: The symbol of the NFT, if available.\n- `name`: The name of the NFT, if available.\n- `category`: The category of the NFT, if available.\n- `token_id`: The token ID of the NFT.\n- `contract_address`: The contract address of the NFT.\n- `acquired_how`: Whether the NFT was `minted` or `transferred/bought`.\n- `acquired_on_block_number`: The block number that the NFT was received on.\n\n## Get all the holders and their balances for a given NFT address\n\nThis query provides all the holders and their balances for a given NFT address. The query ID is 1618122, and it requires the following parameters:\n\n- `address`: The NFT address that you would like to get holders of. It must be a valid EVM address.\n- `blocknumber`: The cutoff block for checking balances. Use 0 if you want the most recent block, otherwise any block number that has been processed will work (~3 minute/15 block delay).\n- `chain`: The EVM chain you'd like to check balances for. Valid choices include `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n\nThe output columns include:\n\n- `holder`: The address of the holder.\n- `holder_ens`: The ENS of the holder address, if any.\n- `tokens_held`: The number of NFTs from this contract held.\n- `token_ids`: An array of all the token IDs held.",
      "questions": "1. What are the valid choices for the `chain` parameter in each of the queries?\n- Valid choices for the `chain` parameter in each of the queries are `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n\n2. What is the delay between block processing and when the `blocknumber` parameter can be used in each of the queries?\n- The delay between block processing and when the `blocknumber` parameter can be used in each of the queries is approximately 3 minutes or 15 blocks.\n\n3. What is the difference between the `notional_value` and `total_value` output columns in each of the queries?\n- The `notional_value` output column in each of the queries represents the notional amount of tokens or NFTs held, rounded to 5 decimals. The `total_value` output column represents the $USD value of tokens or NFTs held, rounded to 3 decimals."
    },
    {
      "fileName": "community-clients.md",
      "filePath": "docs/api/quick-start/community-clients.md",
      "url": "https://dune.com/docs/api/quick-start/community-clients.md",
      "summary": "# Community Clients\n\nThis section of the Dune Docs project provides a list of Dune API clients built by the community. The purpose of this guide is to showcase the work of the community and provide information on how to use these clients. \n\nThe guide starts with a warning disclaimer that the clients listed are not directly maintained by the Dune team. This is important information for users to be aware of before using any of the clients listed. \n\nThe guide then proceeds to list the API clients built by the community. Each client is described in detail, including the name of the client, the person or team who built it, and where it can be found. \n\nFor example, the Cow Protocol Python Client was built by [@bh2smith](https://dune.com/bh2smith) and the team at [Cow Protocol](https://dune.com/cowprotocol). It can be found on [PyPi](https://pypi.org/project/dune-client/). The guide provides a simple pip install command to get started quickly and a link to the client's GitHub page for more information. \n\nSimilarly, the Cow Protocol Typescript Client was also built by [@bh2smith](https://dune.com/bh2smith) and can be found on [npm](https://www.npmjs.com/package/@cowprotocol/ts-dune-client). The guide provides an example of how to install it using yarn. \n\nThe guide also lists a Go client built by Dune team member [@theedgeofrage](https://dune.com/theedgeofrage) and a Ruby client built by [@shellandbull](https://github.com/shellandbull). \n\nOverall, this guide provides valuable information for users who want to use Dune API clients built by the community. It showcases the work of the community and provides instructions on how to use these clients.",
      "questions": "1. What is the purpose of the Dune API clients listed in this technical guide?\n- The purpose of the Dune API clients is not explicitly stated in the technical guide, but it appears that they are built by the community to interact with the Dune API.\n\n2. Who maintains the Dune API clients listed in this technical guide?\n- The Dune team does not directly maintain the API clients listed in this technical guide. \n\n3. What programming languages are the Dune API clients built in?\n- The Dune API clients listed in this technical guide are built in Python, TypeScript, Go, and Ruby."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/api/quick-start/index.md",
      "url": "https://dune.com/docs/api/quick-start/index.md",
      "summary": "# API Quick Start Guide\n\nThe API Quick Start Guide is a part of the Dune Docs project and provides a quick and easy way to get started with the Dune Analytics API. The guide is designed to help users who are new to the API and want to quickly learn how to use it. \n\nThe guide covers the following topics:\n\n## Endpoints\n\nThe guide provides example queries for NFT or ERC20 balances or holders. Users can check out these endpoints to get started with the API.\n\n## Ingestion Pipeline\n\nThe guide provides a link to a Python and Celery-based ingestion pipeline for users who are setting up an ingestion pipeline. This pipeline can be used to extract, transform, and load data from the API.\n\n## Quick Start Guides\n\nThe guide provides quick start guides for Python, Javascript, and Community Clients. These guides provide step-by-step instructions on how to get started with the API using these programming languages. \n\nFor example, the Python guide provides instructions on how to install the Dune Analytics Python client, authenticate with the API, and make queries. \n\nOverall, the API Quick Start Guide is a useful resource for users who want to quickly get started with the Dune Analytics API. It provides clear and concise instructions on how to use the API and is a great starting point for users who are new to the API.",
      "questions": "1. What type of data does this API handle?\n- The API provides example queries for NFT or ERC20 balances or holders, which may be of interest to a blockchain SQL analyst.\n\n2. Are there any specific programming languages or tools recommended for working with this API?\n- The API offers quick start guides for Python and Javascript, as well as a community clients guide, which may be helpful for a blockchain SQL analyst looking to integrate with the API.\n\n3. Is there any information on how the API handles data ingestion and transformation?\n- The guide includes a link to a Python and Celery-based ingestion pipeline, which may be of interest to a blockchain SQL analyst looking to work with the API's data."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/docs/api/quick-start` folder contains a collection of app technical guides that focus on helping users get started with the Dune Analytics API. These guides cover various programming languages and provide step-by-step instructions on how to interact with the API, making it easy for users to fetch data and integrate it into their projects.\n\nFor example, the `api-js.md` guide provides a detailed walkthrough on how to access the Dune API using JavaScript. It assumes the reader has some familiarity with Node.js, NPM, and NVM. The guide demonstrates how to set up the environment, install necessary packages, and call the Dune API using simple and parameterized queries. This guide is particularly useful for developers who want to use the Dune API in their JavaScript projects.\n\nSimilarly, the `api-py.md` guide covers how to access the Dune API using Python. It provides instructions on setting up the environment, installing required libraries, and creating functions to interact with the Dune API. This guide is beneficial for users who prefer working with Python and want to fetch data from the Dune API for their projects.\n\nThe `api-ready-queries.md` guide offers a list of ready-to-use queries that can be consumed by the API. These queries cover various use cases, such as fetching ERC20 or NFT balances for a given address or retrieving all holders and their balances for a specific ERC20 or NFT address. Users can utilize these queries as a starting point and modify them according to their needs.\n\nThe `community-clients.md` guide showcases Dune API clients built by the community. It lists clients for different programming languages, such as Python, TypeScript, Go, and Ruby, along with their creators and installation instructions. This guide is valuable for users who want to use community-built clients to interact with the Dune API.\n\nLastly, the `index.md` guide serves as an API Quick Start Guide, providing an overview of the available guides and resources for users who are new to the Dune Analytics API. It directs users to the appropriate guides based on their preferred programming language and use case.\n\nOverall, the guides in this folder are designed to help users quickly get started with the Dune Analytics API, regardless of their programming language preference. They provide clear instructions, examples, and resources to make it easy for users to fetch data from the API and integrate it into their projects.",
  "questions": ""
}