{
  "folderName": "FAQ",
  "folderPath": "docs/api/FAQ",
  "url": "https://dune.com/docs/api/FAQ",
  "files": [
    {
      "fileName": "TOS.md",
      "filePath": "docs/api/FAQ/TOS.md",
      "url": "https://dune.com/docs/api/FAQ/TOS.md",
      "summary": "# Dune API TOS\n\nThis section of the app technical guide covers the Dune API Terms of Service (TOS). The TOS outlines the rules and guidelines for using the Dune API. It is important for developers to understand and comply with these terms in order to use the API effectively and avoid any legal issues.\n\nThe header provides a link to the actual API TOS document, which is hosted on the Dune website. Developers should review this document thoroughly before using the API.\n\nExample:\n\n```\n// Make a request to the Dune API\nfetch('https://api.dune.com/data')\n  .then(response => {\n    // Handle response\n  })\n  .catch(error => {\n    // Handle error\n  });\n```\n\n# Authentication\n\nThis section covers the authentication process for accessing the Dune API. Developers must obtain an API key in order to access the API. The header provides an overview of the authentication process and links to additional resources for obtaining an API key.\n\nExample:\n\n```\n// Set API key as authorization header\nconst headers = {\n  'Authorization': 'Bearer YOUR_API_KEY_HERE'\n};\n\n// Make a request to the Dune API with headers\nfetch('https://api.dune.com/data', { headers })\n  .then(response => {\n    // Handle response\n  })\n  .catch(error => {\n    // Handle error\n  });\n```\n\n# Rate Limiting\n\nThis section covers the rate limiting policy for the Dune API. The API has a limit on the number of requests that can be made within a certain time period. The header provides an overview of the rate limiting policy and links to additional resources for understanding and managing rate limits.\n\nExample:\n\n```\n// Check if rate limit has been reached\nif (response.headers.get('X-RateLimit-Remaining') === '0') {\n  // Handle rate limit reached error\n}\n```\n\nOverall, this app technical guide provides important information for developers using the Dune API. It covers the API TOS, authentication process, and rate limiting policy, which are all crucial aspects of using the API effectively and responsibly.",
      "questions": "1. What specific APIs does Dune Docs offer and what are their respective terms of service?\n- The app technical guide only provides a link to the API terms of service page, so a blockchain SQL analyst may want to know more about the specific APIs offered by Dune Docs and their corresponding terms of service.\n\n2. Does Dune Docs have any restrictions or limitations on the usage of their APIs?\n- The app technical guide does not provide any information on restrictions or limitations on API usage, so a blockchain SQL analyst may want to know if there are any such restrictions in place.\n\n3. Is there any documentation available on how to integrate Dune Docs APIs into a blockchain SQL project?\n- The app technical guide only provides a link to the API terms of service page, so a blockchain SQL analyst may want to know if there is any additional documentation available on how to integrate Dune Docs APIs into their project."
    },
    {
      "fileName": "billing-pricing.md",
      "filePath": "docs/api/FAQ/billing-pricing.md",
      "url": "https://dune.com/docs/api/FAQ/billing-pricing.md",
      "summary": "# Dune API Billing & Pricing\n\nThis technical guide provides information about Dune's API billing and pricing. It covers the following topics:\n\n## FAQ: Billing & Pricing\n\nThis section provides answers to frequently asked questions about Dune's API billing and pricing.\n\n### How will API Billing work with the new Team plans?\n\nThis question addresses the upcoming support for API keys on a team level in the first few months of 2023. The answer explains that any usage associated with a team API key will be billed to their respective team.\n\n### Whatâ€™s a datapoint?\n\nThis question defines a datapoint as rows multiplied by columns with an additional limit of 50 average bytes per cell in a set of results. The formula for calculating datapoints is also provided.\n\n### Do I get charged datapoints for every execution?\n\nThis question clarifies that Dune charges datapoints for the first read result of every distinct query execution and every subsequent 100th read per billing cycle.\n\nOverall, this technical guide provides important information about Dune's API billing and pricing. It is particularly useful for developers who are building applications that use Dune's API and need to understand how they will be charged for their usage. The guide is concise and easy to understand, with clear explanations and examples where appropriate.",
      "questions": "1. What is the pricing model for Dune API and how is it calculated?\nA blockchain SQL analyst might want to know more about the pricing model for Dune API and how it is calculated based on the usage of datapoints and query executions.\n\n2. How does Dune handle billing for multiple API keys associated with a team?\nA blockchain SQL analyst might want to know how Dune handles billing for multiple API keys associated with a team and if there are any limitations or restrictions.\n\n3. Is there a limit on the number of datapoints that can be used in a single query execution?\nA blockchain SQL analyst might want to know if there is a limit on the number of datapoints that can be used in a single query execution and if there are any additional charges for exceeding that limit."
    },
    {
      "fileName": "functionality.md",
      "filePath": "docs/api/FAQ/functionality.md",
      "url": "https://dune.com/docs/api/FAQ/functionality.md",
      "summary": "# Dune API Functionality\n\nThis technical guide provides answers to frequently asked questions about how the Dune API works. The guide is divided into different sections based on the feature of the project app that the file is focused on. \n\n## General\n\nThis section provides general information about the Dune API.\n\n### Requests Per Minute\n\nThe API is currently set to a rate limit of 60 requests per minute. However, this will soon be set to match the rate limits specified in the varying API plan tiers.\n\n### SLAs\n\nSLAs will be available in the future on Enterprise pricing plans.\n\n## Executing Queries\n\nThis section provides information on how to execute queries using the Dune API.\n\n### Query ID\n\nTo find a query ID, navigate to a query, and it's the first number after \"/queries/\" in the URL. An example is provided in the guide.\n\n### Query Parameters\n\nThe API supports query parameters. For Dune Queries that include parameters, you can pass parameter data as part of the Execute Query ID endpoint. The guide provides links to learn more about building Dune Queries with parameters and how to pass parameter data using cURL and Python.\n\n### Performance and Differences\n\nThere are no major performance differences or differences in what can be accessed between the Dune API and the Dune web app if both are using the same app plan tier. The Dune API gives you programmatic access to the capabilities and data sets that can already be accessed from the Dune web app.\n\n### Execution Timeout Limit\n\nThe query execution timeout limit matches the Dune web app, which is 30 minutes.\n\n### Query Engine\n\nThe guide recommends using the API with v2 Dune SQL as the old v1 engine and v2 Spark SQL are slowly being deprecated.\n\n## Check Execution Status\n\nThis section provides information on how to check the execution status of a query.\n\n### States\n\nPending means the execution is waiting for an available execution connection slot, while executing means the query is currently executing against the database.\n\n## Reading Results Data\n\nThis section provides information on how to read results data from a query.\n\n### Direct Connection to the Database\n\nCurrently, it's not possible to ingest data by getting a direct connection to the database. In the interim, the guide recommends periodically fetching from \"max(latestBlockNumber) - 2\" to \"lastFetchedBlockNumber\" in regular intervals.\n\n### Query Results Data\n\nQuery results data is saved for faster retrieval.\n\n### Results Data Storage\n\nThe results data from an execution is currently stored for two years, but this may be reduced to something closer to 90 days in the future. This is visible on the API response on the \"expires_at\" field in the execution status and results body.\n\n### Retrieving Data\n\nThere is currently a 250MB limit on how much data can be retrieved in a single API result call. However, there is a chance this may increase for certain paid plans. The API does not currently return an explicit error upon hitting this limit but will instead fail (timeout) when attempting to retrieve the results.",
      "questions": "1. What is the rate limit for the Dune API and will it change in the future?\n- The API is currently set to a rate limit of 60 requests per minute, but it will soon be set to match the rate limits specified in the varying API plan tiers.\n\n2. What is the execution timeout limit for queries and can it be extended?\n- The query execution timeout limit matches the Dune web app, which is 30 minutes. It is not mentioned whether it can be extended.\n\n3. Is there a limit to how much data can be retrieved in a single API result call?\n- Yes, there is currently a 250MB limit, but there is a chance it may be increased for certain paid plans. The API does not currently return an explicit error upon hitting this limit but will instead fail (timeout) when attempting to retrieve the results."
    },
    {
      "fileName": "other.md",
      "filePath": "docs/api/FAQ/other.md",
      "url": "https://dune.com/docs/api/FAQ/other.md",
      "summary": "# Dune API Other FAQs\n\nThis section of the Dune Docs app technical guide provides answers to frequently asked questions about how the Dune API works. The purpose of this guide is to provide additional information and clarification on the Dune API beyond what is covered in the main API documentation.\n\nThe guide starts by providing contact information for users who have additional questions or feedback about the Dune API. Users can reach out to api-feedback@dune.com or join the #dune-api channel on Discord for assistance.\n\nThe guide then proceeds to answer various questions about the Dune API, such as how to authenticate requests, how to handle rate limiting, and how to handle errors. Each question is addressed in a separate section, with clear and concise explanations provided.\n\nFor example, the section on authentication explains the different authentication methods supported by the Dune API, such as API keys and OAuth 2.0. It also provides examples of how to authenticate requests using each method.\n\nOverall, this guide serves as a helpful resource for users who want to learn more about the Dune API and how to use it effectively. By providing clear and concise answers to common questions, it helps users avoid common pitfalls and get the most out of the API.",
      "questions": "1. What specific functionalities does the Dune API offer for blockchain data analysis?\n- This information is not provided in the app technical guide and would require further research or communication with the Dune team.\n\n2. Are there any limitations or restrictions on the amount or type of data that can be accessed through the Dune API?\n- This information is not provided in the app technical guide and would require further research or communication with the Dune team.\n\n3. How does the Dune API handle data privacy and security for blockchain data analysis?\n- This information is not provided in the app technical guide and would require further research or communication with the Dune team."
    }
  ],
  "folders": [],
  "summary": "The `docs/api/FAQ` folder contains a collection of technical guides that provide detailed information and answers to frequently asked questions about the Dune API. These guides are essential for developers who are building applications using the Dune API and need to understand various aspects of the API, such as authentication, rate limiting, billing, pricing, and functionality.\n\nThe `TOS.md` file covers the Dune API Terms of Service (TOS), which outlines the rules and guidelines for using the API. Developers must understand and comply with these terms to use the API effectively and avoid legal issues. The guide also provides examples of how to authenticate requests and handle rate limiting.\n\nThe `billing-pricing.md` file provides information about Dune's API billing and pricing, including answers to frequently asked questions. This guide is particularly useful for developers who need to understand how they will be charged for their API usage. For example, the guide explains what a datapoint is and how it is calculated, as well as how API billing will work with the new Team plans.\n\nThe `functionality.md` file answers frequently asked questions about how the Dune API works, such as the rate limits, SLAs, executing queries, query parameters, performance differences, execution timeout limits, and query engines. This guide is essential for developers who want to learn more about the API's capabilities and limitations. For instance, the guide explains how to find a query ID, pass query parameters, and check the execution status of a query.\n\nThe `other.md` file provides additional information and clarification on the Dune API beyond what is covered in the main API documentation. This guide addresses various questions about authentication, rate limiting, and error handling. For example, it explains the different authentication methods supported by the Dune API and how to authenticate requests using each method.\n\nOverall, the guides in this folder are crucial for developers working with the Dune API, as they provide in-depth information on various aspects of the API. By understanding the contents of these guides, developers can avoid common pitfalls and get the most out of the API, ensuring that their applications work seamlessly with the Dune platform.",
  "questions": ""
}