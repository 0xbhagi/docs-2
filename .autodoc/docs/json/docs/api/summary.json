{
  "folderName": "api",
  "folderPath": ".autodoc\\docs\\json\\docs\\api",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\api",
  "files": [
    {
      "fileName": "index.md",
      "filePath": "docs\\api\\index.md",
      "url": "https://dune.com/blob/master/api\\index.md",
      "summary": "# Dune API Technical Guide\n\nThe Dune API Technical Guide is a documentation for developers who want to use the Dune API. The guide provides an overview of the API and how it works, as well as instructions on how to get started with the API. \n\nThe guide starts with an introduction to the Dune API, which gives developers full access to the queries and data available on the Dune website. The API allows users to execute and read results from any public query, as well as any personal private queries that their Dune account has access to. The guide also provides a link to the Discord channel where developers can ask questions or provide feedback.\n\nThe guide then explains how the API works, which includes executing a query, checking the status of an execution, and getting the results of an execution. The results are stored separately from anything visible on the Dune website, so the only way to get query results from the Dune API is to execute a query using the API. The results from API executions are not currently reflected on Dune’s website.\n\nThe guide provides instructions on how to get started with the API, which includes obtaining an API key after purchasing an app plan and API package. The API key can be found in the user's settings page. The guide also provides quick start guides for Python and Node.js, as well as links to community clients available for the API.\n\nFinally, the guide provides important links to the API documentation, the Discord channel, and the API client (community sourced). \n\nOverall, the Dune API Technical Guide is a comprehensive documentation that provides developers with all the information they need to use the Dune API.",
      "questions": "1. What kind of data can be queried using the Dune API?\n   - The Dune API gives full access to the queries and data visible on the Dune website, including both public and private queries.\n2. How are query results stored and accessed through the API?\n   - Query results are stored separately from the Dune website and can only be accessed by executing a query using the Dune API.\n3. What programming languages are supported for consuming the Dune API?\n   - The Dune API can be consumed in any programming language, but quick start guides are currently available for Python and Node.js. Community clients are also available."
    }
  ],
  "folders": [
    {
      "folderName": "api-reference",
      "folderPath": ".autodoc\\docs\\json\\docs\\api\\api-reference",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\api\\api-reference",
      "files": [
        {
          "fileName": "authentication.md",
          "filePath": "docs\\api\\api-reference\\authentication.md",
          "url": "https://dune.com/blob/master/api\\api-reference\\authentication.md",
          "summary": "# Authentication\n\nThis section of the Dune Docs technical guide covers how to authenticate API requests for the Dune API. The guide emphasizes the importance of keeping API keys secure and not sharing them in publicly accessible areas. \n\nTo authenticate requests, the Dune API uses API keys. These keys are used to determine the permissions of private queries and which account to bill for the requests. The guide provides an example of how to add an \"x-dune-api-key\" property to the request header for authentication. This property is required for all request types. \n\nThe guide also includes an example of how to perform authentication with an Execute POST API request using cURL. \n\nOverall, this section of the technical guide is important for developers working with the Dune API to ensure that their requests are properly authenticated and secure.",
          "questions": "1. What type of authentication does the Dune API use?\n   - The Dune API uses API keys to authenticate requests.\n\n2. What is the purpose of the \"x-dune-api-key\" property in the request header?\n   - The \"x-dune-api-key\" property is used for authentication with the API and is needed on all request types.\n\n3. What precautions should be taken with API keys?\n   - API keys should be kept secure and not shared in publicly accessible areas such as GitHub or client-side code."
        },
        {
          "fileName": "cancel-execution.md",
          "filePath": "docs\\api\\api-reference\\cancel-execution.md",
          "url": "https://dune.com/blob/master/api\\api-reference\\cancel-execution.md",
          "summary": "The app technical guide covers the process of canceling execution requests in the Dune API. The guide is located in the `app` folder of the Dune Docs project. The guide provides a detailed explanation of how to cancel an execution request, including the arguments required, the expected return value, and examples of how to make a request using cURL or a POST request. \n\nThe guide starts with a brief introduction to the Cancel Execution API, followed by a header for the POST request method. The POST request method is used to cancel an execution request. The header provides a brief description of the method and what it does. \n\nThe next header is Arguments, which explains that no arguments are required for the Cancel Execution API. \n\nThe Returns header explains that the API returns a boolean value indicating whether the execution was successfully canceled. \n\nThe Example Request header provides an example of how to make a request to the Cancel Execution API. The example shows how to pass the `execution_id` obtained from making an Execute Query ID POST request to complete a Cancel Execution API request. \n\nThe cURL header provides an example of how to make a request using cURL. The example shows how to use the `-X POST` flag to specify the POST request method, and how to pass the `execution_id` and `api_key` as parameters. \n\nThe Example Response header provides an example of what the response from the Cancel Execution API looks like. The response is delivered in JSON format and contains a `success` boolean value indicating whether the request to cancel the query execution was made successfully. \n\nOverall, the Cancel Execution API technical guide provides a comprehensive explanation of how to cancel execution requests in the Dune API. The guide is useful for developers who need to cancel execution requests and provides clear examples of how to make requests using different methods.",
          "questions": "1. What is the purpose of the Dune API and how does it relate to blockchain technology?\n- This app technical guide does not provide information on the purpose of the Dune API or its relation to blockchain technology.\n\n2. Can the Cancel Execution API request be used to cancel multiple execution requests at once?\n- The app technical guide does not provide information on whether the Cancel Execution API request can be used to cancel multiple execution requests at once.\n\n3. Are there any limitations or restrictions on canceling execution requests using the Dune API?\n- The app technical guide does not provide information on any limitations or restrictions on canceling execution requests using the Dune API."
        },
        {
          "fileName": "errors.md",
          "filePath": "docs\\api\\api-reference\\errors.md",
          "url": "https://dune.com/blob/master/api\\api-reference\\errors.md",
          "summary": "This app technical guide covers how to handle errors that may occur when working with the Dune API. The guide is divided into two main sections: Invalid API Key and An Internal Error Occurred. Each section provides a response object and a list of checks to help users troubleshoot the issue. \n\nThe Invalid API Key section provides a response object of {'error': 'invalid API Key'} and two checks to help users resolve the issue. The first check is to ensure that the API key is passed to the endpoint in a header, as described in the Authentication section. The second check is to ensure that the API key is correctly entered. \n\nThe An Internal Error Occurred section provides a response object of {'error': 'An internal error occurred'} and two checks to help users resolve the issue. The first check is to ensure that the query_id entered for GET endpoints is correct. The second check is to ensure that the execution_id obtained from the GET endpoint is correctly passed on to the POST endpoint for POST endpoints. \n\nThe guide also includes a note that if users find the guide too technical or confusing, they can reach out to the Dune API team for support on the #dune-api Discord channel. \n\nOverall, this guide is a helpful resource for users of the Dune API who may encounter errors and need guidance on how to resolve them.",
          "questions": "1. What is the Dune API and how does it relate to blockchain technology?\n- The app technical guide does not provide information on what the Dune API is or how it relates to blockchain technology.\n\n2. Are there any specific error codes related to blockchain transactions or smart contracts?\n- The app technical guide does not provide information on specific error codes related to blockchain transactions or smart contracts.\n\n3. Is there any guidance on how to troubleshoot errors related to data retrieval or manipulation?\n- The app technical guide provides some guidance on how to troubleshoot errors related to data retrieval or manipulation, but it is not exhaustive and may not cover all possible scenarios."
        },
        {
          "fileName": "execute-query-id.md",
          "filePath": "docs\\api\\api-reference\\execute-query-id.md",
          "url": "https://dune.com/blob/master/api\\api-reference\\execute-query-id.md",
          "summary": "# Explanation of the App Technical Guide\n\nThe app technical guide is a documentation for the Dune Docs project, which explains how to execute a query with or without parameters to retrieve data. The guide is focused on the `query` folder of the project. \n\nThe guide starts with a header that explains the purpose of the file, which is to execute a query ID. The header is followed by a section that explains how to execute a query with or without parameters to retrieve data. \n\nThe next section of the guide explains the arguments required to execute the query. In this case, no arguments are required, but query parameters can be added optionally. The guide provides an example of how to add query parameters using cURL. \n\nThe guide then explains what the API returns when the query is executed. In this case, the API returns an `execution_id` for the specified request. The guide provides an example of what the response looks like in JSON format. \n\nThe guide also provides an example request using cURL to execute the query. The example request includes the API endpoint and the query ID. The guide also provides an example of how to execute the query with parameters using cURL. \n\nFinally, the guide explains what the `execution_id` and `state` mean in the response. The `execution_id` is a unique ID that is generated every time the API is called, and the `state` is the current state of the query's execution. \n\nOverall, the app technical guide provides a detailed explanation of how to execute a query with or without parameters to retrieve data. The guide is focused on the `query` folder of the Dune Docs project and provides examples of how to use cURL to execute the query.",
          "questions": "1. What is the purpose of the `execution_id` returned by the API?\n   \n   The `execution_id` is a unique ID generated every time the API is called, and it can be saved to pass on to other API endpoints.\n\n2. Can this API be used to execute queries on a blockchain database?\n   \n   The app technical guide does not provide information on whether this API can be used to execute queries on a blockchain database or not.\n\n3. Are there any limitations on the number or size of query parameters that can be passed to the API?\n   \n   The app technical guide does not provide information on any limitations on the number or size of query parameters that can be passed to the API."
        },
        {
          "fileName": "execution-results.md",
          "filePath": "docs\\api\\api-reference\\execution-results.md",
          "url": "https://dune.com/blob/master/api\\api-reference\\execution-results.md",
          "summary": "This technical guide covers how to get the results data of an execution request in the Dune Docs project. The guide provides information on how to use the Execution Results API to retrieve the status, metadata, and query results from a query execution. The guide includes a detailed explanation of the arguments and returns of the API, as well as an example request and response in JSON and CSV formats. \n\nThe guide also provides information on the different properties of the query execution, such as the execution ID, query ID, state, submitted_at, expires_at, execution_started_at, and execution_ended_at. Additionally, the guide explains the properties of the result, including rows and metadata, such as column_names, result_set_bytes, total_row_count, datapoint_count, pending_time_millis, and execution_time_millis. \n\nThe guide also includes a FAQ section that answers common questions about reading results data, such as whether data can be ingested by getting a direct connection to the database, whether query results data are saved for faster retrieval, how long the results data from an execution are stored for, and how much data can be retrieved in a single API result call. \n\nOverall, this guide provides a comprehensive overview of how to use the Execution Results API to retrieve query execution results in the Dune Docs project.",
          "questions": "1. What is the purpose of the Dune Docs app and how does it relate to blockchain technology?\n   \n   Answer: The app technical guide does not provide information on the purpose of the Dune Docs app or its relation to blockchain technology. Further documentation or context is needed to answer this question.\n\n2. How does the app handle security and authentication for API requests, particularly for sensitive data related to blockchain transactions?\n   \n   Answer: The app technical guide does not provide information on security and authentication for API requests. Further documentation or context is needed to answer this question.\n\n3. What is the maximum number of rows or datapoints that can be retrieved in a single API result call, and how does this limit impact the app's usability for analyzing large datasets related to blockchain transactions?\n   \n   Answer: The app technical guide states that there is currently a 1GB limit on the amount of data that can be retrieved in a single API result call. However, it is unclear how this limit impacts the app's usability for analyzing large datasets related to blockchain transactions. Further documentation or context is needed to answer this question."
        },
        {
          "fileName": "execution-status.md",
          "filePath": "docs\\api\\api-reference\\execution-status.md",
          "url": "https://dune.com/blob/master/api\\api-reference\\execution-status.md",
          "summary": "# Execution Status\n\nThis technical guide explains how to check the status of an execution request in the Dune Docs project. The guide is focused on the `app` folder of the project. The guide provides a detailed explanation of the `GET` Execution Status API request, including its arguments, returns, example request, and example response.\n\nThe Arguments section of the guide explains that no arguments are required for the API request. The Returns section explains that the API request returns the status of a query execution along with relevant metadata of the results if the execution is completed.\n\nThe Example Request section provides an example of how to pass the `execution_id` obtained from making an Execute Query ID POST request to complete an Execution Status API request. The example shows the endpoint URL and the cURL command to make the request.\n\nThe Example Response section provides two examples of the JSON response that the API request returns. The first example shows the response when the query is still executing, while the second example shows the response when the execution is complete. The section explains the meaning of each property in the response, including `execution_id`, `query_id`, `state`, `submitted_at`, `expires_at`, `execution_started_at`, `execution_ended_at`, and `result_metadata`.\n\nThe guide also includes a Check Execution Status FAQ section that answers common questions about the different status codes for `state`. The section explains the difference between the states \"Executing\" and \"Pending\" and provides a list of all status codes for reference.\n\nOverall, this technical guide provides a comprehensive explanation of how to check the status of an execution request in the Dune Docs project. It is a useful resource for developers who need to monitor the progress of their query executions.",
          "questions": "1. What is the purpose of this API and how does it relate to blockchain technology?\n   - This API is used to check the status of a query execution request. It is not directly related to blockchain technology, but it could potentially be used in conjunction with blockchain data queries.\n2. What authentication methods are required to use this API?\n   - The cURL example shows that an API key is required to make requests to this API. It is unclear from this documentation whether any other authentication methods are supported.\n3. Are there any limitations on the size or complexity of queries that can be executed using this API?\n   - The documentation does not provide any information on limitations for query size or complexity. A blockchain SQL analyst may need to test the API with various query types and sizes to determine any potential limitations."
        },
        {
          "fileName": "index.md",
          "filePath": "docs\\api\\api-reference\\index.md",
          "url": "https://dune.com/blob/master/api\\api-reference\\index.md",
          "summary": "# API Reference\n\nThis section of the Dune Docs project covers the API endpoints and common errors that may occur when using them. The purpose of this guide is to provide developers with a comprehensive understanding of the API and how to use it effectively.\n\n## Authentication\n\nThis header covers the authentication process for accessing the API. It explains the different authentication methods available and how to use them. For example, it may include information on how to generate an API key or how to use OAuth to authenticate requests.\n\n## Execute Query ID\n\nThis header covers the endpoint for executing a query by ID. It explains how to use this endpoint to execute a query and retrieve the results. It may include information on the expected input parameters and the format of the response.\n\n## Execution Status\n\nThis header covers the endpoint for checking the status of a query execution. It explains how to use this endpoint to retrieve the status of a query execution and what the different status codes mean. It may also include information on how to handle errors that may occur during the execution process.\n\n## Execution Results\n\nThis header covers the endpoint for retrieving the results of a query execution. It explains how to use this endpoint to retrieve the results of a query and what the different response formats are. It may also include information on how to handle errors that may occur when retrieving the results.\n\n## Cancel Execution\n\nThis header covers the endpoint for canceling a query execution. It explains how to use this endpoint to cancel a query that is currently executing and what the expected response is. It may also include information on how to handle errors that may occur when canceling a query.\n\n## Error Codes\n\nThis header covers the different error codes that may be returned by the API. It explains what each error code means and how to handle it. It may also include information on how to troubleshoot common errors that may occur when using the API.\n\nExample: If a developer encounters an error code when using the API, they can refer to this section of the guide to understand what the error means and how to resolve it.\n\nOverall, this API Reference guide provides developers with a comprehensive understanding of the API endpoints and common errors that may occur when using them. It is a valuable resource for anyone looking to integrate with the Dune Docs API.",
          "questions": "1. What type of data is being accessed through the API endpoints listed in this technical guide?\n- It is unclear from this technical guide what type of data is being accessed through the API endpoints. \n\n2. Are there any security measures in place to protect the data being accessed through the API endpoints?\n- It is unclear from this technical guide whether there are any security measures in place to protect the data being accessed through the API endpoints. \n\n3. Is there any information on how to handle errors that may occur when using the API endpoints?\n- Yes, there is information on how to handle errors that may occur when using the API endpoints in the \"Error Codes\" section."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc\\docs\\json\\docs\\api\\api-reference` folder contains a collection of technical guides that provide comprehensive information on how to interact with the Dune API. These guides cover various aspects of the API, such as authentication, executing queries, checking execution status, retrieving results, and handling errors. The primary focus of these guides is on the `api` folder of the Dune Docs project.\n\nFor example, the `authentication.md` guide explains the importance of securing API keys and demonstrates how to add the \"x-dune-api-key\" property to the request header for proper authentication. This guide is essential for developers to ensure their API requests are secure and properly authenticated.\n\nThe `execute-query-id.md` guide provides a detailed explanation of how to execute a query with or without parameters to retrieve data. It includes examples of how to use cURL to execute the query, making it a valuable resource for developers looking to retrieve data from the Dune API.\n\nThe `execution-status.md` guide offers a comprehensive explanation of how to check the status of an execution request. It includes example requests and responses, as well as a FAQ section that answers common questions about the different status codes for query execution states. This guide is particularly useful for developers who need to monitor the progress of their query executions.\n\nThe `execution-results.md` guide covers how to retrieve the results data of an execution request. It provides information on the different properties of the query execution and the result, as well as a FAQ section that answers common questions about reading results data.\n\nThe `cancel-execution.md` guide explains the process of canceling execution requests in the Dune API. It provides a detailed explanation of how to cancel an execution request, including the arguments required, the expected return value, and examples of how to make a request using cURL or a POST request.\n\nLastly, the `errors.md` guide helps users handle errors that may occur when working with the Dune API. It provides response objects and troubleshooting steps for common errors, such as Invalid API Key and An Internal Error Occurred.\n\nOverall, the guides in the `.autodoc\\docs\\json\\docs\\api\\api-reference` folder provide a comprehensive understanding of the Dune API and its various features. These guides are essential for developers looking to integrate with the Dune API and work effectively with its endpoints and functionalities.",
      "questions": ""
    },
    {
      "folderName": "FAQ",
      "folderPath": ".autodoc\\docs\\json\\docs\\api\\FAQ",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\api\\FAQ",
      "files": [
        {
          "fileName": "billing-pricing.md",
          "filePath": "docs\\api\\FAQ\\billing-pricing.md",
          "url": "https://dune.com/blob/master/api\\FAQ\\billing-pricing.md",
          "summary": "# Dune API Billing & Pricing\n\nThis technical guide provides information about Dune's API billing and pricing. It covers the following topics:\n\n## FAQ: Billing & Pricing\n\nThis section provides answers to frequently asked questions about Dune's API billing and pricing.\n\n### How will API Billing work with the new Team plans?\n\nThis header explains that Dune will soon support API keys on a team level in the first few months of 2023. Any usage associated with a team API key will be billed to their respective team. This feature is relevant to the app folder of the project, as it pertains to the billing and pricing of the API.\n\n### What’s a datapoint?\n\nThis header defines a datapoint as rows * columns with an additional limit of 50 avg bytes per cell in a set of results. It also provides a formula to express datapoints. This information is relevant to the data tables folder of the project, as it pertains to the calculation of datapoints.\n\n### Do I get charged datapoints for every execution?\n\nThis header explains that Dune charges datapoints in the result for the 1st read result of every distinct query execution and every subsequent 100th read per billing cycle. This information is relevant to the query folder of the project, as it pertains to the billing and pricing of query executions.\n\nOverall, this technical guide provides important information about Dune's API billing and pricing, including how it works with team plans, how datapoints are calculated, and how they are charged for query executions.",
          "questions": "1. What is the pricing model for Dune's API and how is it calculated?\nA blockchain SQL analyst might want to know more about the specific pricing model for Dune's API and how it is calculated based on usage and datapoints.\n\n2. How does Dune handle data privacy and security for API billing and pricing?\nA blockchain SQL analyst might be interested in understanding how Dune ensures data privacy and security for API billing and pricing, especially if sensitive data is being transmitted.\n\n3. Are there any limitations or restrictions on the number of API calls or datapoints that can be used per billing cycle?\nA blockchain SQL analyst might want to know if there are any limitations or restrictions on the number of API calls or datapoints that can be used per billing cycle, as this could impact the cost and feasibility of using Dune's API for their blockchain project."
        },
        {
          "fileName": "functionality.md",
          "filePath": "docs\\api\\FAQ\\functionality.md",
          "url": "https://dune.com/blob/master/api\\FAQ\\functionality.md",
          "summary": "# Dune API Functionality\n\nThis technical guide provides answers to frequently asked questions about how the Dune API works. The guide is divided into sections that cover different aspects of the Dune API functionality. \n\n## General\n\nThis section provides general information about the Dune API.\n\n### How many Requests Per Minute can I make?\n\nThe API is currently set to a rate limit of 60 requests per minute. \n\n### Are there specified SLAs?\n\nSLAs will be available in the future on Enterprise pricing plans.\n\n## Executing Queries\n\nThis section provides information on how to execute queries using the Dune API.\n\n### How do I find a query id?\n\nWhen navigating to a query, it’s the first number after “/queries/” in the URL. An example is provided in the guide.\n\n### Does the API support Query Parameters?\n\nThe API does support Query Parameters. The guide provides information on how to pass parameter data using cURL and Python.\n\n### What are the performance and overall differences between the Dune API and the Dune web app? What are the differences in what I can query?\n\nThere are no major performance differences or differences in what can be accessed between the two if both are using the same app plan tier. The Dune API gives you programmatic access to the capabilities and data sets that can already be accessed from the Dune web app.\n\n### What is the execution timeout limit and can I request a longer limit?\n\nThe query execution timeout limit matches the Dune web app - 30 minutes.\n\n### Which query engine should I use with the API?\n\nThe guide recommends using the API with v2 Dune SQL as the old v1 engine and v2 Spark SQL are being deprecated.\n\n## Check Execution Status\n\nThis section provides information on how to check the execution status of a query.\n\n### What is the difference between the states “Executing” and “Pending”?\n\nPending means the execution is waiting for an available execution connection slot. Executing means the query is currently executing against the database.\n\n## Reading Results Data\n\nThis section provides information on how to read results data from a query.\n\n### Can I ingest data by getting a direct connection to the database instead?\n\nNot currently. In the interim, the guide recommends periodically fetching data in regular intervals.\n\n### Are query results data saved for faster retrieval?\n\nYes!\n\n### How long are the results data from an execution stored for?\n\nCurrently set to 2 years but may be reduced to something closer to 90 days in the future.\n\n### How much data can I retrieve in a single API result call?\n\nThere is currently a 250MB limit, but there is a chance this may increase for certain paid plans. The API does not currently return an explicit error upon hitting this limit but will instead fail (timeout) when attempting to retrieve the results.",
          "questions": "1. What is the maximum rate limit for requests per minute and will it change in the future?\n   \n   The API is currently set to a rate limit of 60 requests per minute, but it will soon be set to match the rate limits specified in the varying API plan tiers.\n\n2. How long are the results data from an execution stored for and will it change in the future?\n   \n   Currently, the results data from an execution are stored for 2 years, but it may be reduced to something closer to 90 days in the future.\n\n3. Is there a limit to the amount of data that can be retrieved in a single API result call and will it change in the future?\n   \n   There is currently a 250MB limit, but there is a chance it may increase for certain paid plans. The API does not currently return an explicit error upon hitting this limit but will instead fail (timeout) when attempting to retrieve the results."
        },
        {
          "fileName": "other.md",
          "filePath": "docs\\api\\FAQ\\other.md",
          "url": "https://dune.com/blob/master/api\\FAQ\\other.md",
          "summary": "# Dune API Other FAQs\n\nThis section of the Dune app technical guide provides answers to frequently asked questions about the Dune API. The Dune API is a feature of the Dune app that allows developers to access and interact with Dune's data and functionality programmatically.\n\n## Contacting Dune for API Support\n\nThis header provides information on how to contact Dune for API support. Users can reach out to [api-feedback@dune.com](mailto:api-feedback@dune.com) or join the #[dune-api](https://discord.com/channels/757637422384283659/1019910980634939433) Discord channel for the fastest path towards getting additional questions answered.\n\nThis section is important for developers who may encounter issues or have questions about the Dune API. It provides clear instructions on how to get in touch with Dune's support team for assistance.\n\nExample:\n```\nIf you encounter any issues or have questions about the Dune API, please reach out to api-feedback@dune.com or join the #[dune-api](https://discord.com/channels/757637422384283659/1019910980634939433) Discord channel for assistance.\n```\n\nOverall, this section of the Dune app technical guide is a helpful resource for developers who are working with the Dune API. It provides clear and concise answers to common questions and offers guidance on how to get additional support if needed.",
          "questions": "1. **What is the Dune API and how does it work?** The app technical guide does not provide a detailed explanation of what the Dune API is and how it works. A blockchain SQL analyst might want to know more about the API's functionality and how it interacts with blockchain data.\n2. **What kind of data can be accessed through the Dune API?** The app technical guide does not provide a comprehensive list of the types of data that can be accessed through the Dune API. A blockchain SQL analyst might want to know what specific blockchain data can be queried and analyzed using the API.\n3. **Are there any limitations or restrictions on API usage?** The app technical guide does not mention any limitations or restrictions on API usage, such as rate limits or access controls. A blockchain SQL analyst might want to know if there are any restrictions on how frequently they can query the API or what types of queries are allowed."
        },
        {
          "fileName": "TOS.md",
          "filePath": "docs\\api\\FAQ\\TOS.md",
          "url": "https://dune.com/blob/master/api\\FAQ\\TOS.md",
          "summary": "# Dune API TOS\n\nThis section of the app technical guide covers the Dune API Terms of Service (TOS). The TOS is a legal agreement between Dune and the users of the API. It outlines the terms and conditions that govern the use of the API and the responsibilities of both Dune and the users.\n\nThe header provides a link to the actual API TOS document, which is hosted on the Dune website. Users of the API should read and understand the TOS before using the API. The TOS covers important topics such as acceptable use, intellectual property rights, and liability.\n\nExample:\nIf a developer wants to use the Dune API to build an application, they should first read the API TOS to ensure that their use of the API is in compliance with the terms and conditions outlined in the agreement.\n\n# Conclusion\n\nThe Dune API TOS is an important legal agreement that governs the use of the Dune API. This section of the app technical guide provides a link to the actual TOS document and highlights the importance of reading and understanding the agreement before using the API.",
          "questions": "1. What type of data does the Dune API provide and how is it stored?\n- This app technical guide does not provide information on the type of data provided by the Dune API or how it is stored.\n\n2. Are there any limitations or restrictions on the usage of the Dune API?\n- The Dune API Terms of Service can be found at the provided link, which may contain information on limitations or restrictions.\n\n3. Is there any documentation available on how to integrate and use the Dune API?\n- This app technical guide does not provide information on how to integrate and use the Dune API, but it may be available through the provided link to the API Terms of Service."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc\\docs\\json\\docs\\api\\FAQ` folder contains a collection of technical guides that provide detailed information and answers to frequently asked questions about the Dune API. These guides cover various aspects of the API, including billing and pricing, functionality, and other miscellaneous topics. They are essential for developers and analysts who want to understand and work with the Dune API effectively.\n\nThe `billing-pricing.md` file focuses on the billing and pricing aspect of the Dune API. It explains how API billing works with team plans, the definition of a datapoint, and how datapoints are charged for query executions. This guide is particularly useful for developers who need to manage their API usage and costs.\n\nExample:\n```\nTo calculate the number of datapoints in a query result, use the formula: rows * columns with an additional limit of 50 avg bytes per cell.\n```\n\nThe `functionality.md` file provides answers to frequently asked questions about the Dune API's functionality. It covers general information, executing queries, checking execution status, and reading results data. This guide is essential for developers who want to understand the capabilities and limitations of the Dune API.\n\nExample:\n```\nThe API supports Query Parameters. To pass parameter data using cURL or Python, follow the instructions provided in the guide.\n```\n\nThe `other.md` file addresses miscellaneous questions about the Dune API. It provides information on how to contact Dune for API support, which is crucial for developers who may encounter issues or have questions about the API.\n\nExample:\n```\nFor API support, reach out to api-feedback@dune.com or join the #[dune-api](https://discord.com/channels/757637422384283659/1019910980634939433) Discord channel.\n```\n\nThe `TOS.md` file covers the Dune API Terms of Service (TOS), which is a legal agreement between Dune and the users of the API. It highlights the importance of reading and understanding the TOS before using the API.\n\nExample:\n```\nBefore using the Dune API, read the API TOS to ensure compliance with the terms and conditions outlined in the agreement.\n```\n\nOverall, the guides in this folder are essential resources for developers and analysts working with the Dune API. They provide clear and concise information about various aspects of the API, helping users to understand its capabilities, limitations, and requirements.",
      "questions": ""
    },
    {
      "folderName": "quick-start",
      "folderPath": ".autodoc\\docs\\json\\docs\\api\\quick-start",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\api\\quick-start",
      "files": [
        {
          "fileName": "api-js.md",
          "filePath": "docs\\api\\quick-start\\api-js.md",
          "url": "https://dune.com/blob/master/api\\quick-start\\api-js.md",
          "summary": "The app technical guide provides a tutorial on how to access the Dune API via JavaScript. The guide is not yet comprehensive, and users are advised to reach out to the Dune team via the dune-api channel on Discord if they have any questions. The guide assumes that users have some level of familiarity with Node.js, Node Package Manager (NPM), and Node Version Manager (NVM). \n\nThe guide provides a step-by-step process for getting set up, which includes ensuring that users are using the current LTS version of Node.js (Node 18) and the latest version of NPM. Users are also required to install the node-fetch package and create a project directory and initiate an ESM-compatible Node project. \n\nThe guide provides an example Dune API script that fetches a small set of data using a simple query with the query_id 1258228. Users are required to replace `#! YOUR_API_KEY` with their Dune API key in the code. The guide also provides an example Dune API script for a parameterized query that takes in a wallet address as a parameter. \n\nThe guide concludes by providing instructions on how to run the script from the command line and a link to the code in a Github repository. The guide is focused on the app folder of the Dune Docs project and provides a detailed explanation of how to access the Dune API via JavaScript.",
          "questions": "1. What is the Dune API and how does it relate to blockchain technology?\n- The app technical guide provides information on how to access the Dune API via JavaScript, but it does not explain what the Dune API is or how it relates to blockchain technology.\n\n2. Are there any security measures in place to protect user data when using the Dune API?\n- The app technical guide does not mention any security measures in place to protect user data when using the Dune API, which may be a concern for a blockchain SQL analyst.\n\n3. Are there any limitations or restrictions on the types of queries that can be executed using the Dune API?\n- The app technical guide provides examples of how to execute queries using the Dune API, but it does not mention any limitations or restrictions on the types of queries that can be executed, which may be important information for a blockchain SQL analyst."
        },
        {
          "fileName": "api-py.md",
          "filePath": "docs\\api\\quick-start\\api-py.md",
          "url": "https://dune.com/blob/master/api\\quick-start\\api-py.md",
          "summary": "This app technical guide covers how to access the Dune API using Python. It provides a step-by-step guide to set up the environment, install necessary libraries, and create functions to interact with the Dune API. The guide assumes prior experience with Python and recommends using Python3, a virtual environment, and the `pip` package manager.\n\nThe guide covers the following sections:\n\n1. **Getting Set Up**: Installing the `requests`, `pandas`, and `jupyter notebook` libraries.\n2. **Import the necessary libraries**: Importing `requests` and `pandas`.\n3. **API Keys**: Setting up the API key and header for making API calls.\n4. **Simplifying URL generation**: Creating a function to generate URLs for different API endpoints.\n5. **Wrapping API endpoints in functions**: Defining functions to execute a query, get query status, get query results, and cancel query execution.\n6. **Using the Dune API**: Demonstrating how to execute a query, get query execution status, get query results, and cancel query execution.\n7. **Parameterized Queries**: Creating a function to execute queries with parameters.\n\nThe guide provides examples for each section, making it easy to follow and implement the code. The complete code for this tutorial is available on [GitHub](https://github.com/SusmeetJain/dune_api_python).",
          "questions": "1. **How do I pass my API key to the Dune API?**\n\n   You need to pass your API key in the header of your API calls. In the example provided, the API key is stored in a variable called `API_KEY`, and the header is created as a dictionary: `HEADER = {\"x-dune-api-key\" : API_KEY}`.\n\n2. **How can I execute a parameterized query using the Dune API?**\n\n   To execute a parameterized query, you need to create a dictionary containing the parameter values and pass it to the `execute_query_with_params` function along with the query ID. For example: `parameters = {\"wallet_address\" : \"0xb10f35351ff21bb81dc02d4fd901ac5ae34e8dc4\"}` and `execution_id = execute_query_with_params(\"638435\", parameters)`.\n\n3. **How can I cancel a query execution if it's taking too long?**\n\n   You can cancel a query execution by calling the `cancel_query_execution` function and passing the `execution_id` of the running query. For example: `response = cancel_query_execution(execution_id)`."
        },
        {
          "fileName": "api-ready-queries.md",
          "filePath": "docs\\api\\quick-start\\api-ready-queries.md",
          "url": "https://dune.com/blob/master/api\\quick-start\\api-ready-queries.md",
          "summary": "This app technical guide provides a list of queries that are ready for API use in the Dune Docs project. The guide is divided into four sections, each containing a query with its respective query ID, parameters, and output columns. The first query is for getting the ERC20 balances for a given address. The parameters include the address, block number, chain, and dust, while the output columns include the symbol, notional value, total value, and token price. The second query is for getting all the holders and their balances for a given ERC20 address. The parameters include the address, block number, and chain, while the output columns include the holder, holder_ens, notional value, total value, and token price. The third query is for getting the NFT balances for a given address. The parameters include the address, block number, and chain, while the output columns include the symbol, name, category, token_id, contract_address, acquired_how, and acquired_on_block_number. The fourth query is for getting all the holders and their balances for a given NFT address. The parameters include the address, block number, and chain, while the output columns include the holder, holder_ens, tokens_held, and token_ids. The guide also provides valid choices for each parameter and examples of how to use the queries. Overall, this guide serves as a reference for developers who want to use the Dune Docs API and provides them with the necessary information to use the queries effectively.",
          "questions": "1. What are the available EVM chains that this app supports?\n   - The available EVM chains that this app supports are `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n2. Can this app retrieve NFT balances and holders for non-EVM blockchains?\n   - No, this app can only retrieve NFT balances and holders for EVM blockchains.\n3. How often is the data updated for the balances and holders queries?\n   - The data is updated every ~3 minutes/15 blocks, as specified in the `blocknumber` parameter."
        },
        {
          "fileName": "community-clients.md",
          "filePath": "docs\\api\\quick-start\\community-clients.md",
          "url": "https://dune.com/blob/master/api\\quick-start\\community-clients.md",
          "summary": "# Community Clients\n\nThis guide provides a list of Dune API clients built by the community. It is focused on the `app` folder of the Dune Docs project. The purpose of this guide is to showcase the various API clients built by the community and provide instructions on how to install them. \n\nThe guide starts with a brief introduction to the API clients and a call to action for the community to share their own clients. It also includes a warning disclaimer that the clients are not directly maintained by the Dune team.\n\nThe guide then proceeds to list the various API clients available, including the Cow Protocol Python Client, Cow Protocol Typescript Client, Dune Go Client, and Dune Ruby Client. Each client is introduced with a brief description and the name of the developer who built it. The guide also includes links to the respective GitHub pages and installation instructions for each client.\n\nFor example, the Cow Protocol Python Client can be installed with a simple pip install command:\n\n```python\npip install dune-client\n```\n\nThe guide also includes a link to the client's GitHub page for more information on how it works. Similarly, the Dune Ruby Client can be installed by adding the following line to the Gemfile:\n\n```ruby\ngem \"dune\"\n```\n\nAnd then running `$ bundle install` from the terminal.\n\nOverall, this guide serves as a helpful resource for developers looking to use Dune API clients built by the community. It provides clear installation instructions and links to the relevant GitHub pages for more information.",
          "questions": "1. What is the purpose of the Dune Docs app?\n    \n    The app technical guide does not provide information on the purpose of the Dune Docs app, so a blockchain SQL analyst might have to look for additional documentation or context to understand the app's purpose.\n\n2. Are there any security concerns with using the community-built API clients?\n\n    The app technical guide mentions that the community-built API clients are not directly maintained by the Dune team, so a blockchain SQL analyst might want to investigate the security measures implemented by the community-built clients to ensure they are safe to use.\n\n3. Are there any limitations or restrictions on the usage of the API clients?\n\n    The app technical guide does not provide information on any limitations or restrictions on the usage of the API clients, so a blockchain SQL analyst might have to look for additional documentation or context to understand any potential limitations or restrictions."
        },
        {
          "fileName": "index.md",
          "filePath": "docs\\api\\quick-start\\index.md",
          "url": "https://dune.com/blob/master/api\\quick-start\\index.md",
          "summary": "# API Quick Start\n\nThis technical guide covers the quick start guides for using the API in the Dune Docs project. The purpose of this guide is to provide users with the necessary information to get started with the API quickly. \n\nThe guide starts by providing a link to example queries that can be used with the API. These queries include NFT or ERC20 balances or holders. This section is useful for users who want to quickly test the API and see how it works.\n\nThe guide also provides a link to a pipeline setup using Python and Celery. This section is useful for users who want to set up an ingestion pipeline and need guidance on how to do so.\n\nThe main section of the guide provides quick start guides for using the API with Python, Javascript, and community clients. These guides provide step-by-step instructions on how to get started with the API using these programming languages. \n\nFor example, the Python guide covers how to install the necessary packages, how to authenticate with the API, and how to make requests. The Javascript guide covers how to make requests using the fetch API and how to handle responses. The community clients guide covers how to use community-built clients to interact with the API.\n\nOverall, this technical guide is a useful resource for users who want to get started with the API quickly and efficiently. The guide provides clear and concise instructions for using the API with different programming languages and includes links to example queries and pipeline setups.",
          "questions": "1. What kind of data does this API provide access to?\n- The API provides access to example queries for NFT or ERC20 balances or holders, as well as quick start guides for Python, Javascript, and community clients.\n\n2. Are there any limitations or restrictions on the usage of this API?\n- The app technical guide does not mention any limitations or restrictions on API usage.\n\n3. Is there any information on how the API handles data security and privacy?\n- The app technical guide does not provide any information on how the API handles data security and privacy."
        }
      ],
      "folders": [],
      "summary": "The quick-start folder in the Dune Docs project focuses on providing users with a comprehensive guide to get started with the Dune API using different programming languages and tools. The guides in this folder are designed to help users quickly and efficiently set up their environment, authenticate with the API, and make requests to fetch data.\n\nFor example, the `api-js.md` guide provides a step-by-step tutorial on accessing the Dune API via JavaScript. It assumes users have some familiarity with Node.js, NPM, and NVM. The guide covers setting up the environment, installing the required packages, and provides example scripts for fetching data using simple and parameterized queries. This guide is useful for developers who prefer working with JavaScript and want to integrate the Dune API into their projects.\n\nSimilarly, the `api-py.md` guide covers accessing the Dune API using Python. It provides a detailed walkthrough on setting up the environment, installing necessary libraries, and creating functions to interact with the Dune API. This guide is beneficial for developers who prefer Python and want to fetch data from the Dune API for their projects.\n\nThe `api-ready-queries.md` guide offers a list of ready-to-use queries for the Dune API, including ERC20 and NFT balances and holders. This guide serves as a reference for developers who want to use the Dune API effectively and provides them with the necessary information to use the queries efficiently.\n\nThe `community-clients.md` guide showcases various Dune API clients built by the community, including Python, TypeScript, Go, and Ruby clients. It provides installation instructions and links to the respective GitHub pages for each client. This guide is helpful for developers who want to use community-built clients to interact with the Dune API.\n\nLastly, the `index.md` file serves as an overview of the quick-start guides, providing users with links to example queries, pipeline setups, and guides for using the API with Python, JavaScript, and community clients.\n\nOverall, the quick-start folder in the Dune Docs project is an essential resource for users who want to get started with the Dune API quickly and efficiently. The guides provide clear and concise instructions for using the API with different programming languages and include links to example queries and pipeline setups, making it easier for developers to integrate the Dune API into their projects.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc\\docs\\json\\docs\\api` folder contains the Dune API Technical Guide, which is a comprehensive documentation for developers who want to use the Dune API. The guide provides an overview of the API, instructions on how to get started, and links to important resources such as the API documentation, Discord channel, and community clients.\n\nThe guide is focused on the `api` folder of the Dune Docs project and is essential for developers looking to integrate with the Dune API and work effectively with its endpoints and functionalities. For example, the guide explains how to obtain an API key, which is required for authentication when making requests to the API. It also provides quick start guides for Python and Node.js, making it easier for developers to start using the API with their preferred programming language.\n\nIn addition to the main guide, the folder contains subfolders with more detailed information on various aspects of the API, such as the `api-reference` folder, which contains technical guides on authentication, executing queries, checking execution status, retrieving results, and handling errors. These guides are essential for developers who want to understand the capabilities and limitations of the Dune API.\n\nFor example, the `execute-query-id.md` guide in the `api-reference` folder provides a detailed explanation of how to execute a query with or without parameters to retrieve data. It includes examples of how to use cURL to execute the query, making it a valuable resource for developers looking to retrieve data from the Dune API.\n\nThe `FAQ` folder contains guides that answer frequently asked questions about the Dune API, covering topics such as billing and pricing, functionality, and other miscellaneous topics. These guides are essential for developers and analysts who want to understand and work with the Dune API effectively.\n\nLastly, the `quick-start` folder provides guides for getting started with the Dune API using different programming languages and tools. These guides help users quickly and efficiently set up their environment, authenticate with the API, and make requests to fetch data. For example, the `api-js.md` guide in the `quick-start` folder provides a step-by-step tutorial on accessing the Dune API via JavaScript, including setting up the environment, installing required packages, and providing example scripts for fetching data using simple and parameterized queries.\n\nOverall, the `.autodoc\\docs\\json\\docs\\api` folder is an essential resource for developers and analysts working with the Dune API. It provides clear and concise information about various aspects of the API, helping users to understand its capabilities, limitations, and requirements.",
  "questions": ""
}