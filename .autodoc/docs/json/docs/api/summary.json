{
  "folderName": "api",
  "folderPath": ".autodoc/docs/json/docs/api",
  "url": "https://dune.com/.autodoc/docs/json/docs/api",
  "files": [
    {
      "fileName": "index.md",
      "filePath": "docs/api/index.md",
      "url": "https://dune.com/docs/api/index.md",
      "summary": "# Dune API Technical Guide\n\nThis technical guide is focused on the API feature of the Dune project. The API provides users with access to queries and data available on the Dune website. The guide provides an overview of the API, how it works, and how to get started with it.\n\n## Overview\n\nThe guide starts with an introduction to the Dune API, which provides users with full access to public and private queries. The API allows users to execute queries, check the status of an execution, and get the results of an execution. The guide also notes that the results of API executions are stored separately from the Dune website and are not currently reflected on the website.\n\n## Getting Started\n\nThe guide provides instructions on how to get started with the API. Users need to purchase an app plan and API package to obtain an API key, which can be found in the settings page. The guide also notes that users can consume the API in the language of their choice, but provides quick start guides for Python and Node.js. Additionally, the guide provides links to community clients available for the API.\n\n## Important Links\n\nThe guide provides links to important resources related to the Dune API, including the API documentation, the Dune API Discord channel, and a community-sourced API client.\n\nOverall, this technical guide provides a high-level overview of the Dune API, how it works, and how to get started with it. It is a useful resource for developers who want to use the Dune API in their projects.",
      "questions": "1. What kind of data can be queried using the Dune API?\n- The Dune API gives access to both public and personal private queries that a user's Dune account has access to.\n\n2. Are the results from API executions reflected on Dune's website?\n- No, the results from API executions are currently stored separately and are not reflected on Dune's website.\n\n3. What programming languages can be used to consume the Dune API?\n- The Dune API can be consumed in any programming language, but there are quick start guides available for Python and Node.js. Additionally, there are community clients available for use."
    }
  ],
  "folders": [
    {
      "folderName": "FAQ",
      "folderPath": ".autodoc/docs/json/docs/api/FAQ",
      "url": "https://dune.com/.autodoc/docs/json/docs/api/FAQ",
      "files": [
        {
          "fileName": "TOS.md",
          "filePath": "docs/api/FAQ/TOS.md",
          "url": "https://dune.com/docs/api/FAQ/TOS.md",
          "summary": "# Dune API TOS\n\nThis section of the app technical guide covers the Dune API Terms of Service (TOS). The TOS outlines the rules and guidelines for using the Dune API. It is important for developers to understand and comply with these terms in order to use the API effectively and avoid any legal issues.\n\nThe header provides a link to the actual API TOS document, which is hosted on the Dune website. Developers should review this document thoroughly before using the API.\n\nExample:\n\n```\n// Make a request to the Dune API\nfetch('https://api.dune.com/data')\n  .then(response => {\n    // Handle response\n  })\n  .catch(error => {\n    // Handle error\n  });\n```\n\n# Authentication\n\nThis section covers the authentication process for accessing the Dune API. Developers must obtain an API key in order to access the API. The header provides an overview of the authentication process and links to additional resources for obtaining an API key.\n\nExample:\n\n```\n// Set API key as authorization header\nconst headers = {\n  'Authorization': 'Bearer YOUR_API_KEY_HERE'\n};\n\n// Make a request to the Dune API with headers\nfetch('https://api.dune.com/data', { headers })\n  .then(response => {\n    // Handle response\n  })\n  .catch(error => {\n    // Handle error\n  });\n```\n\n# Rate Limiting\n\nThis section covers the rate limiting policy for the Dune API. The API has a limit on the number of requests that can be made within a certain time period. The header provides an overview of the rate limiting policy and links to additional resources for understanding and managing rate limits.\n\nExample:\n\n```\n// Check if rate limit has been reached\nif (response.headers.get('X-RateLimit-Remaining') === '0') {\n  // Handle rate limit reached error\n}\n```\n\nOverall, this app technical guide provides important information for developers using the Dune API. It covers the API TOS, authentication process, and rate limiting policy, which are all crucial aspects of using the API effectively and responsibly.",
          "questions": "1. What specific APIs does Dune Docs offer and what are their respective terms of service?\n- The app technical guide only provides a link to the API terms of service page, so a blockchain SQL analyst may want to know more about the specific APIs offered by Dune Docs and their corresponding terms of service.\n\n2. Does Dune Docs have any restrictions or limitations on the usage of their APIs?\n- The app technical guide does not provide any information on restrictions or limitations on API usage, so a blockchain SQL analyst may want to know if there are any such restrictions in place.\n\n3. Is there any documentation available on how to integrate Dune Docs APIs into a blockchain SQL project?\n- The app technical guide only provides a link to the API terms of service page, so a blockchain SQL analyst may want to know if there is any additional documentation available on how to integrate Dune Docs APIs into their project."
        },
        {
          "fileName": "billing-pricing.md",
          "filePath": "docs/api/FAQ/billing-pricing.md",
          "url": "https://dune.com/docs/api/FAQ/billing-pricing.md",
          "summary": "# Dune API Billing & Pricing\n\nThis technical guide provides information about Dune's API billing and pricing. It covers the following topics:\n\n## FAQ: Billing & Pricing\n\nThis section provides answers to frequently asked questions about Dune's API billing and pricing.\n\n### How will API Billing work with the new Team plans?\n\nThis question addresses the upcoming support for API keys on a team level in the first few months of 2023. The answer explains that any usage associated with a team API key will be billed to their respective team.\n\n### Whatâ€™s a datapoint?\n\nThis question defines a datapoint as rows multiplied by columns with an additional limit of 50 average bytes per cell in a set of results. The formula for calculating datapoints is also provided.\n\n### Do I get charged datapoints for every execution?\n\nThis question clarifies that Dune charges datapoints for the first read result of every distinct query execution and every subsequent 100th read per billing cycle.\n\nOverall, this technical guide provides important information about Dune's API billing and pricing. It is particularly useful for developers who are building applications that use Dune's API and need to understand how they will be charged for their usage. The guide is concise and easy to understand, with clear explanations and examples where appropriate.",
          "questions": "1. What is the pricing model for Dune API and how is it calculated?\nA blockchain SQL analyst might want to know more about the pricing model for Dune API and how it is calculated based on the usage of datapoints and query executions.\n\n2. How does Dune handle billing for multiple API keys associated with a team?\nA blockchain SQL analyst might want to know how Dune handles billing for multiple API keys associated with a team and if there are any limitations or restrictions.\n\n3. Is there a limit on the number of datapoints that can be used in a single query execution?\nA blockchain SQL analyst might want to know if there is a limit on the number of datapoints that can be used in a single query execution and if there are any additional charges for exceeding that limit."
        },
        {
          "fileName": "functionality.md",
          "filePath": "docs/api/FAQ/functionality.md",
          "url": "https://dune.com/docs/api/FAQ/functionality.md",
          "summary": "# Dune API Functionality\n\nThis technical guide provides answers to frequently asked questions about how the Dune API works. The guide is divided into different sections based on the feature of the project app that the file is focused on. \n\n## General\n\nThis section provides general information about the Dune API.\n\n### Requests Per Minute\n\nThe API is currently set to a rate limit of 60 requests per minute. However, this will soon be set to match the rate limits specified in the varying API plan tiers.\n\n### SLAs\n\nSLAs will be available in the future on Enterprise pricing plans.\n\n## Executing Queries\n\nThis section provides information on how to execute queries using the Dune API.\n\n### Query ID\n\nTo find a query ID, navigate to a query, and it's the first number after \"/queries/\" in the URL. An example is provided in the guide.\n\n### Query Parameters\n\nThe API supports query parameters. For Dune Queries that include parameters, you can pass parameter data as part of the Execute Query ID endpoint. The guide provides links to learn more about building Dune Queries with parameters and how to pass parameter data using cURL and Python.\n\n### Performance and Differences\n\nThere are no major performance differences or differences in what can be accessed between the Dune API and the Dune web app if both are using the same app plan tier. The Dune API gives you programmatic access to the capabilities and data sets that can already be accessed from the Dune web app.\n\n### Execution Timeout Limit\n\nThe query execution timeout limit matches the Dune web app, which is 30 minutes.\n\n### Query Engine\n\nThe guide recommends using the API with v2 Dune SQL as the old v1 engine and v2 Spark SQL are slowly being deprecated.\n\n## Check Execution Status\n\nThis section provides information on how to check the execution status of a query.\n\n### States\n\nPending means the execution is waiting for an available execution connection slot, while executing means the query is currently executing against the database.\n\n## Reading Results Data\n\nThis section provides information on how to read results data from a query.\n\n### Direct Connection to the Database\n\nCurrently, it's not possible to ingest data by getting a direct connection to the database. In the interim, the guide recommends periodically fetching from \"max(latestBlockNumber) - 2\" to \"lastFetchedBlockNumber\" in regular intervals.\n\n### Query Results Data\n\nQuery results data is saved for faster retrieval.\n\n### Results Data Storage\n\nThe results data from an execution is currently stored for two years, but this may be reduced to something closer to 90 days in the future. This is visible on the API response on the \"expires_at\" field in the execution status and results body.\n\n### Retrieving Data\n\nThere is currently a 250MB limit on how much data can be retrieved in a single API result call. However, there is a chance this may increase for certain paid plans. The API does not currently return an explicit error upon hitting this limit but will instead fail (timeout) when attempting to retrieve the results.",
          "questions": "1. What is the rate limit for the Dune API and will it change in the future?\n- The API is currently set to a rate limit of 60 requests per minute, but it will soon be set to match the rate limits specified in the varying API plan tiers.\n\n2. What is the execution timeout limit for queries and can it be extended?\n- The query execution timeout limit matches the Dune web app, which is 30 minutes. It is not mentioned whether it can be extended.\n\n3. Is there a limit to how much data can be retrieved in a single API result call?\n- Yes, there is currently a 250MB limit, but there is a chance it may be increased for certain paid plans. The API does not currently return an explicit error upon hitting this limit but will instead fail (timeout) when attempting to retrieve the results."
        },
        {
          "fileName": "other.md",
          "filePath": "docs/api/FAQ/other.md",
          "url": "https://dune.com/docs/api/FAQ/other.md",
          "summary": "# Dune API Other FAQs\n\nThis section of the Dune Docs app technical guide provides answers to frequently asked questions about how the Dune API works. The purpose of this guide is to provide additional information and clarification on the Dune API beyond what is covered in the main API documentation.\n\nThe guide starts by providing contact information for users who have additional questions or feedback about the Dune API. Users can reach out to api-feedback@dune.com or join the #dune-api channel on Discord for assistance.\n\nThe guide then proceeds to answer various questions about the Dune API, such as how to authenticate requests, how to handle rate limiting, and how to handle errors. Each question is addressed in a separate section, with clear and concise explanations provided.\n\nFor example, the section on authentication explains the different authentication methods supported by the Dune API, such as API keys and OAuth 2.0. It also provides examples of how to authenticate requests using each method.\n\nOverall, this guide serves as a helpful resource for users who want to learn more about the Dune API and how to use it effectively. By providing clear and concise answers to common questions, it helps users avoid common pitfalls and get the most out of the API.",
          "questions": "1. What specific functionalities does the Dune API offer for blockchain data analysis?\n- This information is not provided in the app technical guide and would require further research or communication with the Dune team.\n\n2. Are there any limitations or restrictions on the amount or type of data that can be accessed through the Dune API?\n- This information is not provided in the app technical guide and would require further research or communication with the Dune team.\n\n3. How does the Dune API handle data privacy and security for blockchain data analysis?\n- This information is not provided in the app technical guide and would require further research or communication with the Dune team."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc/docs/json/docs/api/FAQ` folder contains a collection of technical guides that provide detailed information and answers to frequently asked questions about the Dune API. These guides are essential for developers who are building applications using the Dune API and need to understand various aspects of the API, such as authentication, rate limiting, billing, pricing, and functionality.\n\nThe `TOS.md` file covers the Dune API Terms of Service (TOS), which outlines the rules and guidelines for using the API. Developers must understand and comply with these terms to use the API effectively and avoid legal issues. The guide also provides examples of how to authenticate requests and handle rate limiting.\n\nThe `billing-pricing.md` file provides information about Dune's API billing and pricing, including answers to frequently asked questions. This guide is particularly useful for developers who need to understand how they will be charged for their API usage. For example, the guide explains what a datapoint is and how it is calculated, as well as how API billing will work with the new Team plans.\n\nThe `functionality.md` file answers frequently asked questions about how the Dune API works, such as the rate limits, SLAs, executing queries, query parameters, performance differences, execution timeout limits, and query engines. This guide is essential for developers who want to learn more about the API's capabilities and limitations. For instance, the guide explains how to find a query ID, pass query parameters, and check the execution status of a query.\n\nThe `other.md` file provides additional information and clarification on the Dune API beyond what is covered in the main API documentation. This guide addresses various questions about authentication, rate limiting, and error handling. For example, it explains the different authentication methods supported by the Dune API and how to authenticate requests using each method.\n\nOverall, the guides in this folder are crucial for developers working with the Dune API, as they provide in-depth information on various aspects of the API. By understanding the contents of these guides, developers can avoid common pitfalls and get the most out of the API, ensuring that their applications work seamlessly with the Dune platform.",
      "questions": ""
    },
    {
      "folderName": "api-reference",
      "folderPath": ".autodoc/docs/json/docs/api/api-reference",
      "url": "https://dune.com/.autodoc/docs/json/docs/api/api-reference",
      "files": [
        {
          "fileName": "authentication.md",
          "filePath": "docs/api/api-reference/authentication.md",
          "url": "https://dune.com/docs/api/api-reference/authentication.md",
          "summary": "The app technical guide titled \"Authentication\" provides instructions on how to authenticate API requests in the Dune app. The guide emphasizes the importance of API keys in determining the permissions of private queries and billing for requests. It warns against sharing secret API keys in publicly accessible areas to ensure security.\n\nThe guide provides a specific method for authenticating requests, which involves adding an \"x-dune-api-key\" property to the request header. This property is required for all request types. The guide includes an example of how to do this with an Execute POST API request using the curl command:\n\n```\ncurl -X POST -H x-dune-api-key:{{api_key}} \"https://api.dune.com/api/v1/query/{{query_id}}/execute\"\n```\n\nOverall, this guide is essential for developers working on the Dune app who need to authenticate API requests. It provides clear instructions on how to do so and emphasizes the importance of keeping API keys secure.",
          "questions": "1. What type of authentication does the Dune API use?\n- The Dune API uses API keys to authenticate requests.\n\n2. What is the purpose of the \"x-dune-api-key\" property in the request header?\n- The \"x-dune-api-key\" property is used for authentication with the API and is needed on all request types.\n\n3. What is the recommended practice for handling secret API keys?\n- The recommended practice is to not share secret API keys in publicly accessible areas such as GitHub or client-side code."
        },
        {
          "fileName": "cancel-execution.md",
          "filePath": "docs/api/api-reference/cancel-execution.md",
          "url": "https://dune.com/docs/api/api-reference/cancel-execution.md",
          "summary": "# Explanation of the App Technical Guide\n\nThe app technical guide is a documentation for the Dune API execution requests cancellation feature. The guide is divided into several sections that provide information on how to cancel an API execution request. \n\nThe first section is the title, which is \"Cancel Execution\". This section provides a brief overview of what the guide is about. The description section follows, which explains how to cancel Dune API execution requests. \n\nThe next section is the POST Cancel Execution header. This section provides information on how to cancel an API execution request. It explains that the user needs to pass the `execution_id` obtained from making an Execute Query ID POST request to complete a Cancel Execution API request. \n\nThe Arguments section follows, which explains that there are no arguments required to cancel an API execution request. The Returns section explains that the API returns a boolean for whether the execution is successfully canceled. \n\nThe Example Request section provides an example of how to cancel an API execution request using the `execution_id`. The section provides a URL and a cURL command that can be used to cancel an API execution request. \n\nThe Example Response section provides an example of the response that the user will receive after canceling an API execution request. The response is delivered in JSON format and contains a boolean value that indicates whether the request to cancel the query execution was made successfully. \n\nIn summary, the app technical guide provides a step-by-step guide on how to cancel Dune API execution requests. It explains the arguments required, the returns, and provides examples of how to make a request and the response that the user will receive.",
          "questions": "1. What is the purpose of the Dune API and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the Dune API or its relation to blockchain technology.\n\n2. Can the Cancel Execution API request be used to cancel multiple execution requests at once?\n- The app technical guide does not provide information on whether the Cancel Execution API request can be used to cancel multiple execution requests at once.\n\n3. Is there a limit to the number of execution requests that can be canceled using the Cancel Execution API request?\n- The app technical guide does not provide information on whether there is a limit to the number of execution requests that can be canceled using the Cancel Execution API request."
        },
        {
          "fileName": "errors.md",
          "filePath": "docs/api/api-reference/errors.md",
          "url": "https://dune.com/docs/api/api-reference/errors.md",
          "summary": "This app technical guide covers how to handle errors that may come up when working with the Dune API. The guide is divided into two main sections: \"Invalid API Key\" and \"An Internal Error Occurred\". Each section provides a response object and a list of checks to help users troubleshoot the error. \n\nThe \"Invalid API Key\" section provides a response object of `{'error': 'invalid API Key'}` and two checks to help users resolve the error. The first check is to ensure that the API key is being passed to the endpoint in a header, as described in the Authentication section of the API reference. The second check is to ensure that the API key is correctly entered. \n\nThe \"An Internal Error Occurred\" section provides a response object of `{'error': 'An internal error occurred'}` and two checks to help users resolve the error. The first check is to ensure that the `query_id` entered for GET endpoints is correct, while the second check is to ensure that the `execution_id` obtained from a GET endpoint is correctly passed on to a POST endpoint. \n\nThe guide also includes a note that if users find the guide too technical or confusing, they can reach out to the Dune API team on the #dune-api Discord channel for support. \n\nOverall, this guide is a helpful resource for users of the Dune API who may encounter errors while working with the API. The guide provides clear response objects and actionable steps to help users troubleshoot and resolve errors.",
          "questions": "1. What is the Dune API and how does it relate to blockchain technology?\n- The app technical guide does not provide information on what the Dune API is or how it relates to blockchain technology.\n\n2. Are there any specific error codes related to blockchain transactions or smart contracts?\n- The app technical guide does not provide information on specific error codes related to blockchain transactions or smart contracts.\n\n3. Is there any information on how to troubleshoot errors related to data retrieval from the blockchain?\n- The app technical guide provides some information on how to troubleshoot errors related to data retrieval from the Dune API, but it is not clear if this data is specifically related to the blockchain."
        },
        {
          "fileName": "execute-query-id.md",
          "filePath": "docs/api/api-reference/execute-query-id.md",
          "url": "https://dune.com/docs/api/api-reference/execute-query-id.md",
          "summary": "# Explanation of the Dune Docs App Technical Guide\n\n## Execute Query ID\n\nThis section of the guide explains how to execute a query with or without parameters to retrieve data. The guide is focused on the `query` folder of the project. \n\n### [POST] Execute Query ID\n\nThis header explains that the method to execute a query is a POST request. \n\n### Arguments\n\nThis section explains that no arguments are required to execute a query. However, it is possible to add query parameters to the request. An example of how to add query parameters is provided in the guide. \n\n### Returns\n\nThis section explains that the API returns an `execution_id` for the specified request. \n\n### Example Request\n\nThis section provides an example of how to make a request to execute a query. The example shows the URL to use for the request. \n\n#### cURL\n\nThis section provides an example of how to make a request using cURL. The example shows the command to use for the request. \n\n#### cURL with Parameters\n\nThis section provides an example of how to make a request with query parameters using cURL. The example shows the command to use for the request. \n\n### Example Response\n\nThis section provides an example of the response that the API returns when a query is executed. The response is delivered in JSON format and contains an `execution_id` and a `state`. The `execution_id` is a unique ID that is generated every time the API is called. The `state` is the current state of the query's execution. \n\nOverall, this guide provides a step-by-step explanation of how to execute a query with or without parameters to retrieve data. It also provides examples of how to make requests and what responses to expect.",
          "questions": "1. What is the purpose of the `execution_id` returned by the API?\n   \n   The `execution_id` is a unique ID generated every time the API is called, which can be saved and passed on to other API endpoints.\n\n2. Can this API be used to execute queries on a blockchain database?\n   \n   The technical guide does not provide information on whether this API can be used to execute queries on a blockchain database or not.\n\n3. Are there any limitations on the size or complexity of the queries that can be executed using this API?\n   \n   The technical guide does not provide information on any limitations on the size or complexity of the queries that can be executed using this API."
        },
        {
          "fileName": "execution-results.md",
          "filePath": "docs/api/api-reference/execution-results.md",
          "url": "https://dune.com/docs/api/api-reference/execution-results.md",
          "summary": "This technical guide provides information on how to obtain the results data of an execution request in the Dune Docs project. The guide is focused on the Execution Results API feature of the app. The guide provides details on how to make a GET request to the API endpoint to retrieve the status, metadata, and query results from a query execution. \n\nThe guide provides an example request that requires passing the `execution_id` obtained from making an Execute Query ID POST request. The guide also provides an example cURL request. The guide further provides an example response in JSON format, which includes details such as the execution ID, query ID, state, submitted time, execution start and end times, and the actual rows of data being returned. The metadata of the queried data being returned is also included in the response. The metadata includes details such as the names of the columns in the data returned, the size of the returned data, the number of rows in the data, the total number of datapoints returned, the time it took to assign a slot in the server for the request, and the time it took for the actual execution of the query with the request. \n\nThe guide also provides an example of how to get the results in CSV format by appending \"/csv\" to the URL pattern. The guide advises against using the API key as a parameter in public documents where the API key can be viewed and compromised. \n\nFinally, the guide provides a FAQ section that answers questions such as whether data can be ingested by getting a direct connection to the database, whether query results data are saved for faster retrieval, how long the results data from an execution are stored for, and how much data can be retrieved in a single API result call. \n\nIn summary, this technical guide provides developers with a detailed explanation of how to obtain the results data of an execution request in the Dune Docs project. The guide provides examples of requests and responses, as well as a FAQ section that answers common questions.",
          "questions": "1. What is the purpose of the Dune Docs app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the overall purpose of the Dune Docs app, so a blockchain SQL analyst may need to seek additional documentation or context to understand how it relates to blockchain technology.\n\n2. How does the Dune Docs app handle security and authentication for API requests?\n- The app technical guide does not provide information on security and authentication measures for API requests, so a blockchain SQL analyst may need to seek additional documentation or context to understand how the app handles these aspects.\n\n3. What is the pricing model for using the Dune Docs app and how does it compare to other blockchain data analysis tools?\n- The app technical guide does not provide information on the pricing model for using the Dune Docs app, so a blockchain SQL analyst may need to seek additional documentation or context to understand the costs associated with using the app and how it compares to other blockchain data analysis tools."
        },
        {
          "fileName": "execution-status.md",
          "filePath": "docs/api/api-reference/execution-status.md",
          "url": "https://dune.com/docs/api/api-reference/execution-status.md",
          "summary": "# Explanation of Execution Status App Technical Guide\n\nThe Execution Status technical guide is a part of the Dune Docs project and provides information on how to check the status of an execution request. The guide is located in the app folder of the project and is focused on the app feature that allows users to execute queries and check their status. \n\nThe guide provides a detailed explanation of how to use the GET Execution Status API request to check the status of a query execution. It includes information on the arguments and returns of the API request, as well as an example request and response. \n\nThe Arguments section of the guide explains that there are no arguments required for the Execution Status API request. The Returns section explains that the API request returns the status of a query execution along with relevant metadata of the results if the execution is completed. \n\nThe Example Request section provides an example of how to pass the execution_id obtained from making an Execute Query ID POST request to complete an Execution Status API request. It includes both a URL and cURL example. \n\nThe Example Response section provides two examples of JSON responses that can be returned by the Execution Status API request. The first example shows the response when the query is still executing, while the second example shows the response when the execution is complete. The section also provides a detailed explanation of the different properties of the response data, such as execution_id, query_id, state, submitted_at, expires_at, execution_started_at, execution_ended_at, and result_metadata. \n\nFinally, the Check Execution Status FAQ section provides answers to common questions about the different states of query execution, such as \"Executing\" and \"Pending\". It also provides a list of all status codes for reference. \n\nOverall, the Execution Status technical guide provides a comprehensive explanation of how to check the status of a query execution using the Execution Status API request. It is a useful resource for developers working on the Dune Docs project who need to understand how to use this feature of the app.",
          "questions": "1. What is the purpose of this API and how does it relate to blockchain technology?\n   - This API is used to check the status of a query execution request. It is not directly related to blockchain technology, but it may be used in conjunction with blockchain data analysis.\n2. What authentication is required to make requests to this API?\n   - The cURL example shows that an API key is required to make requests to this API. A blockchain SQL analyst may want to know how to obtain an API key and what level of access it provides.\n3. What is the maximum size of the response data that can be generated with this request?\n   - The `result_set_bytes` property in the `result_metadata` object indicates the size of the response data in bytes, but it does not specify a maximum size. A blockchain SQL analyst may want to know if there are any limitations on the amount of data that can be returned by this API."
        },
        {
          "fileName": "index.md",
          "filePath": "docs/api/api-reference/index.md",
          "url": "https://dune.com/docs/api/api-reference/index.md",
          "summary": "# API Reference\n\nThis section of the Dune Docs project covers the API endpoints and common errors that may occur when using them. The purpose of this guide is to provide developers with a comprehensive understanding of the API and how to use it effectively.\n\nThe guide is divided into several sections, each covering a specific aspect of the API. These sections include:\n\n- **Authentication**: This section covers the authentication process for accessing the API. It provides information on how to obtain an API key and how to use it to authenticate requests.\n\n- **Execute Query ID**: This section covers the endpoint for executing a query by ID. It provides information on the parameters required for this endpoint and the expected response.\n\n- **Execution Status**: This section covers the endpoint for checking the status of a query execution. It provides information on the parameters required for this endpoint and the expected response.\n\n- **Execution Results**: This section covers the endpoint for retrieving the results of a query execution. It provides information on the parameters required for this endpoint and the expected response.\n\n- **Cancel Execution**: This section covers the endpoint for canceling a query execution. It provides information on the parameters required for this endpoint and the expected response.\n\n- **Error Codes**: This section covers the error codes that may be returned by the API. It provides information on what each error code means and how to handle it.\n\nEach section provides a detailed explanation of the endpoint or error code, including any required parameters and expected responses. The guide also includes links to the relevant files for each section.\n\nFor example, the **Authentication** section links to the `authentication.md` file in the `api-reference` folder, which provides more detailed information on the authentication process.\n\nOverall, this API Reference guide is an essential resource for developers working with the Dune Docs API. It provides a comprehensive understanding of the API endpoints and common errors, helping developers to use the API effectively and troubleshoot any issues that may arise.",
          "questions": "1. What type of data is being accessed through the API endpoints listed in this technical guide?\n- The technical guide does not provide information on the type of data being accessed through the API endpoints listed. \n\n2. Are there any security measures in place to protect the data being accessed through the API endpoints?\n- The technical guide does not provide information on security measures in place to protect the data being accessed through the API endpoints. \n\n3. Is there any information on how the API endpoints interact with a blockchain or SQL database?\n- The technical guide does not provide information on how the API endpoints interact with a blockchain or SQL database."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc/docs/json/docs/api/api-reference` folder contains a collection of technical guides that provide comprehensive information on various aspects of the Dune API. These guides are essential for developers working with the Dune Docs project, as they offer detailed explanations, examples, and troubleshooting tips for using the API effectively.\n\nThe **Authentication** guide (`authentication.md`) focuses on the process of authenticating API requests in the Dune app. It highlights the importance of API keys and provides a method for adding the \"x-dune-api-key\" property to the request header. This guide is crucial for developers who need to authenticate API requests and ensure the security of their API keys.\n\nThe **Cancel Execution** guide (`cancel-execution.md`) explains how to cancel Dune API execution requests. It provides information on passing the `execution_id` and the expected response when canceling an execution. This guide is useful for developers who need to manage and cancel API execution requests.\n\nThe **Errors** guide (`errors.md`) covers handling errors that may occur when working with the Dune API. It provides response objects and troubleshooting steps for common errors, such as \"Invalid API Key\" and \"An Internal Error Occurred\". This guide is a valuable resource for users who encounter errors while working with the API.\n\nThe **Execute Query ID** guide (`execute-query-id.md`) explains how to execute a query with or without parameters to retrieve data. It provides examples of making requests and the expected responses, making it a helpful resource for developers who need to execute queries using the Dune API.\n\nThe **Execution Results** guide (`execution-results.md`) provides information on obtaining the results data of an execution request. It offers details on making a GET request to the API endpoint and the expected response, including metadata and query results. This guide is essential for developers who need to retrieve execution results from the Dune API.\n\nThe **Execution Status** guide (`execution-status.md`) focuses on checking the status of an execution request. It explains how to use the GET Execution Status API request and provides examples of requests and responses. This guide is useful for developers who need to monitor the progress of their query executions.\n\nFinally, the **Index** guide (`index.md`) serves as an overview of the API Reference, covering the API endpoints and common errors. It provides a concise summary of each section in the API Reference, making it a helpful starting point for developers exploring the Dune API.\n\nOverall, the guides in this folder are essential resources for developers working with the Dune Docs API. They provide a comprehensive understanding of the API endpoints, common errors, and best practices, helping developers use the API effectively and troubleshoot any issues that may arise.",
      "questions": ""
    },
    {
      "folderName": "quick-start",
      "folderPath": ".autodoc/docs/json/docs/api/quick-start",
      "url": "https://dune.com/.autodoc/docs/json/docs/api/quick-start",
      "files": [
        {
          "fileName": "api-js.md",
          "filePath": "docs/api/quick-start/api-js.md",
          "url": "https://dune.com/docs/api/quick-start/api-js.md",
          "summary": "This app technical guide provides a step-by-step guide on how to access the Dune API via JavaScript. The guide is not yet comprehensive, but it provides a starting point for developers who want to use the Dune API. The guide assumes that the reader has some level of familiarity with Node.js, Node Package Manager (NPM), and Node Version Manager (NVM). \n\nThe guide starts by showing one of the several ways the API can be consumed via JavaScript, using the `node-fetch` package. The guide also mentions that developers can use the native fetch functionality available in the newest LTS version of node, node 18. The guide provides an example of how to set up the environment and install the necessary packages. \n\nThe guide then provides an example of how to call the Dune API using a simple query that fetches a small set of data. The example query has the `query_id`, `1258228`. The guide shows how to replace `#! YOUR_API_KEY` with the Dune API key and add it to the `main.js` file in the project. The guide also provides an example of how to call a parameterized query that takes in a wallet address as a parameter. The example query has the `query_id`, `1258228`, and the guide shows how to pass an example address as a value to the `wallet_address` parameter. \n\nThe guide concludes by showing how to run the script from the command line and how to edit the Query URL to fetch data from any other Queries. The guide also provides a link to a Github repository where developers can find some code from the tutorial. \n\nOverall, this guide provides a useful starting point for developers who want to use the Dune API via JavaScript. The guide is easy to follow and provides clear examples of how to call the API using simple and parameterized queries.",
          "questions": "1. What is the Dune API and how does it relate to blockchain technology?\n- The app technical guide explains how to access the Dune API via JavaScript, but it does not provide information on what the Dune API is or how it relates to blockchain technology.\n\n2. Are there any security measures in place to protect user data when using the Dune API?\n- The app technical guide does not mention any security measures in place to protect user data when using the Dune API, which may be a concern for a blockchain SQL analyst.\n\n3. Are there any limitations or restrictions on the types of queries that can be executed using the Dune API?\n- The app technical guide provides examples of simple and parameterized queries that can be executed using the Dune API, but it does not mention any limitations or restrictions on the types of queries that can be executed."
        },
        {
          "fileName": "api-py.md",
          "filePath": "docs/api/quick-start/api-py.md",
          "url": "https://dune.com/docs/api/quick-start/api-py.md",
          "summary": "This app technical guide covers how to access the Dune API using Python. It provides a step-by-step guide to set up the environment, install necessary libraries, and create functions to interact with the Dune API. The guide assumes prior experience with Python and covers the following topics:\n\n1. **Getting Set Up**: Installing the `requests`, `pandas`, and `jupyter notebook` libraries using `pip`.\n2. **Importing Libraries**: Importing the `requests` and `pandas` libraries.\n3. **API Keys**: Setting up the API key and header for making API calls.\n4. **Simplifying URL Generation**: Creating a function to generate URLs for different API endpoints.\n5. **Wrapping API Endpoints in Functions**: Defining functions to execute queries, get query status, get query results, and cancel query execution.\n6. **Using the Dune API**: Demonstrating how to execute a query, get query execution status, get query results, and cancel query execution.\n7. **Parameterized Queries**: Defining a function to execute queries with parameters and demonstrating its usage.\n\nThe guide includes examples of function calls and their expected outputs, making it easy for users to follow along and interact with the Dune API using Python.",
          "questions": "1. **How do I pass my API key to the Dune API?**\n\n   You need to pass your API key in the header of your API calls. In the provided code, you can set your API key in the `API_KEY` variable and the header is set in the `HEADER` variable as `{\"x-dune-api-key\" : API_KEY}`.\n\n2. **How can I execute a parameterized query using the provided functions?**\n\n   You can use the `execute_query_with_params` function to execute a parameterized query. You need to pass the `query_id` and a dictionary containing the parameter values as arguments to this function.\n\n3. **How can I cancel the execution of a running query?**\n\n   You can use the `cancel_query_execution` function to cancel the execution of a running query. You need to pass the `execution_id` of the running query as an argument to this function."
        },
        {
          "fileName": "api-ready-queries.md",
          "filePath": "docs/api/quick-start/api-ready-queries.md",
          "url": "https://dune.com/docs/api/quick-start/api-ready-queries.md",
          "summary": "# API Ready Queries\n\nThis technical guide provides a list of queries that are ready for API use in the Dune Docs project. The guide contains four queries, each with a unique query ID that can be used in any of the API guides or can be forked and modified to create a new query ID for use in the API. \n\n## Get the ERC20 balances for a given address\n\nThis query provides the ERC20 token balances for a given address. The query ID is 1616880, and it requires the following parameters:\n\n- `address`: The address that you would like to get balances for. It must be a valid EVM address.\n- `blocknumber`: The cutoff block for checking balances. Use 0 if you want the most recent block, otherwise any block number that has been processed will work (~3 minute/15 block delay).\n- `chain`: The EVM chain you'd like to check balances for. Valid choices include `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n- `dust`: Keep or remove dust tokens (worth less than $0.01). Valid choices are `keep` or `remove`.\n\nThe output columns include:\n\n- `symbol`: The token symbol, if available.\n- `notional_value`: The notional amount of tokens held, rounded to 5 decimals.\n- `total_value`: The $USD value of tokens held, rounded to 3 decimals.\n- `token_price`: The $USD price of the token.\n\n## Get all the holders and their balances for a given ERC20 address\n\nThis query provides all the holders and their balances for a given ERC20 address. The query ID is 1618116, and it requires the following parameters:\n\n- `address`: The ERC20 token address you would like to get holders of. It must be a valid EVM address.\n- `blocknumber`: The cutoff block for checking balances. Use 0 if you want the most recent block, otherwise any block number that has been processed will work (~3 minute/15 block delay).\n- `chain`: The EVM chain you'd like to check balances for. Valid choices include `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n\nThe output columns include:\n\n- `holder`: The address of the holder.\n- `holder_ens`: The ENS of the holder address, if any.\n- `notional_value`: The notional amount of tokens held, rounded to 5 decimals.\n- `total_value`: The $USD value of tokens held, rounded to 3 decimals.\n- `token_price`: The $USD price of the token.\n\n## Get the NFT balances for a given address\n\nThis query provides the NFT balances for a given address. The query ID is 1617158, and it requires the following parameters:\n\n- `address`: The address that you would like to get balances for. It must be a valid EVM address.\n- `blocknumber`: The cutoff block for checking balances. Use 0 if you want the most recent block, otherwise any block number that has been processed will work (~3 minute/15 block delay).\n- `chain`: The EVM chain you'd like to check balances for. Valid choices include `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n\nThe output columns include:\n\n- `symbol`: The symbol of the NFT, if available.\n- `name`: The name of the NFT, if available.\n- `category`: The category of the NFT, if available.\n- `token_id`: The token ID of the NFT.\n- `contract_address`: The contract address of the NFT.\n- `acquired_how`: Whether the NFT was `minted` or `transferred/bought`.\n- `acquired_on_block_number`: The block number that the NFT was received on.\n\n## Get all the holders and their balances for a given NFT address\n\nThis query provides all the holders and their balances for a given NFT address. The query ID is 1618122, and it requires the following parameters:\n\n- `address`: The NFT address that you would like to get holders of. It must be a valid EVM address.\n- `blocknumber`: The cutoff block for checking balances. Use 0 if you want the most recent block, otherwise any block number that has been processed will work (~3 minute/15 block delay).\n- `chain`: The EVM chain you'd like to check balances for. Valid choices include `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n\nThe output columns include:\n\n- `holder`: The address of the holder.\n- `holder_ens`: The ENS of the holder address, if any.\n- `tokens_held`: The number of NFTs from this contract held.\n- `token_ids`: An array of all the token IDs held.",
          "questions": "1. What are the valid choices for the `chain` parameter in each of the queries?\n- Valid choices for the `chain` parameter in each of the queries are `ethereum`, `polygon`, `bnb`, `optimism`, `arbitrum`, `avalanche_c`, and `gnosis`.\n\n2. What is the delay between block processing and when the `blocknumber` parameter can be used in each of the queries?\n- The delay between block processing and when the `blocknumber` parameter can be used in each of the queries is approximately 3 minutes or 15 blocks.\n\n3. What is the difference between the `notional_value` and `total_value` output columns in each of the queries?\n- The `notional_value` output column in each of the queries represents the notional amount of tokens or NFTs held, rounded to 5 decimals. The `total_value` output column represents the $USD value of tokens or NFTs held, rounded to 3 decimals."
        },
        {
          "fileName": "community-clients.md",
          "filePath": "docs/api/quick-start/community-clients.md",
          "url": "https://dune.com/docs/api/quick-start/community-clients.md",
          "summary": "# Community Clients\n\nThis section of the Dune Docs project provides a list of Dune API clients built by the community. The purpose of this guide is to showcase the work of the community and provide information on how to use these clients. \n\nThe guide starts with a warning disclaimer that the clients listed are not directly maintained by the Dune team. This is important information for users to be aware of before using any of the clients listed. \n\nThe guide then proceeds to list the API clients built by the community. Each client is described in detail, including the name of the client, the person or team who built it, and where it can be found. \n\nFor example, the Cow Protocol Python Client was built by [@bh2smith](https://dune.com/bh2smith) and the team at [Cow Protocol](https://dune.com/cowprotocol). It can be found on [PyPi](https://pypi.org/project/dune-client/). The guide provides a simple pip install command to get started quickly and a link to the client's GitHub page for more information. \n\nSimilarly, the Cow Protocol Typescript Client was also built by [@bh2smith](https://dune.com/bh2smith) and can be found on [npm](https://www.npmjs.com/package/@cowprotocol/ts-dune-client). The guide provides an example of how to install it using yarn. \n\nThe guide also lists a Go client built by Dune team member [@theedgeofrage](https://dune.com/theedgeofrage) and a Ruby client built by [@shellandbull](https://github.com/shellandbull). \n\nOverall, this guide provides valuable information for users who want to use Dune API clients built by the community. It showcases the work of the community and provides instructions on how to use these clients.",
          "questions": "1. What is the purpose of the Dune API clients listed in this technical guide?\n- The purpose of the Dune API clients is not explicitly stated in the technical guide, but it appears that they are built by the community to interact with the Dune API.\n\n2. Who maintains the Dune API clients listed in this technical guide?\n- The Dune team does not directly maintain the API clients listed in this technical guide. \n\n3. What programming languages are the Dune API clients built in?\n- The Dune API clients listed in this technical guide are built in Python, TypeScript, Go, and Ruby."
        },
        {
          "fileName": "index.md",
          "filePath": "docs/api/quick-start/index.md",
          "url": "https://dune.com/docs/api/quick-start/index.md",
          "summary": "# API Quick Start Guide\n\nThe API Quick Start Guide is a part of the Dune Docs project and provides a quick and easy way to get started with the Dune Analytics API. The guide is designed to help users who are new to the API and want to quickly learn how to use it. \n\nThe guide covers the following topics:\n\n## Endpoints\n\nThe guide provides example queries for NFT or ERC20 balances or holders. Users can check out these endpoints to get started with the API.\n\n## Ingestion Pipeline\n\nThe guide provides a link to a Python and Celery-based ingestion pipeline for users who are setting up an ingestion pipeline. This pipeline can be used to extract, transform, and load data from the API.\n\n## Quick Start Guides\n\nThe guide provides quick start guides for Python, Javascript, and Community Clients. These guides provide step-by-step instructions on how to get started with the API using these programming languages. \n\nFor example, the Python guide provides instructions on how to install the Dune Analytics Python client, authenticate with the API, and make queries. \n\nOverall, the API Quick Start Guide is a useful resource for users who want to quickly get started with the Dune Analytics API. It provides clear and concise instructions on how to use the API and is a great starting point for users who are new to the API.",
          "questions": "1. What type of data does this API handle?\n- The API provides example queries for NFT or ERC20 balances or holders, which may be of interest to a blockchain SQL analyst.\n\n2. Are there any specific programming languages or tools recommended for working with this API?\n- The API offers quick start guides for Python and Javascript, as well as a community clients guide, which may be helpful for a blockchain SQL analyst looking to integrate with the API.\n\n3. Is there any information on how the API handles data ingestion and transformation?\n- The guide includes a link to a Python and Celery-based ingestion pipeline, which may be of interest to a blockchain SQL analyst looking to work with the API's data."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc/docs/json/docs/api/quick-start` folder contains a collection of app technical guides that focus on helping users get started with the Dune Analytics API. These guides cover various programming languages and provide step-by-step instructions on how to interact with the API, making it easy for users to fetch data and integrate it into their projects.\n\nFor example, the `api-js.md` guide provides a detailed walkthrough on how to access the Dune API using JavaScript. It assumes the reader has some familiarity with Node.js, NPM, and NVM. The guide demonstrates how to set up the environment, install necessary packages, and call the Dune API using simple and parameterized queries. This guide is particularly useful for developers who want to use the Dune API in their JavaScript projects.\n\nSimilarly, the `api-py.md` guide covers how to access the Dune API using Python. It provides instructions on setting up the environment, installing required libraries, and creating functions to interact with the Dune API. This guide is beneficial for users who prefer working with Python and want to fetch data from the Dune API for their projects.\n\nThe `api-ready-queries.md` guide offers a list of ready-to-use queries that can be consumed by the API. These queries cover various use cases, such as fetching ERC20 or NFT balances for a given address or retrieving all holders and their balances for a specific ERC20 or NFT address. Users can utilize these queries as a starting point and modify them according to their needs.\n\nThe `community-clients.md` guide showcases Dune API clients built by the community. It lists clients for different programming languages, such as Python, TypeScript, Go, and Ruby, along with their creators and installation instructions. This guide is valuable for users who want to use community-built clients to interact with the Dune API.\n\nLastly, the `index.md` guide serves as an API Quick Start Guide, providing an overview of the available guides and resources for users who are new to the Dune Analytics API. It directs users to the appropriate guides based on their preferred programming language and use case.\n\nOverall, the guides in this folder are designed to help users quickly get started with the Dune Analytics API, regardless of their programming language preference. They provide clear instructions, examples, and resources to make it easy for users to fetch data from the API and integrate it into their projects.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc/docs/json/docs/api` folder contains a comprehensive set of technical guides and resources for developers working with the Dune Analytics API. These guides cover various aspects of the API, such as authentication, rate limiting, billing, pricing, and functionality, as well as provide quick-start guides for different programming languages.\n\nFor example, the `index.md` file in this folder serves as a high-level overview of the Dune API, explaining its purpose, how it works, and how to get started with it. This guide is particularly useful for developers who are new to the Dune API and want to understand its capabilities and limitations.\n\nThe `FAQ` subfolder contains a collection of technical guides that provide detailed information and answers to frequently asked questions about the Dune API. These guides are essential for developers who are building applications using the Dune API and need to understand various aspects of the API, such as authentication, rate limiting, billing, pricing, and functionality. For instance, the `TOS.md` file covers the Dune API Terms of Service (TOS), which outlines the rules and guidelines for using the API. Developers must understand and comply with these terms to use the API effectively and avoid legal issues.\n\nThe `api-reference` subfolder contains a collection of technical guides that provide comprehensive information on various aspects of the Dune API. These guides are essential for developers working with the Dune Docs project, as they offer detailed explanations, examples, and troubleshooting tips for using the API effectively. For example, the **Authentication** guide (`authentication.md`) focuses on the process of authenticating API requests in the Dune app, highlighting the importance of API keys and providing a method for adding the \"x-dune-api-key\" property to the request header.\n\nThe `quick-start` subfolder contains a collection of app technical guides that focus on helping users get started with the Dune Analytics API. These guides cover various programming languages and provide step-by-step instructions on how to interact with the API, making it easy for users to fetch data and integrate it into their projects. For example, the `api-js.md` guide provides a detailed walkthrough on how to access the Dune API using JavaScript, demonstrating how to set up the environment, install necessary packages, and call the Dune API using simple and parameterized queries.\n\nOverall, the guides and resources in the `.autodoc/docs/json/docs/api` folder are essential for developers working with the Dune Analytics API. They provide a comprehensive understanding of the API endpoints, common errors, and best practices, helping developers use the API effectively and troubleshoot any issues that may arise.",
  "questions": ""
}