{
  "folderName": "api-reference",
  "folderPath": ".autodoc\\docs\\json\\docs\\api\\api-reference",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\api\\api-reference",
  "files": [
    {
      "fileName": "authentication.md",
      "filePath": "docs\\api\\api-reference\\authentication.md",
      "url": "https://dune.com/blob/master/api\\api-reference\\authentication.md",
      "summary": "# Authentication\n\nThis section of the Dune Docs technical guide covers how to authenticate API requests for the Dune API. The guide emphasizes the importance of keeping API keys secure and not sharing them in publicly accessible areas. \n\nTo authenticate requests, the Dune API uses API keys. These keys are used to determine the permissions of private queries and which account to bill for the requests. The guide provides an example of how to add an \"x-dune-api-key\" property to the request header for authentication. This property is required for all request types. \n\nThe guide also includes an example of how to perform authentication with an Execute POST API request using cURL. \n\nOverall, this section of the technical guide is important for developers working with the Dune API to ensure that their requests are properly authenticated and secure.",
      "questions": "1. What type of authentication does the Dune API use?\n   - The Dune API uses API keys to authenticate requests.\n\n2. What is the purpose of the \"x-dune-api-key\" property in the request header?\n   - The \"x-dune-api-key\" property is used for authentication with the API and is needed on all request types.\n\n3. What precautions should be taken with API keys?\n   - API keys should be kept secure and not shared in publicly accessible areas such as GitHub or client-side code."
    },
    {
      "fileName": "cancel-execution.md",
      "filePath": "docs\\api\\api-reference\\cancel-execution.md",
      "url": "https://dune.com/blob/master/api\\api-reference\\cancel-execution.md",
      "summary": "The app technical guide covers the process of canceling execution requests in the Dune API. The guide is located in the `app` folder of the Dune Docs project. The guide provides a detailed explanation of how to cancel an execution request, including the arguments required, the expected return value, and examples of how to make a request using cURL or a POST request. \n\nThe guide starts with a brief introduction to the Cancel Execution API, followed by a header for the POST request method. The POST request method is used to cancel an execution request. The header provides a brief description of the method and what it does. \n\nThe next header is Arguments, which explains that no arguments are required for the Cancel Execution API. \n\nThe Returns header explains that the API returns a boolean value indicating whether the execution was successfully canceled. \n\nThe Example Request header provides an example of how to make a request to the Cancel Execution API. The example shows how to pass the `execution_id` obtained from making an Execute Query ID POST request to complete a Cancel Execution API request. \n\nThe cURL header provides an example of how to make a request using cURL. The example shows how to use the `-X POST` flag to specify the POST request method, and how to pass the `execution_id` and `api_key` as parameters. \n\nThe Example Response header provides an example of what the response from the Cancel Execution API looks like. The response is delivered in JSON format and contains a `success` boolean value indicating whether the request to cancel the query execution was made successfully. \n\nOverall, the Cancel Execution API technical guide provides a comprehensive explanation of how to cancel execution requests in the Dune API. The guide is useful for developers who need to cancel execution requests and provides clear examples of how to make requests using different methods.",
      "questions": "1. What is the purpose of the Dune API and how does it relate to blockchain technology?\n- This app technical guide does not provide information on the purpose of the Dune API or its relation to blockchain technology.\n\n2. Can the Cancel Execution API request be used to cancel multiple execution requests at once?\n- The app technical guide does not provide information on whether the Cancel Execution API request can be used to cancel multiple execution requests at once.\n\n3. Are there any limitations or restrictions on canceling execution requests using the Dune API?\n- The app technical guide does not provide information on any limitations or restrictions on canceling execution requests using the Dune API."
    },
    {
      "fileName": "errors.md",
      "filePath": "docs\\api\\api-reference\\errors.md",
      "url": "https://dune.com/blob/master/api\\api-reference\\errors.md",
      "summary": "This app technical guide covers how to handle errors that may occur when working with the Dune API. The guide is divided into two main sections: Invalid API Key and An Internal Error Occurred. Each section provides a response object and a list of checks to help users troubleshoot the issue. \n\nThe Invalid API Key section provides a response object of {'error': 'invalid API Key'} and two checks to help users resolve the issue. The first check is to ensure that the API key is passed to the endpoint in a header, as described in the Authentication section. The second check is to ensure that the API key is correctly entered. \n\nThe An Internal Error Occurred section provides a response object of {'error': 'An internal error occurred'} and two checks to help users resolve the issue. The first check is to ensure that the query_id entered for GET endpoints is correct. The second check is to ensure that the execution_id obtained from the GET endpoint is correctly passed on to the POST endpoint for POST endpoints. \n\nThe guide also includes a note that if users find the guide too technical or confusing, they can reach out to the Dune API team for support on the #dune-api Discord channel. \n\nOverall, this guide is a helpful resource for users of the Dune API who may encounter errors and need guidance on how to resolve them.",
      "questions": "1. What is the Dune API and how does it relate to blockchain technology?\n- The app technical guide does not provide information on what the Dune API is or how it relates to blockchain technology.\n\n2. Are there any specific error codes related to blockchain transactions or smart contracts?\n- The app technical guide does not provide information on specific error codes related to blockchain transactions or smart contracts.\n\n3. Is there any guidance on how to troubleshoot errors related to data retrieval or manipulation?\n- The app technical guide provides some guidance on how to troubleshoot errors related to data retrieval or manipulation, but it is not exhaustive and may not cover all possible scenarios."
    },
    {
      "fileName": "execute-query-id.md",
      "filePath": "docs\\api\\api-reference\\execute-query-id.md",
      "url": "https://dune.com/blob/master/api\\api-reference\\execute-query-id.md",
      "summary": "# Explanation of the App Technical Guide\n\nThe app technical guide is a documentation for the Dune Docs project, which explains how to execute a query with or without parameters to retrieve data. The guide is focused on the `query` folder of the project. \n\nThe guide starts with a header that explains the purpose of the file, which is to execute a query ID. The header is followed by a section that explains how to execute a query with or without parameters to retrieve data. \n\nThe next section of the guide explains the arguments required to execute the query. In this case, no arguments are required, but query parameters can be added optionally. The guide provides an example of how to add query parameters using cURL. \n\nThe guide then explains what the API returns when the query is executed. In this case, the API returns an `execution_id` for the specified request. The guide provides an example of what the response looks like in JSON format. \n\nThe guide also provides an example request using cURL to execute the query. The example request includes the API endpoint and the query ID. The guide also provides an example of how to execute the query with parameters using cURL. \n\nFinally, the guide explains what the `execution_id` and `state` mean in the response. The `execution_id` is a unique ID that is generated every time the API is called, and the `state` is the current state of the query's execution. \n\nOverall, the app technical guide provides a detailed explanation of how to execute a query with or without parameters to retrieve data. The guide is focused on the `query` folder of the Dune Docs project and provides examples of how to use cURL to execute the query.",
      "questions": "1. What is the purpose of the `execution_id` returned by the API?\n   \n   The `execution_id` is a unique ID generated every time the API is called, and it can be saved to pass on to other API endpoints.\n\n2. Can this API be used to execute queries on a blockchain database?\n   \n   The app technical guide does not provide information on whether this API can be used to execute queries on a blockchain database or not.\n\n3. Are there any limitations on the number or size of query parameters that can be passed to the API?\n   \n   The app technical guide does not provide information on any limitations on the number or size of query parameters that can be passed to the API."
    },
    {
      "fileName": "execution-results.md",
      "filePath": "docs\\api\\api-reference\\execution-results.md",
      "url": "https://dune.com/blob/master/api\\api-reference\\execution-results.md",
      "summary": "This technical guide covers how to get the results data of an execution request in the Dune Docs project. The guide provides information on how to use the Execution Results API to retrieve the status, metadata, and query results from a query execution. The guide includes a detailed explanation of the arguments and returns of the API, as well as an example request and response in JSON and CSV formats. \n\nThe guide also provides information on the different properties of the query execution, such as the execution ID, query ID, state, submitted_at, expires_at, execution_started_at, and execution_ended_at. Additionally, the guide explains the properties of the result, including rows and metadata, such as column_names, result_set_bytes, total_row_count, datapoint_count, pending_time_millis, and execution_time_millis. \n\nThe guide also includes a FAQ section that answers common questions about reading results data, such as whether data can be ingested by getting a direct connection to the database, whether query results data are saved for faster retrieval, how long the results data from an execution are stored for, and how much data can be retrieved in a single API result call. \n\nOverall, this guide provides a comprehensive overview of how to use the Execution Results API to retrieve query execution results in the Dune Docs project.",
      "questions": "1. What is the purpose of the Dune Docs app and how does it relate to blockchain technology?\n   \n   Answer: The app technical guide does not provide information on the purpose of the Dune Docs app or its relation to blockchain technology. Further documentation or context is needed to answer this question.\n\n2. How does the app handle security and authentication for API requests, particularly for sensitive data related to blockchain transactions?\n   \n   Answer: The app technical guide does not provide information on security and authentication for API requests. Further documentation or context is needed to answer this question.\n\n3. What is the maximum number of rows or datapoints that can be retrieved in a single API result call, and how does this limit impact the app's usability for analyzing large datasets related to blockchain transactions?\n   \n   Answer: The app technical guide states that there is currently a 1GB limit on the amount of data that can be retrieved in a single API result call. However, it is unclear how this limit impacts the app's usability for analyzing large datasets related to blockchain transactions. Further documentation or context is needed to answer this question."
    },
    {
      "fileName": "execution-status.md",
      "filePath": "docs\\api\\api-reference\\execution-status.md",
      "url": "https://dune.com/blob/master/api\\api-reference\\execution-status.md",
      "summary": "# Execution Status\n\nThis technical guide explains how to check the status of an execution request in the Dune Docs project. The guide is focused on the `app` folder of the project. The guide provides a detailed explanation of the `GET` Execution Status API request, including its arguments, returns, example request, and example response.\n\nThe Arguments section of the guide explains that no arguments are required for the API request. The Returns section explains that the API request returns the status of a query execution along with relevant metadata of the results if the execution is completed.\n\nThe Example Request section provides an example of how to pass the `execution_id` obtained from making an Execute Query ID POST request to complete an Execution Status API request. The example shows the endpoint URL and the cURL command to make the request.\n\nThe Example Response section provides two examples of the JSON response that the API request returns. The first example shows the response when the query is still executing, while the second example shows the response when the execution is complete. The section explains the meaning of each property in the response, including `execution_id`, `query_id`, `state`, `submitted_at`, `expires_at`, `execution_started_at`, `execution_ended_at`, and `result_metadata`.\n\nThe guide also includes a Check Execution Status FAQ section that answers common questions about the different status codes for `state`. The section explains the difference between the states \"Executing\" and \"Pending\" and provides a list of all status codes for reference.\n\nOverall, this technical guide provides a comprehensive explanation of how to check the status of an execution request in the Dune Docs project. It is a useful resource for developers who need to monitor the progress of their query executions.",
      "questions": "1. What is the purpose of this API and how does it relate to blockchain technology?\n   - This API is used to check the status of a query execution request. It is not directly related to blockchain technology, but it could potentially be used in conjunction with blockchain data queries.\n2. What authentication methods are required to use this API?\n   - The cURL example shows that an API key is required to make requests to this API. It is unclear from this documentation whether any other authentication methods are supported.\n3. Are there any limitations on the size or complexity of queries that can be executed using this API?\n   - The documentation does not provide any information on limitations for query size or complexity. A blockchain SQL analyst may need to test the API with various query types and sizes to determine any potential limitations."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\api\\api-reference\\index.md",
      "url": "https://dune.com/blob/master/api\\api-reference\\index.md",
      "summary": "# API Reference\n\nThis section of the Dune Docs project covers the API endpoints and common errors that may occur when using them. The purpose of this guide is to provide developers with a comprehensive understanding of the API and how to use it effectively.\n\n## Authentication\n\nThis header covers the authentication process for accessing the API. It explains the different authentication methods available and how to use them. For example, it may include information on how to generate an API key or how to use OAuth to authenticate requests.\n\n## Execute Query ID\n\nThis header covers the endpoint for executing a query by ID. It explains how to use this endpoint to execute a query and retrieve the results. It may include information on the expected input parameters and the format of the response.\n\n## Execution Status\n\nThis header covers the endpoint for checking the status of a query execution. It explains how to use this endpoint to retrieve the status of a query execution and what the different status codes mean. It may also include information on how to handle errors that may occur during the execution process.\n\n## Execution Results\n\nThis header covers the endpoint for retrieving the results of a query execution. It explains how to use this endpoint to retrieve the results of a query and what the different response formats are. It may also include information on how to handle errors that may occur when retrieving the results.\n\n## Cancel Execution\n\nThis header covers the endpoint for canceling a query execution. It explains how to use this endpoint to cancel a query that is currently executing and what the expected response is. It may also include information on how to handle errors that may occur when canceling a query.\n\n## Error Codes\n\nThis header covers the different error codes that may be returned by the API. It explains what each error code means and how to handle it. It may also include information on how to troubleshoot common errors that may occur when using the API.\n\nExample: If a developer encounters an error code when using the API, they can refer to this section of the guide to understand what the error means and how to resolve it.\n\nOverall, this API Reference guide provides developers with a comprehensive understanding of the API endpoints and common errors that may occur when using them. It is a valuable resource for anyone looking to integrate with the Dune Docs API.",
      "questions": "1. What type of data is being accessed through the API endpoints listed in this technical guide?\n- It is unclear from this technical guide what type of data is being accessed through the API endpoints. \n\n2. Are there any security measures in place to protect the data being accessed through the API endpoints?\n- It is unclear from this technical guide whether there are any security measures in place to protect the data being accessed through the API endpoints. \n\n3. Is there any information on how to handle errors that may occur when using the API endpoints?\n- Yes, there is information on how to handle errors that may occur when using the API endpoints in the \"Error Codes\" section."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc\\docs\\json\\docs\\api\\api-reference` folder contains a collection of technical guides that provide comprehensive information on how to interact with the Dune API. These guides cover various aspects of the API, such as authentication, executing queries, checking execution status, retrieving results, and handling errors. The primary focus of these guides is on the `api` folder of the Dune Docs project.\n\nFor example, the `authentication.md` guide explains the importance of securing API keys and demonstrates how to add the \"x-dune-api-key\" property to the request header for proper authentication. This guide is essential for developers to ensure their API requests are secure and properly authenticated.\n\nThe `execute-query-id.md` guide provides a detailed explanation of how to execute a query with or without parameters to retrieve data. It includes examples of how to use cURL to execute the query, making it a valuable resource for developers looking to retrieve data from the Dune API.\n\nThe `execution-status.md` guide offers a comprehensive explanation of how to check the status of an execution request. It includes example requests and responses, as well as a FAQ section that answers common questions about the different status codes for query execution states. This guide is particularly useful for developers who need to monitor the progress of their query executions.\n\nThe `execution-results.md` guide covers how to retrieve the results data of an execution request. It provides information on the different properties of the query execution and the result, as well as a FAQ section that answers common questions about reading results data.\n\nThe `cancel-execution.md` guide explains the process of canceling execution requests in the Dune API. It provides a detailed explanation of how to cancel an execution request, including the arguments required, the expected return value, and examples of how to make a request using cURL or a POST request.\n\nLastly, the `errors.md` guide helps users handle errors that may occur when working with the Dune API. It provides response objects and troubleshooting steps for common errors, such as Invalid API Key and An Internal Error Occurred.\n\nOverall, the guides in the `.autodoc\\docs\\json\\docs\\api\\api-reference` folder provide a comprehensive understanding of the Dune API and its various features. These guides are essential for developers looking to integrate with the Dune API and work effectively with its endpoints and functionalities.",
  "questions": ""
}