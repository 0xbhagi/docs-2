{
  "folderName": "app",
  "folderPath": ".autodoc/docs/json/docs/app",
  "url": "https://dune.com/.autodoc/docs/json/docs/app",
  "files": [
    {
      "fileName": "decoding-contracts.md",
      "filePath": "docs/app/decoding-contracts.md",
      "url": "https://dune.com/docs/app/decoding-contracts.md",
      "summary": "# Decoding Contracts\n\nThis technical guide provides a comprehensive overview of Decoded Contracts in Dune, including how to submit them for decoding. Decoded Contracts are human-readable tables for each event and function defined in the smart contract's ABI. The guide explains how to submit a new contract for decoding, track submissions, and provides answers to frequently asked questions.\n\nThe guide starts by explaining how Decoding works and what Decoded tables are available. It then goes on to explain how to submit a new contract for decoding. Contracts can be submitted through the New contract form, the My Creations > Contracts Tab, or within the dataset explorer in the Query editor's sidebar. The contract submission form consists of two steps: Blockchain and address, and Contract details. The guide provides examples of how to submit a contract, including an example of submitting the USDT contract in Optimism.\n\nThe guide also explains advanced options for submitting contracts, such as indexing multiple contract addresses under the same submission. It provides two strategies for detecting other contracts for decoding: bytecode match and factory instances. The guide warns that these options should only be used if the user is extremely familiar with the project's architecture and deployment hierarchy.\n\nThe guide also explains how to track submissions and their processing status. Users can view their submissions at any time by navigating to My Creations > Contracts. The guide also provides answers to frequently asked questions, such as how to submit contract information manually, how to submit a Proxy contract, how to re-submit a contract, and how to submit Diamond Proxy contracts.\n\nOverall, this guide provides a detailed explanation of how to submit contracts for decoding in Dune, including advanced options and frequently asked questions. It is a valuable resource for anyone looking to submit contracts for decoding in Dune.",
      "questions": "1. What is the purpose of submitting contracts for decoding in Dune Docs?\n- Contracts are decoded into human-readable tables for each event and function defined in the smart contract's ABI, making it easier to work with raw transaction, log, and trace data.\n\n2. How can Dune Docs automatically detect and index multiple contract addresses under the same submission?\n- Dune Docs has two strategies for detecting other contracts for decoding: bytecode match and factory instances.\n\n3. What should be done if a submission gets rejected in Dune Docs?\n- To avoid rejection, accurate contract information should be submitted. If a submission gets rejected, users can head over to the #decoding Discord channel for assistance."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/app/index.md",
      "url": "https://dune.com/docs/app/index.md",
      "summary": "# App Overview\n\nThe App Overview section of the Dune Docs project provides an introduction to the Dune.com app and its features. The section is aimed at users who are already familiar with the basics of the app and are looking for more in-depth explanations and how-to guides for leveraging the Dune app interface.\n\nThe section is divided into five subsections, each of which focuses on a specific feature of the app:\n\n- **Queries**: This subsection provides guides and explanations for data explorer and query creation questions. Users can learn how to create custom queries and explore data using the Dune app interface. Example queries are provided to help users get started.\n\n- **Visualizations**: This subsection provides guides and explanations for visualization creation, formatting, and embedding questions. Users can learn how to create custom visualizations and embed them in their own websites or applications. Example visualizations are provided to help users get started.\n\n- **Dashboards**: This subsection is a collection of example dashboard how-to's and use cases to generate inspiration from! Users can learn how to create custom dashboards and use them to monitor data and track key metrics. Example dashboards are provided to help users get started.\n\n- **Decoding**: This subsection explains the process for submitting a contract for decoding on EVM chains. Users can learn how to decode smart contracts and explore their functionality using the Dune app interface. Example contracts are provided to help users get started.\n\n- **Teams**: This subsection explains how organizations can use the Teams feature to form a combined profile for wizards to contribute and work together under. Users can learn how to create and manage teams using the Dune app interface. Example teams are provided to help users get started.\n\nOverall, the App Overview section of the Dune Docs project provides a comprehensive introduction to the Dune.com app and its features. It is a valuable resource for users who are looking to get the most out of the app and explore its full potential.",
      "questions": "1. What blockchain data does the dune.com app work with?\n- The app technical guide does not provide specific information on the type of blockchain data that the dune.com app works with.\n\n2. Is there any integration with SQL databases in the app?\n- The app technical guide does not mention any integration with SQL databases.\n\n3. Are there any security measures in place to protect user data?\n- The app technical guide does not provide information on security measures in place to protect user data."
    },
    {
      "fileName": "teams.md",
      "filePath": "docs/app/teams.md",
      "url": "https://dune.com/docs/app/teams.md",
      "summary": "# Teams\n\nThis technical guide covers the Teams feature of the Dune app. Teams are shared workspaces for Wizards to collaborate within. The guide explains the benefits of creating a Team, such as collaborating on the same content, having a separate workspace for each Team, and showcasing all of a Team's work in one place. It also explains the different user roles available for Team members, including Viewer, Editor, and Admin.\n\nThe guide provides step-by-step instructions for creating a Team, adding users, and transferring content to a Team. It also explains how to find a Team's content and filter it by owner. Additionally, the guide includes an FAQ section that addresses common questions, such as whether private content is supported in Teams and how to edit a user's role.\n\nOverall, this guide is a comprehensive resource for anyone looking to use the Teams feature of the Dune app. It provides clear explanations and helpful visuals to guide users through the process of creating and managing Teams. For example, the guide includes screenshots of the Teams settings page and the My Creations page to help users navigate the app.",
      "questions": "1. What is the purpose of Dune Teams in the context of blockchain and SQL analysis?\n- This app technical guide does not provide information on the specific use of Dune Teams in the context of blockchain and SQL analysis. Further research or documentation may be necessary to answer this question.\n\n2. Can Dune Teams support collaboration on blockchain and SQL analysis projects?\n- Yes, Dune Teams are designed to support collaboration on shared Queries and Dashboards, which could include blockchain and SQL analysis projects.\n\n3. Is there a way to restrict access to private content within Dune Teams?\n- The app technical guide states that support for private content in Teams is planned for later in the year, but it is not currently available."
    }
  ],
  "folders": [
    {
      "folderName": "dashboards",
      "folderPath": ".autodoc/docs/json/docs/app/dashboards",
      "url": "https://dune.com/.autodoc/docs/json/docs/app/dashboards",
      "files": [
        {
          "fileName": "dashboards.md",
          "filePath": "docs/app/dashboards/dashboards.md",
          "url": "https://dune.com/docs/app/dashboards/dashboards.md",
          "summary": "# How To Create a Dashboard\n\nThis technical guide covers the process of creating a dashboard on Dune, which is where the app's content lives and gets discovered. Dashboards consist of widgets, which can either be visualizations or text boxes. It is also possible to embed images or GIFs inside of the text box. The guide explains how to create a dashboard, add visualizations, add text boxes, and arrange the layout of the dashboard.\n\nTo create a new dashboard, navigate to the \"Discover\" page and click on the \"new Dashboard\" button on the right. The initial name that you give to your dashboard will also be the URL slug. You can't change the URL slug afterwards, so be mindful of the name you choose. Changing the dashboard's display name is always possible though.\n\nVisualizations can be added to the dashboard by going into the editor mode and clicking on the corresponding button. To go into editor mode, first open one of your own dashboards and click on the edit button on the top right.\n\nText boxes can be added to the dashboard by going into editor mode and clicking on \"add text widget\". This will open a simple text editor window. Text boxes support a subset of markdown, which is explained in the guide. You can manipulate text and embed images and GIFs.\n\nThe guide also explains how to embed images and GIFs into the dashboard. Since images cannot be stored locally on Dune's servers, you need to upload your images somewhere else or find the raw file somewhere on the internet. The syntax for embedding images is also explained in the guide.\n\nFinally, the guide explains how to arrange the different widgets on the dashboard in whatever way you like. Widgets will always try to move upwards, so if you want to create a visual divider section in your dashboard, it is advised to create a big text box as a divider.\n\nOverall, this guide provides a comprehensive overview of how to create a dashboard on Dune, including adding visualizations, text boxes, and images/GIFs, as well as arranging the layout of the dashboard. The guide is accompanied by examples and screenshots to make the process easier to understand.",
          "questions": "1. What is the purpose of Dune Docs and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of Dune Docs or its relation to blockchain technology, so a blockchain SQL analyst may have this question.\n\n2. Can Dune Docs integrate with blockchain databases or APIs?\n- The app technical guide does not provide information on whether Dune Docs can integrate with blockchain databases or APIs, so a blockchain SQL analyst may have this question.\n\n3. Are there any security measures in place to protect sensitive data on Dune Docs dashboards?\n- The app technical guide does not provide information on security measures in place to protect sensitive data on Dune Docs dashboards, so a blockchain SQL analyst may have this question."
        },
        {
          "fileName": "ecosystem-dashboards.md",
          "filePath": "docs/app/dashboards/ecosystem-dashboards.md",
          "url": "https://dune.com/docs/app/dashboards/ecosystem-dashboards.md",
          "summary": "# Ecosystem Dashboards\n\nThis technical guide covers the Ecosystem Dashboards feature of the Dune app. The purpose of this feature is to provide users with a way to explore and discover general ecosystem-level metrics related to blockchain data. \n\nThe first section of the guide focuses on Gas Prices, which is a dashboard created by @kroeger0x. This dashboard provides data on average gas spent per transaction, gas limit, gas spent in total in a block, and more. The dashboard is designed to be easy to view and understand, and it is accessible through Dune. Two screenshots of the dashboard are provided as examples.\n\nThe second section of the guide focuses on DeFi Adoption, which is a dashboard created by @rchen8. This dashboard compiles user numbers from all important DeFi protocols into one place. The purpose of this dashboard is to provide users with a way to easily track DeFi adoption over time. A screenshot of the dashboard is provided as an example.\n\nOverall, the Ecosystem Dashboards feature of the Dune app is designed to provide users with a way to explore and discover general ecosystem-level metrics related to blockchain data. The Gas Prices and DeFi Adoption dashboards are two examples of the types of metrics that can be explored using this feature.",
          "questions": "1. What blockchain data is available in Dune and how is it organized? \n2. Can Dune be used to analyze specific blockchain transactions or only general ecosystem-level metrics? \n3. Are there any limitations or potential biases in the data presented in the Gas Prices and DeFi Adoption dashboards?"
        },
        {
          "fileName": "index.md",
          "filePath": "docs/app/dashboards/index.md",
          "url": "https://dune.com/docs/app/dashboards/index.md",
          "summary": "# Use Cases\n\nThe app technical guide for Dune Docs covers the use cases of the Dune platform, which is a blockchain data analytics platform. The guide explains that Dune serves three different groups: Dune Spectators, Dune Wizards, and Dune Patrons. Dune Spectators can view on-chain data via dashboards on Dune.com. Dune Wizards take the raw data and use it to tell stories via dashboards, visualizations, and queries. Dune Patrons leverage Dune's powers to solve problems and share insights within their organizations.\n\nThe guide goes on to explain that nearly the entire world of blockchain data analytics can be explored with Dune, and there aren't many limitations to what you can query and visualize with Dune. However, to help users get a clearer picture of the type of problems they can explore and solve with Dune, the guide establishes a few broad use cases: Project Dashboards, Sector Dashboards, and Ecosystem Dashboards.\n\nThe guide also provides a link to Dune's Twitter account, where users can follow and see how people are currently using Dune. \n\nOverall, this guide provides an overview of the Dune platform and its capabilities. It explains the different groups that can benefit from using Dune and the types of problems that can be explored and solved with Dune. The guide is useful for anyone who wants to understand the potential of the Dune platform and how it can be used to generate insights for themselves, their projects, or their organizations.",
          "questions": "1. What type of blockchain data does Dune ingest and analyze?\n- The app technical guide does not provide specific information on the type of blockchain data that Dune ingests and analyzes.\n\n2. Can Dune be integrated with SQL databases?\n- The app technical guide does not mention any integration with SQL databases.\n\n3. Are there any limitations to the size of data that can be queried and visualized with Dune?\n- The app technical guide states that there aren't many limitations to what can be queried and visualized with Dune, but it does not provide any specific information on size limitations."
        },
        {
          "fileName": "project-dashboards.md",
          "filePath": "docs/app/dashboards/project-dashboards.md",
          "url": "https://dune.com/docs/app/dashboards/project-dashboards.md",
          "summary": "# Project Dashboards\n\nThe Project Dashboards technical guide explains how to use this feature to track the metrics of a project. The guide is focused on the app folder of the Dune Docs project. \n\nThe guide starts by explaining that Project Dashboards allow users to easily assemble data on their favorite project in one place without having to maintain infrastructure or overhead. Users can query for the data they desire and assemble it on a Dashboard to make a Datahub for their project reality. \n\nThe guide then provides an example of a Project Dashboard for Tornado.Cash by @poma. The Dashboard shows important metrics for the protocol, such as total deposits and unique users, in an easy-to-understand format. The Dashboard also includes historical data points that show the growth in users and volume. \n\nThe guide concludes by directing users to the Dune Projects Page, where they can find many other great Dashboards. \n\nOverall, this technical guide provides a high-level overview of how to use Project Dashboards to track project metrics. It also provides a concrete example of how to use this feature in practice.",
          "questions": "1. What kind of data sources does this app support for assembling project dashboards?\n- The app technical guide mentions that users can \"simply query for the data you desire\" without having to maintain infrastructure or overhead, but it does not specify what kind of data sources are supported.\n\n2. Can this app be integrated with blockchain data sources?\n- The app technical guide does not mention anything about blockchain data sources specifically, so a blockchain SQL analyst might wonder if this app can be integrated with blockchain data sources.\n\n3. Are there any limitations to the types of metrics that can be tracked on a project dashboard?\n- The app technical guide does not mention any limitations to the types of metrics that can be tracked on a project dashboard, but a blockchain SQL analyst might want to know if there are any restrictions or limitations to the types of data that can be displayed on a dashboard."
        },
        {
          "fileName": "sector-dashboards.md",
          "filePath": "docs/app/dashboards/sector-dashboards.md",
          "url": "https://dune.com/docs/app/dashboards/sector-dashboards.md",
          "summary": "# Sector Dashboards\n\nThe Sector Dashboards feature of the Dune Docs project allows users to get an overview of an entire sector of the crypto economy and analyze what's happening in real-time. This guide provides an overview of the Sector Dashboards feature and how it can be used to evaluate different sectors of the crypto economy.\n\nThe guide provides examples of different sector-based Dune Dashboards, including Dex Metrics, Indices, and Lending. Each of these dashboards provides an overview of the entire state of a sector in one glance, making it easy to compare different products and projects with ease.\n\nThe Dex Metrics dashboard, for example, provides metrics like Dex Volume, Market Share, and Total Volume across all exchanges, along with many more stats. All of these stats and charts update in real-time and are maintained by the community. If a new DEX wants to be added to this Dashboard, all they have to do is submit their code to the public GitHub.\n\nSimilarly, the Indices dashboard allows users to evaluate the entire state of a sector in one glance to compare different products and projects with ease. The Lending dashboard provides an overview of the state of lending protocols, making it easy to compare protocol performance.\n\nOverall, the Sector Dashboards feature of the Dune Docs project provides users with a powerful tool for evaluating different sectors of the crypto economy. By providing an overview of the entire state of a sector in one glance, users can easily compare different products and projects with ease.",
          "questions": "1. What data sources does Dune Docs use to gather information for the Sector Dashboards?\n- This information is not provided in the app technical guide, so a blockchain SQL analyst may need to investigate further or reach out to the Dune Docs team for clarification.\n\n2. How frequently are the stats and charts on the Sector Dashboards updated?\n- The app technical guide states that the stats and charts update in real time, but a blockchain SQL analyst may want to confirm the frequency of updates to ensure the data is up-to-date.\n\n3. Can new sectors be added to the Sector Dashboards, or are they limited to the ones currently available?\n- The app technical guide mentions that new DEXes can be added to the Dex Metrics Dashboard, but it is unclear if new sectors can be added as well. A blockchain SQL analyst may want to investigate further or reach out to the Dune Docs team for more information."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc/docs/json/docs/app/dashboards` folder contains technical guides that focus on the dashboard features of the Dune Docs project. Dashboards are an essential part of the Dune platform, as they allow users to visualize and analyze blockchain data in a comprehensive and easy-to-understand manner. The guides in this folder cover various aspects of creating and using dashboards, as well as exploring different types of dashboards available on the platform.\n\nThe `dashboards.md` guide provides a step-by-step process on how to create a dashboard on Dune, including adding visualizations, text boxes, and images/GIFs, as well as arranging the layout of the dashboard. This guide is particularly useful for users who are new to the platform and want to create their own custom dashboards to analyze specific data.\n\nThe `ecosystem-dashboards.md` guide covers the Ecosystem Dashboards feature, which provides users with a way to explore and discover general ecosystem-level metrics related to blockchain data. This guide highlights two examples of Ecosystem Dashboards: Gas Prices and DeFi Adoption. Users interested in gaining insights into the broader blockchain ecosystem can benefit from this guide.\n\nThe `index.md` guide serves as an overview of the Dune platform and its capabilities, explaining the different groups that can benefit from using Dune and the types of problems that can be explored and solved with Dune. This guide is useful for anyone who wants to understand the potential of the Dune platform and how it can be used to generate insights for themselves, their projects, or their organizations.\n\nThe `project-dashboards.md` guide focuses on using Project Dashboards to track project metrics. It provides an example of a Project Dashboard for Tornado.Cash and directs users to the Dune Projects Page to find more dashboards. This guide is helpful for users who want to monitor the performance of specific projects in the crypto space.\n\nLastly, the `sector-dashboards.md` guide explains how to use Sector Dashboards to evaluate different sectors of the crypto economy. It provides examples of sector-based Dune Dashboards, such as Dex Metrics, Indices, and Lending. Users interested in comparing and analyzing various sectors within the crypto economy can find this guide valuable.\n\nOverall, the guides in the `.autodoc/docs/json/docs/app/dashboards` folder provide a comprehensive understanding of the dashboard features available on the Dune platform. These guides are essential for users who want to leverage the power of Dune's dashboards to analyze and visualize blockchain data effectively.",
      "questions": ""
    },
    {
      "folderName": "queries",
      "folderPath": ".autodoc/docs/json/docs/app/queries",
      "url": "https://dune.com/.autodoc/docs/json/docs/app/queries",
      "files": [
        {
          "fileName": "data-explorer.md",
          "filePath": "docs/app/queries/data-explorer.md",
          "url": "https://dune.com/docs/app/queries/data-explorer.md",
          "summary": "# The Data Explorer\n\nThis technical guide covers the Data Explorer feature of the Dune app. The Data Explorer allows users to search for blockchain and other data to use in their Queries. The guide explains how to use the Data Explorer to find the data you need. \n\nThe guide starts by explaining how to select the database you want to search in and how to enter keywords, protocol names, contract names, or event names into the search bar to bring up a list of Tables containing blockchain data that can be used in Queries. \n\nThe guide then goes on to explain how to perform advanced searches in Dune V2 and V1. The V2 section explains how to search for data in the Dune V2 database, which contains all data accessible in one data lake. The V1 section explains how to search for data in the Dune V1 Engine, which has separate databases for each blockchain. \n\nThe guide provides examples of how to search for data using keywords, how to find specific schemas, events, calls, or contracts, and how to find specific contract data. It also explains how to add references to the Query Window. \n\nThe guide includes screenshots and GIFs to illustrate how to use the Data Explorer and how to perform advanced searches. It also provides warnings and notes to alert users to the fact that the V2 Data Explorer is still in beta and that the V2 explorer is not case sensitive. \n\nOverall, this guide provides a comprehensive overview of the Data Explorer feature of the Dune app and explains how to use it to find the data you need for your Queries.",
          "questions": "1. What databases can be searched using the Data Explorer?\n- The Data Explorer allows searching for blockchain and other data to use in Queries, and users can select which database they want to search in from the dropdown list.\n2. What is the difference between the V1 and V2 versions of the Data Explorer?\n- One of the biggest changes in Dune V2 lies in its data structure, where everything is accessible in one data lake, and users can incorporate data from multiple chains in one SQL query. In contrast, V1 allows users to search for specific schemas, events, calls, or contracts.\n3. How can users add references to the Query Window?\n- To add references to the contract tables, users can click the `>>` next to the Table name, and to reference specific data within a Table, they can click its name."
        },
        {
          "fileName": "explorer-labels.md",
          "filePath": "docs/app/queries/explorer-labels.md",
          "url": "https://dune.com/docs/app/queries/explorer-labels.md",
          "summary": "# Data Explorer Labels\n\nThis technical guide covers the various labels encountered while using the Data Explorer in the Dune Docs project. The guide is divided into four sections: Blockchain Icons, Dataset Icons, Dataset Labels, and Data Type Labels.\n\nThe Blockchain Icons section provides a table of icons and their descriptions for each blockchain available in the data sets. For instance, the Ethereum blockchain icon represents raw data, decoded project, or spell for Ethereum blockchain. \n\nThe Dataset Icons section provides a table of icons and their descriptions for each dataset. For example, the table icon represents data table (raw data, spell, or smart contract event or function), while the decoded project icon represents a decoded project (protocol or protocol version, e.g., \"opensea\" or \"aave_v2\").\n\nThe Dataset Labels section provides a table of labels and their descriptions for each dataset. For instance, the project label represents a spell set for a specific project, e.g., `aave`, while the sector label represents a spell set for a sector, e.g., `dex`.\n\nThe Data Type Labels section provides a table of labels and their descriptions for each data type. For example, the string label represents character sequences of any length greater or equal to 0, while the long label represents 8-byte signed integer numbers.\n\nOverall, this technical guide provides a comprehensive understanding of the various labels encountered while using the Data Explorer in the Dune Docs project. \n\nExample: \n\nIf a user encounters the Ethereum blockchain icon while using the Data Explorer, they can understand that the data set contains raw data, decoded project, or spell for the Ethereum blockchain. Similarly, if a user encounters the project label, they can understand that the data set represents a spell set for a specific project, such as `aave`.",
          "questions": "1. What is the purpose of the Data Explorer in relation to blockchain data?\n- The Data Explorer is used to explore and analyze blockchain data from various blockchains, including Ethereum, Gnosis Chain, Polygon, Optimism, BNB Chain, Solana, Arbitrum, Avalanche, and Fantom.\n\n2. What types of data sets are available in the Data Explorer?\n- The Data Explorer includes data sets for raw data, decoded projects, spells, and community data, as well as smart contract event and function datasets.\n\n3. What data types are supported in the Data Explorer?\n- The Data Explorer supports various data types, including string, long, integer, double, boolean, date, timestamp, decimal, and arrays of different data types."
        },
        {
          "fileName": "index.md",
          "filePath": "docs/app/queries/index.md",
          "url": "https://dune.com/docs/app/queries/index.md",
          "summary": "# Queries\n\nThe Queries section of the Dune Docs app technical guide provides an overview of the Query Editor feature in Dune. The Query Editor is a tool that allows users to input SQL code and run it to retrieve data from the blockchain and other sources. The guide is broken down into several sub-sections, each of which covers a different aspect of the Query Editor.\n\nThe first sub-section, The Data Explorer, is focused on helping users search for blockchain and other data to use in their Queries. This feature allows users to explore the data available in Dune and select the data they want to use in their Queries.\n\nThe second sub-section, The Query Window, is where users input their SQL code and run it. This section provides an overview of how to use the Query Window and includes examples of SQL code that can be used to retrieve data from the blockchain.\n\nThe third sub-section, Query Results, is where users can view the data their Query returns after they run it. This section provides an overview of how to interpret the Query Results and includes examples of how to use the data in other parts of the Dune app.\n\nThe fourth sub-section, Parameters, is a specialized feature of Dune that allows users to implement variables in certain parts of their Query code. This section provides an overview of how to use Parameters and includes examples of how to implement them in SQL code.\n\nThe final sub-section, Query Tips, is a collection of tips to help users master Query creation with Dune. This section provides best practices for creating Queries and includes examples of how to optimize Query performance.\n\nOverall, the Queries section of the Dune Docs app technical guide is a comprehensive guide to using the Query Editor feature in Dune. It provides users with the information they need to create effective Queries and retrieve data from the blockchain and other sources.",
          "questions": "1. What type of blockchain data can be searched for using the Data Explorer?\n- The app technical guide does not provide information on the specific types of blockchain data that can be searched for using the Data Explorer.\n\n2. Can the Query Window handle complex SQL queries?\n- The app technical guide does not provide information on the limitations or capabilities of the Query Window in handling complex SQL queries.\n\n3. How are Parameters implemented in Dune's Query Editor?\n- The app technical guide briefly mentions Parameters as a specialized feature of Dune, but does not provide detailed information on how they are implemented in the Query Editor."
        },
        {
          "fileName": "parameters.md",
          "filePath": "docs/app/queries/parameters.md",
          "url": "https://dune.com/docs/app/queries/parameters.md",
          "summary": "# Parameters\n\nThis technical guide covers the use of parameters in the Dune app. Parameters are a feature that allows users to implement variables in certain parts of their Query code. This variable can be changed from dashboards, making it possible to create interactive dashboards. Parameters are defined in the Query code as `{{parametername}}` and will appear below the Query and in any dashboards in which a Query Visualization with parameters is used in. \n\nThe guide explains how to use parameters in Queries and dashboards. It also provides an example Query that returns the running total of Gas Paid in USD. The Query Author has included a parameter for `wallet address`, `start date`, and `end date`. The guide also provides examples of dashboards that use parameters. \n\nThe guide explains how to add a parameter to Queries by writing `{{parametername}}` or using the button below the Query. Users can edit the properties of single parameters by clicking on the gear wheel next to the parameter in the Query editor. This allows them to set a default value, define a list of possible parameters, or change the type of the parameter. If users want to share parameters between different Queries on a dashboard, they must ensure that they exactly match in regards to name, type, and default value.\n\nParameters allow users to make a certain part of their SQL query dynamic and thereby offer them to make Queries and dashboards interactive. That way, they can easily display detailed data on their dashboard since it allows the viewer to customize the dashboard for their needs. Parameters are like filters, but the possibilities of using this feature go beyond that.\n\nIn summary, this guide covers the use of parameters in the Dune app. It explains what parameters are, how to use them in Queries and dashboards, and provides examples of Queries and dashboards that use parameters.",
          "questions": "1. What is the purpose of Parameters in Dune Docs?\n- Parameters are a feature in Dune Docs that allow for the implementation of variables in certain parts of Query code, which can be changed from dashboards and allow for an interactive dashboard.\n\n2. How do you use Parameters in Dune Docs?\n- Parameters can be added to Queries by writing `{{parametername}}` or using the button below the Query. The properties of single parameters can be edited by clicking on the gear wheel next to the parameter in the Query editor.\n\n3. Can Parameters be shared between different Queries in a Dashboard?\n- Yes, Parameters in a Dashboard can be shared between different Queries, as long as they have the same name, type, and default value."
        },
        {
          "fileName": "query-results.md",
          "filePath": "docs/app/queries/query-results.md",
          "url": "https://dune.com/docs/app/queries/query-results.md",
          "summary": "# Query Results\n\nThe Query Results section of the Dune Docs app is where users can view the data their Query returns after running it. The guide explains how to get the results of a Query by clicking the \"Run\" button in the orange box below the Query Window. After a short time, the Query Results will appear as a table. The guide also warns users that queries run on the database they've currently selected in the Data Explorer dropdown. If a user runs a Query that uses Dune V1 Ethereum data, it will fail to run if they select another V1 Blockchain dataset or Dune V2.\n\nThe guide explains the elements above the Results table, which include the \"Query Results\" tab, the \"New Visualization\" button, \"Last run\" and \"Last run took\" times, and the \"Run\" button. The \"New Visualization\" button lets users make Visualizations out of their Query data. The guide also explains how to save a Query, and after running a Query at least once, the \"Save\" button appears above the Query Window. Users can give their Query a name and make it private if they're a Dune Premium user. \n\nThe guide also explains how to re-run a Query, format Results tables, and make Visualizations out of Query Results. Users can change the formatting and appearance of their Query Results tables with the options below the table. The guide explains the different column settings, including Title, Align, Format, Hide column, Colored positive values, and Colored negative values. The guide also provides a table that shows the different column number formatting options. \n\nOverall, the Query Results guide provides a detailed explanation of how to use the Query Results section of the Dune Docs app. It covers everything from running a Query to formatting Results tables and making Visualizations out of Query Results. The guide is a useful resource for users who want to get the most out of the Query Results section.",
          "questions": "1. What is the purpose of the Query Results section in Dune Docs?\n    \n    The Query Results section is where you can see the data your Query returns after running it.\n\n2. How can you save your Query in Dune Docs?\n    \n    After running your Query at least once, you'll see the Save button appear above the Query Window. Click it to see a pop-up that asks you to give your Query a name, with the option to make this Query private.\n\n3. How can you change the formatting and appearance of your Query Results tables in Dune Docs?\n    \n    You can change the formatting and appearance of your Query Results tables with the options below the table. The options include changing the table's title, settings for each of your columns, and adding the table to a dashboard."
        },
        {
          "fileName": "query-window.md",
          "filePath": "docs/app/queries/query-window.md",
          "url": "https://dune.com/docs/app/queries/query-window.md",
          "summary": "# The Query Window\n\nThis technical guide covers the Query window in the Dune Docs project. The Query window is where users can input SQL code and run it. The guide provides information on how to use the Query window effectively.\n\n## Autocomplete\n\nThe guide explains how to enable or disable the autocomplete function of the Query editor using the gear wheel in the top right corner. The autocomplete feature brings up PostgreSQL keywords, tables, and aliases that have already been included in the Query. The guide provides an example of how to turn on autocomplete and how it works in the Query editor.\n\n## Run Selection\n\nThe guide explains how to save time while testing and debugging Queries by running just a part of the Query. Users can highlight a part of the Query, and the <span class=\"fk-btn-1\">Run</span> button will turn into a <span class=\"fk-btn-1\">Run selection</span> button. The guide provides an example of how to run a selection and what happens when a user highlights an incorrect piece of SQL.\n\n## Shortcuts\n\nThe guide provides a list of shortcuts that users can use to make crafting Queries faster. The shortcuts include executing the Query, commenting out selected code, bringing up a list of keywords, undoing and redoing changes, and searching for and replacing keywords. The guide notes that these shortcuts work on US/UK keyboards and may vary based on the language setting on the user's machine.\n\nOverall, this technical guide provides a comprehensive overview of the Query window in the Dune Docs project. It explains how to use the Query window effectively and provides examples of how to use its features.",
          "questions": "1. What is the purpose of the Dune app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the Dune app or its relation to blockchain technology.\n\n2. What version of PostgreSQL does the Query editor support?\n- The app technical guide does not provide information on the version of PostgreSQL supported by the Query editor.\n\n3. Are there any security features in place to protect sensitive SQL code entered into the Query window?\n- The app technical guide does not provide information on any security features in place to protect sensitive SQL code entered into the Query window."
        },
        {
          "fileName": "tips.md",
          "filePath": "docs/app/queries/tips.md",
          "url": "https://dune.com/docs/app/queries/tips.md",
          "summary": "# Query Tips\n\nThis technical guide provides tips for using queries in the Dune app. It covers various topics such as using Spells, formatting Ethereum addresses, quoting column and table names, removing decimals, getting time with `date_trunc`, getting USD price, using token symbols, and filtering queries and dashboards with parameters.\n\nThe guide starts with an introduction to Spells, which are well-organized tables that contain cleaned data and metadata that make them easy to query. The guide then explains how to format Ethereum addresses in Dune V1 engine, which uses PostgreSQL byte arrays encoded with the `\\x` prefix. The guide also provides a warning that column and table names are case sensitive in PostgreSQL and that double quotes are reserved for tables and columns, whereas single quotes are reserved for values.\n\nThe guide then explains how to remove decimals from Ether transfers and ERC-20 tokens, which have 18 decimal places, making them difficult to read. The guide suggests using the `erc20.tokens` table and dividing the token's `transfer_value` by 10. The guide also provides examples of how to use `date_trunc` function to get time and how to get USD price by joining the smart contract event with the `prices.usd` on the `minute` for a given `asset`.\n\nThe guide also explains how to use token symbols instead of token addresses to group results by token address. To do this, the guide suggests joining the `erc20.tokens` table with the event table where `asset` = `{{token_address}}`. The guide also provides examples of how to filter queries and dashboards with parameters, which can turn a Query or Dashboard into an app for blockchain data.\n\nOverall, this technical guide provides useful tips for using queries in the Dune app. It is a valuable resource for anyone looking to become a more powerful user of Dune.",
          "questions": "1. What is the purpose of the Dune V1 engine and what features are only available in it?\n- The Dune V1 engine is mentioned in several sections of the technical guide, and a blockchain SQL analyst might want to know what it is and what features are exclusive to it. The guide states that the V1 engine is required for certain features such as inline Ethereum address formatting and camelCase table and column name references.\n\n2. How can token symbols be used instead of token addresses in queries?\n- The guide explains that token symbols can be more user-friendly than token addresses, but also warns that the erc20.tokens table only contains popular tokens and may exclude more obscure ones. A blockchain SQL analyst might want to know how to join the erc20.tokens table with their event table to select symbols instead of addresses.\n\n3. How can parameters be used to filter queries and dashboards?\n- The guide explains how parameters can be used to turn queries and dashboards into blockchain data apps, and provides an example of how to add a parameter for token symbol or holder address. A blockchain SQL analyst might want to know how to use parameters in their queries and how to format addresses to save users from having to input the `\\x` prefix."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc/docs/json/docs/app/queries` folder contains technical guides that focus on the Queries feature of the Dune app. These guides provide comprehensive information on how to use the Query Editor, Data Explorer, and other related features to create effective queries and retrieve data from the blockchain and other sources.\n\nFor example, the `data-explorer.md` guide covers the Data Explorer feature, which allows users to search for blockchain and other data to use in their queries. It explains how to select the database, enter keywords, and perform advanced searches in Dune V2 and V1. This guide is useful for users who want to find specific data for their queries and understand the differences between Dune V2 and V1 databases.\n\nThe `explorer-labels.md` guide provides a detailed understanding of the various labels encountered while using the Data Explorer. It covers Blockchain Icons, Dataset Icons, Dataset Labels, and Data Type Labels. This guide helps users to quickly identify and understand the data sets they encounter while using the Data Explorer.\n\nThe `index.md` guide serves as an overview of the Query Editor feature in Dune. It is broken down into several sub-sections, each covering a different aspect of the Query Editor, such as The Data Explorer, The Query Window, Query Results, Parameters, and Query Tips. This guide is a comprehensive resource for users who want to learn how to create effective queries and retrieve data from the blockchain and other sources.\n\nThe `parameters.md` guide covers the use of parameters in the Dune app. Parameters allow users to implement variables in certain parts of their Query code, making it possible to create interactive dashboards. This guide explains how to use parameters in Queries and dashboards and provides examples of Queries and dashboards that use parameters.\n\nThe `query-results.md` guide focuses on the Query Results section of the Dune Docs app, where users can view the data their Query returns after running it. It covers how to run a Query, format Results tables, and make Visualizations out of Query Results. This guide is useful for users who want to get the most out of the Query Results section.\n\nThe `query-window.md` guide provides a comprehensive overview of the Query window in the Dune Docs project. It explains how to use the Query window effectively, including enabling or disabling the autocomplete function, running a selection of the Query, and using shortcuts.\n\nFinally, the `tips.md` guide offers useful tips for using queries in the Dune app, covering topics such as using Spells, formatting Ethereum addresses, quoting column and table names, removing decimals, getting time with `date_trunc`, getting USD price, using token symbols, and filtering queries and dashboards with parameters.\n\nOverall, the guides in the `.autodoc/docs/json/docs/app/queries` folder provide valuable information and resources for users who want to become more proficient in using the Queries feature of the Dune app.",
      "questions": ""
    },
    {
      "folderName": "visualizations",
      "folderPath": ".autodoc/docs/json/docs/app/visualizations",
      "url": "https://dune.com/.autodoc/docs/json/docs/app/visualizations",
      "files": [
        {
          "fileName": "charts-graphs.md",
          "filePath": "docs/app/visualizations/charts-graphs.md",
          "url": "https://dune.com/docs/app/visualizations/charts-graphs.md",
          "summary": "# Charts & Graphs\n\nThis technical guide is focused on the Charts & Graphs feature of the Dune app. The guide provides an overview of the different types of graphs that can be created with Dune, including bar charts, area charts, scatter charts, line charts, pie charts, and mixed graphs. Each graph type is accompanied by an example image. \n\nThe guide also covers the common set of editing options that all graph visualizations share. These options include chart options, result data, x-axis options, y-axis options, and series options. Each option is explained in detail, with accompanying images to illustrate the different configurations. \n\nThe guide also includes a section on pie options, which allows users to define the tick format of the data labels in their pie chart. Finally, the guide provides a table of tick and label formats that can be used to format numeric values and axis labels in graphs. \n\nOverall, this technical guide provides a comprehensive overview of the Charts & Graphs feature of the Dune app, including the different types of graphs that can be created and the editing options available to users. The guide is a valuable resource for anyone looking to create visualizations of their data using Dune.",
          "questions": "1. What types of data can be visualized with Dune Docs' graphs?\n- Dune Docs' graphs can visualize bar charts, area charts, scatter charts, line charts, pie charts, and mixed graphs.\n\n2. What editing options are available for all graph visualizations?\n- All graph visualizations share a common set of editing options, which include chart options, result data, x-axis options, y-axis options, and series options.\n\n3. How can tick formats be used to change how numeric values and axis labels are displayed?\n- Tick formats can be used to display numeric values and axis labels in different formats, such as displaying only the integer, displaying the number with a certain number of decimal places, or adding a currency symbol."
        },
        {
          "fileName": "embeds.md",
          "filePath": "docs/app/visualizations/embeds.md",
          "url": "https://dune.com/docs/app/visualizations/embeds.md",
          "summary": "# Embeds\n\nThis guide covers the use of Embeds in the Dune app. Embeds allow users to share live Dune charts across different web platforms. The guide explains how to generate embed links and how to use them on different platforms such as Twitter, Discord, web pages, and Mirror.xyz. \n\nThe guide starts by highlighting the benefits of using Embeds over screenshots. It then explains how to generate embed links by clicking on any query title and selecting the embed function in the top right corner. The guide also notes that the embed button works as a stand-alone link and as a way to embed live graphs into websites/apps. If a Query has no Visualizations, the link will be to the Query Results table. If you have multiple Visualizations, the link will be for whichever Visualization you've selected when you clicked the Embed button. \n\nThe guide then provides examples of how to use Embeds on different platforms. For instance, on Twitter, users can paste their embed link, and Twitter will automatically render and update Dune Visualizations. On Discord, users can drop the embed link in the chat, and the corresponding Visualization will be displayed. The guide also provides a code snippet example of how to use Dune's embed links to add live Visualizations to any web page using an `iframe`. \n\nThe guide also explains how to embed Dune Visualizations into articles on Mirror.xyz. Users can generate an embed link and postfix it with `?display=iframe`. The guide notes that Embeds do not work in a couple of popular web platforms, including Substack, Medium, and GitBook. \n\nFinally, the guide explains how to use parameterized Embeds. The embed links work with parameterized Queries, but users need to manually prefix the parameter link with the parameters. The guide provides an example of how to do this. \n\nOverall, this guide provides a comprehensive overview of how to use Embeds in the Dune app. It explains how to generate embed links and how to use them on different platforms. The guide also provides examples and code snippets to help users get started with Embeds.",
          "questions": "1. What is the purpose of the Dune Docs app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the Dune Docs app or its relation to blockchain technology.\n\n2. How does the app handle data security and privacy?\n- The app technical guide does not provide information on how the app handles data security and privacy.\n\n3. Can the app be integrated with blockchain databases or SQL servers?\n- The app technical guide does not provide information on whether the app can be integrated with blockchain databases or SQL servers."
        },
        {
          "fileName": "index.md",
          "filePath": "docs/app/visualizations/index.md",
          "url": "https://dune.com/docs/app/visualizations/index.md",
          "summary": "# Visualizations\n\nThe purpose of this section of the app technical guide is to provide information on how to create visualizations using Dune. The guide is divided into two main sections: Charts & Graphs and Other Visualizations.\n\n## Charts & Graphs\n\nThis section explains and provides examples on how to create popular visualizations using Dune. The guide covers various types of charts and graphs such as line charts, bar charts, pie charts, and scatter plots. It also explains how to customize these visualizations by changing colors, labels, and other properties.\n\nExample: If a user wants to create a line chart to display the trend of sales over time, they can refer to this section of the guide to learn how to create the chart and customize it to their needs.\n\n## Other Visualizations\n\nThis section covers a few more unique visualizations that can be created using Dune. It includes examples of heat maps, word clouds, and network graphs. The guide explains how to create these visualizations and provides tips on how to effectively use them.\n\nExample: If a user wants to create a word cloud to display the most commonly used words in a document, they can refer to this section of the guide to learn how to create the visualization and adjust the settings to display the desired information.\n\nOverall, this section of the app technical guide is a helpful resource for users who want to create visualizations using Dune. It provides clear explanations and examples on how to create various types of visualizations and customize them to meet specific needs.",
          "questions": "1. What type of data does this app visualize?\n- The app technical guide does not provide information on the type of data that is visualized.\n\n2. Does this app use any specific SQL queries or databases to generate visualizations?\n- The app technical guide does not mention the use of SQL queries or databases to generate visualizations.\n\n3. Are there any limitations or restrictions on the size or complexity of the data that can be visualized with this app?\n- The app technical guide does not provide information on any limitations or restrictions on the size or complexity of the data that can be visualized."
        },
        {
          "fileName": "other-visualizations.md",
          "filePath": "docs/app/visualizations/other-visualizations.md",
          "url": "https://dune.com/docs/app/visualizations/other-visualizations.md",
          "summary": "# Other Visualizations\n\nThis guide covers non-graph visualizations that can be created using Dune. The guide is divided into two sections: Tables and Counters.\n\n## Tables\n\nTables are the default visualization that appears when a query is run. The guide explains how to create additional tables and customize them. The following options can be configured for each column in a table:\n\n- Title: The title that appears at the top of the column. If left blank, the column title will be the same as its Dune database name.\n- Align: The text alignment for the column data and title.\n- Format: The numerical format of the data.\n- Hide Column: Hides the column from the table.\n\nNumerical columns have additional options:\n\n- Type: Displays the column's numerical data or shows it with a progress bar visual.\n- Colored Values: Colors positive values green and negative values red.\n\n## Counters\n\nCounters are a way to display \"on a glance\" stats. The guide explains how to configure counters and adjust how numerical data is displayed. The following options can be configured for counters:\n\n- Title: The title that appears at the top of the counter. If left blank, the query name will be the only thing displayed.\n- Column: The column the counter should show.\n- Row: The row of the underlying data table to be displayed.\n- Prefix: A prefix for the counter value.\n- Suffix: A suffix for the counter value.\n- Label: A label for the counter value.\n- Decimals: The number of decimal places to be displayed.\n\nThe guide provides examples and screenshots to illustrate how to configure tables and counters.",
          "questions": "1. What is the purpose of Dune Docs and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of Dune Docs or its relation to blockchain technology, so a blockchain SQL analyst may need to seek additional documentation or context.\n2. Can Dune Docs visualize data from blockchain databases?\n- The app technical guide does not specify which types of databases Dune Docs can visualize, so a blockchain SQL analyst may need to investigate further to determine if it is compatible with blockchain databases.\n3. Are there any limitations to the numerical data formatting options for Counters?\n- The app technical guide states that the number of decimal places is currently limited to 3, but it does not provide information on any other limitations or restrictions, so a blockchain SQL analyst may need to test the app or consult with the development team to determine any other limitations."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc/docs/json/docs/app/visualizations` folder contains a collection of technical guides focused on creating and customizing visualizations using the Dune app. These guides cover various types of visualizations, including charts, graphs, tables, counters, and embeds. The folder is organized into four main files: `charts-graphs.md`, `embeds.md`, `index.md`, and `other-visualizations.md`.\n\nThe `charts-graphs.md` guide provides a comprehensive overview of the Charts & Graphs feature of the Dune app. It covers different types of graphs, such as bar charts, area charts, scatter charts, line charts, pie charts, and mixed graphs, along with examples and editing options for each graph type. This guide is useful for users who want to create visually appealing and informative graphs to represent their data.\n\nThe `embeds.md` guide focuses on the use of Embeds in the Dune app, which allows users to share live Dune charts across different web platforms like Twitter, Discord, web pages, and Mirror.xyz. This guide explains how to generate embed links and use them on various platforms, providing examples and code snippets to help users get started with Embeds. This guide is beneficial for users who want to share their visualizations with a wider audience.\n\nThe `index.md` guide serves as an introduction to the Visualizations section of the app technical guide. It provides a brief overview of the two main sections: Charts & Graphs and Other Visualizations. This guide is helpful for users who are new to Dune and want to understand the different types of visualizations available and how to create them.\n\nThe `other-visualizations.md` guide covers non-graph visualizations, such as tables and counters. It explains how to create and customize tables, which are the default visualization when a query is run, and counters, which display \"at a glance\" stats. This guide is useful for users who want to create simple yet informative visualizations to represent their data.\n\nOverall, the guides in the `.autodoc/docs/json/docs/app/visualizations` folder provide valuable information for users who want to create and customize visualizations using the Dune app. These guides cover various types of visualizations and provide examples and editing options to help users create visually appealing and informative representations of their data.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc/docs/json/docs/app` folder contains technical guides and documentation focused on the Dune app and its various features. These guides are essential for users who want to leverage the full potential of the Dune app, as they provide in-depth explanations and how-to guides for each feature.\n\nFor example, the `decoding-contracts.md` guide offers a comprehensive overview of Decoded Contracts in Dune, including how to submit them for decoding. This guide is valuable for users who want to decode smart contracts and explore their functionality using the Dune app interface. It covers advanced options for submitting contracts, tracking submissions, and answers frequently asked questions.\n\nThe `index.md` guide serves as an introduction to the Dune.com app and its features, such as Queries, Visualizations, Dashboards, Decoding, and Teams. This guide is aimed at users who are already familiar with the basics of the app and are looking for more in-depth explanations and how-to guides for leveraging the Dune app interface.\n\nThe `teams.md` guide covers the Teams feature of the Dune app, which allows Wizards to collaborate within shared workspaces. This guide is a comprehensive resource for anyone looking to use the Teams feature, providing step-by-step instructions for creating a Team, adding users, and transferring content to a Team.\n\nThe subfolders in this folder dive deeper into specific features of the Dune app:\n\n- `dashboards`: This folder contains guides that focus on the dashboard features of the Dune Docs project. Users can learn how to create custom dashboards, explore Ecosystem Dashboards, and monitor the performance of specific projects with Project Dashboards.\n\n- `queries`: This folder contains guides that focus on the Queries feature of the Dune app. Users can learn how to use the Query Editor, Data Explorer, and other related features to create effective queries and retrieve data from the blockchain and other sources.\n\n- `visualizations`: This folder contains guides focused on creating and customizing visualizations using the Dune app. Users can learn how to create various types of visualizations, including charts, graphs, tables, counters, and embeds, and share them across different web platforms.\n\nOverall, the guides in the `.autodoc/docs/json/docs/app` folder provide a comprehensive understanding of the Dune app and its features. These guides are essential for users who want to leverage the power of the Dune app to analyze and visualize blockchain data effectively.",
  "questions": ""
}