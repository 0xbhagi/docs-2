{
  "folderName": "app",
  "folderPath": ".autodoc\\docs\\json\\docs\\app",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\app",
  "files": [
    {
      "fileName": "decoding-contracts.md",
      "filePath": "docs\\app\\decoding-contracts.md",
      "url": "https://dune.com/blob/master/app\\decoding-contracts.md",
      "summary": "The app technical guide titled \"Decoding Contracts\" provides a comprehensive guide on how to submit contracts for decoding on the Dune platform. The guide is divided into several sections, each with a specific focus. The first section provides an overview of Decoded Contracts and how they are brought into the platform through Wizard submissions. The section explains how contracts are decoded into human-readable tables for each event and function defined in the smart contract's ABI. The section also provides a link to learn more about how Decoding works and what Decoded tables are available.\n\nThe second section of the guide focuses on submitting a new contract for decoding. The section provides three ways to submit contracts for decoding, including the New contract form, the My Creations > Contracts Tab, and within the dataset explorer in the Query editor's sidebar. The section also provides a contract submission form that consists of two steps. The first step requests the contract's address and blockchain to enable the review of potential duplicate contracts and pending submissions. The second step requests other information about the contract that is needed to decode it.\n\nThe third section of the guide provides advanced options for detecting and indexing multiple contract addresses under the same submission. The section explains two strategies for detecting other contracts for decoding, including bytecode match and factory instances. The section also provides a warning to only use these options if you know what you're doing and are extremely familiar with the project's architecture and deployment hierarchy.\n\nThe fourth section of the guide focuses on tracking submissions. The section explains how to view submissions and their processing status at any time by navigating to My Creations > Contracts.\n\nThe fifth section of the guide provides answers to frequently asked questions. The section provides answers to questions such as how to submit contract information manually, how to submit a Proxy contract, how to re-submit a contract, and how to submit Diamond Proxy contracts. The section also provides a warning that Dune rejects duplicative, incorrect, or low-quality submissions.\n\nOverall, the guide provides a detailed explanation of how to submit contracts for decoding on the Dune platform. The guide is well-structured and easy to follow, with examples and images provided where appropriate.",
      "questions": "1. What is the process for submitting a new contract for decoding?\n- Contracts can be submitted for decoding through the new contract form, the My Creations > Contracts Tab, or within the dataset explorer in the Query editor's sidebar. The contract submission form consists of two steps: blockchain and address, and contract details.\n\n2. How does Dune index multiple contract addresses under the same submission?\n- Dune can automatically detect and index multiple contract addresses under the same submission by using bytecode match or factory instances. If users want Dune to index more than one contract, they can toggle on Advanced options and select \"Yes\" to the first question, \"Are there several instances of this contract?\"\n\n3. How do I re-submit a contract?\n- If users attempt to submit a contract that already exists, Dune will first present a warning note and ask users to confirm if they want to proceed. Then, at the bottom of the Details page, Dune will ask users to explain why they're resubmitting the contract so Dune can assess whether it's worth overriding the contract's data. If Dune believes the risk of accepting a re-submission is higher than the added value, Dune will reject the resubmission."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\app\\index.md",
      "url": "https://dune.com/blob/master/app\\index.md",
      "summary": "The App Overview technical guide provides an introduction to the dune.com app and its features. The guide is intended to help users understand how the app works and how to leverage its interface to make magic with blockchain data. \n\nThe guide is divided into five sections, each of which is focused on a specific feature of the app. The Queries section provides guides and explanations for data explorer and query creation questions. The Visualizations section provides guides and explanations for visualization creation, formatting, and embedding questions. The Dashboards section is a collection of example dashboard how-to's and use cases to generate inspiration from. The Decoding section explains the process for submitting a contract for decoding on EVM chains. Finally, the Teams section features allow organizations to form a combined profile for wizards to contribute and work together under.\n\nThe guide is written in a friendly and approachable tone, with emojis and exclamation points used to add personality and enthusiasm. The guide also includes links to other resources, such as the Getting Started guide, to help users get up to speed quickly. \n\nFor example, the Queries section provides a link to a guide on data explorer and query creation questions. This guide includes step-by-step instructions on how to create a query, as well as explanations of key concepts and terminology. The guide also includes screenshots to help users visualize the process. \n\nOverall, the App Overview technical guide is a useful resource for users who are new to the dune.com app or who want to learn more about its features. It provides clear explanations and practical examples to help users get the most out of the app.",
      "questions": "1. What blockchain data does the dune.com app work with?\n- The app works with blockchain data, but the specific blockchain(s) it supports is not mentioned in the technical guide.\n\n2. Can the app interface with SQL databases?\n- There is no mention of SQL databases in the technical guide, so it is unclear if the app can interface with them.\n\n3. Are there any limitations or restrictions on the types of queries or visualizations that can be created with the app?\n- The technical guide does not mention any limitations or restrictions on query or visualization creation, so it is unclear if there are any."
    },
    {
      "fileName": "teams.md",
      "filePath": "docs\\app\\teams.md",
      "url": "https://dune.com/blob/master/app\\teams.md",
      "summary": "# Teams\n\nThis technical guide covers the Teams feature of the Dune app. Teams are shared workspaces for Wizards to collaborate within. The guide explains the benefits of creating a Team, such as collaborating on the same content, having a separate workspace for each Team, and showcasing all of a Team's work in one place. It also explains the different user roles available for Team members, such as viewers, editors, and admins.\n\nThe guide provides step-by-step instructions for getting started with Teams, including creating a Team, adding users, and transferring content to a Team. It also explains how to find a Team's content using the My Creations feature and provides a FAQ section that addresses common questions about Teams.\n\nFor example, to create a Team, users need to head over to Settings > Teams and add a bit of sparkle to their Team's profile. They can then invite other Dune Wizards to join their Team in the People section of their Team's Settings page and assign them one of the available roles. Team Queries and Dashboards are created the same way they are for individual accounts, and users can pick their Team as the Owner when prompted to save them for the first time.\n\nOverall, this technical guide provides a comprehensive overview of the Teams feature of the Dune app and is a useful resource for users who want to collaborate with others on shared content.",
      "questions": "1. What is the underlying technology used for storing and managing the data in Dune Teams?\n- The app technical guide does not provide information on the underlying technology used for storing and managing the data in Dune Teams.\n\n2. Can Dune Teams be integrated with blockchain-based platforms?\n- The app technical guide does not provide information on whether Dune Teams can be integrated with blockchain-based platforms.\n\n3. How does Dune Teams ensure data privacy and security?\n- The app technical guide does not provide information on how Dune Teams ensures data privacy and security."
    }
  ],
  "folders": [
    {
      "folderName": "dashboards",
      "folderPath": ".autodoc\\docs\\json\\docs\\app\\dashboards",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\app\\dashboards",
      "files": [
        {
          "fileName": "dashboards.md",
          "filePath": "docs\\app\\dashboards\\dashboards.md",
          "url": "https://dune.com/blob/master/app\\dashboards\\dashboards.md",
          "summary": "The app technical guide provides a detailed explanation of how to create a dashboard on Dune. The guide is divided into several sections, each of which covers a specific aspect of creating a dashboard. The first section provides an overview of what dashboards are and how they work on Dune. The second section explains how to create a new dashboard and how to name it. The third section explains how to add visualizations to the dashboard, while the fourth section explains how to add text boxes. The fifth section provides a subset of markdown syntax that can be used to manipulate text in the text boxes. The sixth section explains how to embed images and GIFs into the text boxes. Finally, the seventh section explains how to arrange the layout of the dashboard.\n\nThe guide is focused on the app folder of the Dune Docs project. It provides detailed instructions on how to create a dashboard, which is a key feature of the app. The guide explains how to add visualizations and text boxes to the dashboard, which are two important components of the app. The guide also explains how to manipulate text and embed images and GIFs into the text boxes, which are important features of the app. Finally, the guide explains how to arrange the layout of the dashboard, which is an important aspect of the app's user interface.\n\nThe guide provides several examples to illustrate how to create a dashboard on Dune. These examples include screenshots and GIFs that show how to perform specific tasks, such as adding visualizations and text boxes to the dashboard, embedding images and GIFs into the text boxes, and arranging the layout of the dashboard. The guide also provides a subset of markdown syntax that can be used to manipulate text in the text boxes. Overall, the guide is a comprehensive resource for anyone who wants to create a dashboard on Dune.",
          "questions": "1. What is the purpose of Dune Docs and how does it relate to blockchain technology?\n   \n   The app technical guide does not provide information on the purpose of Dune Docs or its relation to blockchain technology, so a blockchain SQL analyst may have to seek additional information from other sources.\n\n2. Can Dune Docs integrate with SQL databases commonly used in blockchain applications?\n   \n   The app technical guide does not provide information on whether Dune Docs can integrate with SQL databases commonly used in blockchain applications, so a blockchain SQL analyst may have to seek additional information from other sources or contact the Dune Docs team directly.\n\n3. Are there any security features in place to protect sensitive data that may be displayed on Dune Docs dashboards?\n   \n   The app technical guide does not provide information on any security features in place to protect sensitive data that may be displayed on Dune Docs dashboards, so a blockchain SQL analyst may have to seek additional information from other sources or contact the Dune Docs team directly."
        },
        {
          "fileName": "ecosystem-dashboards.md",
          "filePath": "docs\\app\\dashboards\\ecosystem-dashboards.md",
          "url": "https://dune.com/blob/master/app\\dashboards\\ecosystem-dashboards.md",
          "summary": "This app technical guide covers the Ecosystem Dashboards feature of the Dune app. The purpose of this feature is to provide users with a way to explore and discover general ecosystem-level metrics related to blockchain data. The guide highlights two specific dashboards: Gas Prices and DeFi Adoption.\n\nThe Gas Prices dashboard, created by @kroeger0x, displays data on average gas spent per transaction, gas limit, gas spent in total in a block, and more. The dashboard is easy to view and provides users with valuable insights into gas prices on the blockchain. The guide includes two screenshots of the dashboard to give users an idea of what it looks like.\n\nThe DeFi Adoption dashboard, created by @rchen8, compiles user numbers of all important DeFi protocols into one dashboard. This dashboard provides users with a way to track the growth and adoption of DeFi over time. The guide includes a screenshot of the dashboard to give users an idea of what it looks like.\n\nOverall, this app technical guide provides users with an overview of the Ecosystem Dashboards feature of the Dune app and highlights two specific dashboards that users can explore. The guide is useful for users who want to gain insights into blockchain data and track the growth and adoption of DeFi.",
          "questions": "1. What blockchain data is included in Dune and how is it organized? \n- The app technical guide mentions that Dune has \"almost all blockchain data in one place,\" so a blockchain SQL analyst might want to know what specific data is included and how it is structured within the app.\n\n2. How does Dune gather and update its data? \n- A blockchain SQL analyst might be interested in understanding the data collection and maintenance process for Dune, in order to assess the accuracy and reliability of the metrics provided.\n\n3. Can Dune be integrated with other blockchain analytics tools or databases? \n- A blockchain SQL analyst might want to know if Dune can be used in conjunction with other tools or databases they are already using, in order to streamline their workflow and improve their analysis capabilities."
        },
        {
          "fileName": "index.md",
          "filePath": "docs\\app\\dashboards\\index.md",
          "url": "https://dune.com/blob/master/app\\dashboards\\index.md",
          "summary": "# Dune Docs Use Cases\n\nThis technical guide provides an overview of Dune, a blockchain data analytics platform, and its use cases. The guide is divided into two main sections: an introduction to Dune and its user groups, and a list of broad use cases for the platform.\n\n## Introduction to Dune\n\nDune is an open platform that serves three main user groups: Dune Spectators, Dune Wizards, and Dune Patrons. Dune Spectators can view on-chain data through dashboards on Dune.com. Dune Wizards use the raw data ingested by the Dune Platform to create dashboards, visualizations, and queries. Dune Patrons, including crypto communities, protocols, and companies, leverage Dune's powers to solve problems and share insights within their organizations.\n\n## Dune Use Cases\n\nDune can be used to explore nearly the entire world of blockchain data analytics. The guide provides three broad use cases for Dune:\n\n- Project Dashboards: Dashboards that provide insights into specific blockchain projects.\n- Sector Dashboards: Dashboards that provide insights into specific sectors of the blockchain industry.\n- Ecosystem Dashboards: Dashboards that provide insights into the broader blockchain ecosystem.\n\nThe guide notes that there are few limitations to what can be queried and visualized with Dune.\n\n## Dune Content\n\nTo get more insights into how people use Dune, the guide recommends following Dune's Twitter account, where the most interesting things that happen on Dune are retweeted. The guide provides a link to Dune's Twitter account and timeline.\n\nOverall, this technical guide provides a high-level overview of Dune and its use cases. It is useful for anyone interested in using Dune for blockchain data analytics, particularly those interested in creating dashboards, visualizations, and queries.",
          "questions": "1. What blockchain data does Dune ingest and analyze?\n- The app technical guide does not provide specific information on the type of blockchain data that Dune ingests and analyzes.\n\n2. Can Dune be integrated with SQL databases?\n- The app technical guide does not mention anything about integrating Dune with SQL databases.\n\n3. Are there any limitations to the amount of data that can be queried and visualized with Dune?\n- The app technical guide states that there aren't many limitations to what can be queried and visualized with Dune, but it does not provide specific information on any potential limitations."
        },
        {
          "fileName": "project-dashboards.md",
          "filePath": "docs\\app\\dashboards\\project-dashboards.md",
          "url": "https://dune.com/blob/master/app\\dashboards\\project-dashboards.md",
          "summary": "# Project Dashboards\n\nThis technical guide covers the topic of Project Dashboards, which is a feature of the Dune Docs project. Project Dashboards allow users to easily assemble data on their favorite project in one place without having to maintain infrastructure or overhead. The purpose of this guide is to explain how to use Project Dashboards and provide an example of how they can be used.\n\nThe guide starts by explaining that Project Dashboards are a great way to track the metrics of your project. It then goes on to explain that you can simply query for the data you desire and assemble it on a Dashboard to make a Datahub for your project Reality. This means that users can easily view and understand important data about their project without having to go through multiple sources.\n\nThe guide then provides an example of a Project Dashboard for Tornado.Cash by @poma. The Dashboard shows many important metrics for the protocol, all in one place. The guide explains that @poma wanted to show a few \"at a glance\" counters which make important data like total deposits and unique users easy to view and understand by just about anyone. @poma follows this up with some interesting historical data points which show the growth in users and volume. The Dashboard continues, but you can clearly already see how much value these stats and charts can produce for a company, protocol, or community.\n\nFinally, the guide provides a link to the Dune Projects Page where users can find many other great Dashboards. This guide is useful for users who want to learn how to use Project Dashboards and how they can be used to track the metrics of their project.",
          "questions": "1. What kind of data sources does this app support for assembling project dashboards?\n   - The app technical guide mentions that users can \"simply query for the data you desire\" to assemble a dashboard, but it does not specify what kind of data sources are supported.\n\n2. Can this app be integrated with blockchain data sources?\n   - The app technical guide does not mention anything about integrating with blockchain data sources, which might be of interest to a blockchain SQL analyst.\n\n3. Are there any limitations to the types of metrics that can be tracked on a project dashboard?\n   - The app technical guide does not mention any limitations to the types of metrics that can be tracked on a project dashboard, but a blockchain SQL analyst might want to know if there are any restrictions or limitations to the types of data that can be displayed."
        },
        {
          "fileName": "sector-dashboards.md",
          "filePath": "docs\\app\\dashboards\\sector-dashboards.md",
          "url": "https://dune.com/blob/master/app\\dashboards\\sector-dashboards.md",
          "summary": "# Sector Dashboards\n\nThis technical guide covers the Sector Dashboards feature of the Dune Docs project. Sector Dashboards provide an overview of an entire sector of the crypto economy and allow users to analyze what's happening in real-time. The purpose of this guide is to explain how Sector Dashboards work and provide examples of how they can be used.\n\nThe guide starts with an overview of Sector Dashboards and their purpose. It then provides examples of three different Sector Dashboards: Dex Metrics, Indices, and Lending. Each example includes a link to the dashboard and a brief explanation of what it shows.\n\nThe Dex Metrics dashboard provides data on the entire Decentralized Exchange sector, including metrics like Dex Volume, Market Share, and Total Volume across all exchanges. The dashboard is maintained by the community, and new DEXes can be added by submitting code to the public GitHub.\n\nThe Indices dashboard covers the entire state of a sector in one glance, allowing users to compare different products and projects with ease. It provides data on the AUM (Assets Under Management) of different indices and projects.\n\nThe Lending dashboard allows users to easily check the state of lending as a sector and compare protocol performance. It provides data on lending deposits and borrowers.\n\nOverall, this guide provides an introduction to Sector Dashboards and how they can be used to analyze different sectors of the crypto economy. The examples provided demonstrate the usefulness of Sector Dashboards in providing real-time data and insights into different sectors.",
          "questions": "1. What data sources are used to populate the sector dashboards?\n   - The app technical guide does not provide information on the data sources used to populate the sector dashboards.\n2. Can the community add new sectors to the dashboard, or is it limited to the ones already included?\n   - The app technical guide mentions that new DEXes can be added to the dashboard by submitting their code to the public GitHub, but it does not specify if new sectors can be added in the same way.\n3. Is there any integration with blockchain or SQL databases to provide real-time data updates?\n   - The app technical guide does not mention any integration with blockchain or SQL databases to provide real-time data updates."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc\\docs\\json\\docs\\app\\dashboards` folder contains a collection of technical guides focused on the dashboard features of the Dune Docs project. These guides provide detailed explanations and examples on how to create, use, and explore various types of dashboards within the Dune app.\n\nThe `dashboards.md` guide offers a comprehensive tutorial on creating a dashboard on Dune, including adding visualizations, text boxes, manipulating text, embedding images and GIFs, and arranging the layout. This guide is essential for users who want to create custom dashboards to analyze and visualize blockchain data.\n\nThe `ecosystem-dashboards.md` guide highlights the Ecosystem Dashboards feature, which allows users to explore general ecosystem-level metrics related to blockchain data. The guide showcases two specific dashboards, Gas Prices and DeFi Adoption, providing valuable insights into gas prices and the growth of DeFi.\n\nThe `index.md` guide serves as an introduction to Dune, its user groups, and broad use cases for the platform. It outlines three main types of dashboards: Project Dashboards, Sector Dashboards, and Ecosystem Dashboards. This guide is useful for anyone interested in using Dune for blockchain data analytics.\n\nThe `project-dashboards.md` guide focuses on Project Dashboards, which enable users to assemble data on their favorite projects in one place. It provides an example of a Project Dashboard for Tornado.Cash, demonstrating how these dashboards can be used to track important metrics for a specific project.\n\nThe `sector-dashboards.md` guide covers the Sector Dashboards feature, which provides an overview of an entire sector of the crypto economy. It includes examples of three different Sector Dashboards: Dex Metrics, Indices, and Lending. These dashboards allow users to analyze real-time data and insights into different sectors of the crypto economy.\n\nOverall, the guides in this folder are essential for users who want to leverage the dashboard features of the Dune app to analyze and visualize blockchain data. The examples provided in these guides demonstrate the usefulness of dashboards in providing real-time data and insights into various aspects of the blockchain ecosystem.",
      "questions": ""
    },
    {
      "folderName": "queries",
      "folderPath": ".autodoc\\docs\\json\\docs\\app\\queries",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\app\\queries",
      "files": [
        {
          "fileName": "data-explorer.md",
          "filePath": "docs\\app\\queries\\data-explorer.md",
          "url": "https://dune.com/blob/master/app\\queries\\data-explorer.md",
          "summary": "The app technical guide provides a detailed explanation of how to use the Data Explorer feature of the Dune Docs project. The Data Explorer is a tool that allows users to search for blockchain and other data to use in their queries. The guide explains how to use the Data Explorer to find the data you need by selecting the database you want to search in and entering keywords, protocol names, contract names, or event names into the search bar. \n\nThe guide also provides information on advanced searching in Dune V2 and V1. It explains that Dune V2 has a different data structure than V1, and that with V2, users can incorporate data from multiple chains in one SQL query. The guide provides examples of how to search for data within specific datasets and how to limit searches to specific categories for better speed. \n\nThe guide also explains the use of icons and labels in the Data Explorer, which provide information on which blockchain a Spell, Protocol contract set, or individual contract belongs to, whether a piece of data/dataset is a Spell, Decoded Contract, or Community Dataset, and what type a piece of data is. The guide provides a link to descriptions of what all the icons and labels mean. \n\nOverall, the guide provides a comprehensive overview of how to use the Data Explorer feature of the Dune Docs project, including advanced searching techniques and the use of icons and labels. It provides clear examples and instructions for users to follow, making it easy to understand and use the Data Explorer effectively.",
          "questions": "1. What databases can be searched using the Data Explorer?\n   \n   The Data Explorer allows searching for blockchain and other data, but a blockchain SQL analyst might want to know specifically which databases are available for searching. The app technical guide mentions that the user can select which database to search from a dropdown list, but it does not provide information on the specific databases available.\n\n2. How does the search function work in Dune V2 compared to V1?\n   \n   The app technical guide provides detailed information on how the search function works in Dune V2 and V1, including how to search for specific schemas, events, calls, and contracts. A blockchain SQL analyst might want to know the differences between the search functions in V2 and V1 to determine which version to use for their queries.\n\n3. What are the different categories of datasets available in Dune V2?\n   \n   The app technical guide mentions that there are four different categories of datasets available in Dune V2, but it does not provide information on what those categories are. A blockchain SQL analyst might want to know the categories to determine which dataset to search for their queries."
        },
        {
          "fileName": "explorer-labels.md",
          "filePath": "docs\\app\\queries\\explorer-labels.md",
          "url": "https://dune.com/blob/master/app\\queries\\explorer-labels.md",
          "summary": "# Data Explorer Labels\n\nThis technical guide covers the labels used in the Data Explorer of the Dune Docs project. The guide provides a detailed explanation of the different labels used in the project, including blockchain icons, dataset icons, dataset labels, and data type labels.\n\nThe blockchain icons section explains the different blockchain icons that can be found in some data sets. Each icon represents a specific blockchain, including Ethereum, Gnosis Chain, Polygon, Optimism, BNB Chain, Solana, Arbitrum, Avalanche C-Chain, Ethereum Goerli Testnet, and Fantom. The icons can represent raw data, decoded projects, or spells.\n\nThe dataset icons section explains the different icons that represent data tables, decoded projects, spells, and community data sets. The data table icon can represent raw data, spells, or smart contract events or functions. The decoded project icon represents a protocol or protocol version, such as \"opensea\" or \"aave_v2\". The spell icon represents a spell set, such as cow_protocol containing \"batches\" and \"solvers\" spells. The community data icon represents a community data set.\n\nThe dataset labels section explains the different labels that can be used to identify a specific data set. The labels include project, sector, event, and function. The project label represents a spell set for a specific project, such as \"aave\". The sector label represents a spell set for a sector, such as \"dex\". The event label represents a smart contract event dataset, and the function label represents a smart contract function dataset.\n\nThe data type labels section explains the different labels used to represent data types. The labels include string, long, integer, double, boolean, date, timestamp, decimal, and array. The guide provides a link to the full Spark SQL data types documentation and the official PostgreSQL data types for V1 data.\n\nOverall, this technical guide provides a comprehensive explanation of the different labels used in the Data Explorer of the Dune Docs project. It helps users understand the meaning of each label and how to identify specific data sets. The guide also provides links to additional resources for more information on data types.",
          "questions": "1. What is the purpose of the Data Explorer in relation to blockchain data?\n- The Data Explorer is used to explore and analyze blockchain data from various blockchains, including Ethereum, Gnosis Chain, Polygon, Optimism, BNB Chain, Solana, Arbitrum, Avalanche C-Chain, Ethereum Goerli Testnet, and Fantom.\n\n2. What types of data sets are available in the Data Explorer?\n- The Data Explorer includes data sets such as Raw Data, Decoded Project, Spell, smart contract Event, smart contract Function, and Community Data Set.\n\n3. What are the available data types in the Data Explorer?\n- The available data types in the Data Explorer include string, long, integer, double, boolean, date, timestamp, decimal, and array. More information on these data types can be found in the Spark SQL data types documentation and the PostgreSQL data types documentation."
        },
        {
          "fileName": "index.md",
          "filePath": "docs\\app\\queries\\index.md",
          "url": "https://dune.com/blob/master/app\\queries\\index.md",
          "summary": "# Queries\n\nThis section of the app technical guide for Dune Docs covers the Query Editor feature of the app. The Query Editor allows users to input SQL code and run it to search for blockchain and other data. The guide is broken down into several sub-sections, each covering a different aspect of the Query Editor:\n\n- **The Data Explorer**: This sub-section covers the Data Explorer feature of the Query Editor. The Data Explorer allows users to search for blockchain and other data to use in their queries. The guide provides more information on how to use this feature effectively.\n\n- **The Query Window**: This sub-section covers the Query Window feature of the Query Editor. The Query Window is where users input their SQL code and run it. The guide provides more information on how to use this feature effectively.\n\n- **Query Results**: This sub-section covers the Query Results feature of the Query Editor. After running a query, users can view the data returned in the Query Results section. The guide provides more information on how to interpret and use this data effectively.\n\n- **Parameters**: This sub-section covers the Parameters feature of the Query Editor. Parameters allow users to implement variables in certain parts of their query code. The guide provides more information on how to use this feature effectively.\n\n- **Query Tips**: This sub-section provides a collection of tips to help users master query creation with Dune. The tips cover a range of topics, from basic SQL syntax to more advanced query optimization techniques.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the Query Editor feature of Dune Docs. It covers all the major aspects of the feature and provides tips and best practices for using it effectively. For example, the guide might provide an example of how to use Parameters to create a more flexible and reusable query.",
          "questions": "1. What type of blockchain data can be searched for using Dune's Data Explorer?\n- The app technical guide does not provide specific information on what type of blockchain data can be searched for using Dune's Data Explorer.\n\n2. Can Dune's Query Editor be used with any SQL database or is it specifically designed for blockchain data?\n- The app technical guide does not provide information on whether Dune's Query Editor is specifically designed for blockchain data or if it can be used with any SQL database.\n\n3. Are there any limitations or restrictions on the use of variables in Query code using Dune's Parameters feature?\n- The app technical guide does not provide information on any limitations or restrictions on the use of variables in Query code using Dune's Parameters feature."
        },
        {
          "fileName": "parameters.md",
          "filePath": "docs\\app\\queries\\parameters.md",
          "url": "https://dune.com/blob/master/app\\queries\\parameters.md",
          "summary": "# Parameters\n\nThis technical guide covers the use of parameters in the Dune app. Parameters are a feature that allows users to implement variables in certain parts of their Query code. This variable can be changed from dashboards, making it possible to create an interactive dashboard. \n\nThe guide explains how parameters work, how to use them, and provides an example Query and several example dashboards. Parameters are defined in the Query code as `{{parametername}}` and will appear below the Query and in any dashboards in which a Query Visualization with parameters is used in. \n\nThe guide explains how to add a parameter to a Query by writing `{{parametername}}` or using the button below the Query. Users can edit the properties of single parameters by clicking on the gear wheel next to the parameter in the Query editor. This allows users to set a default value, define a list of possible parameters, or change the type of the parameter. \n\nThe guide provides an example Query that returns the running total of Gas Paid in USD. The Query Author has chosen to include a parameter for `wallet address`, `start date`, and `end date`. The guide also provides several example dashboards that use parameters. These dashboards allow users to find interesting stats on Ethereum wallets, drill down into the single pools of Barnbridge's Smart Yield Product, find out how many people are participating in Yearn Vaults, and find out how their investment in $KLIMA is doing. \n\nIn summary, parameters allow users to make a certain part of their SQL query dynamic and thereby offer them to make Queries and dashboards interactive. That way, users can easily display detailed data on their dashboard since it allows the viewer to customize the dashboard for their needs. Parameters are like filters, but the possibilities of using this feature go beyond that.",
          "questions": "1. What is the syntax for defining parameters in the Query code?\n   \n   Parameters are defined in the Query code as `{{parametername}}`.\n\n2. How can parameters be shared between different Queries in a dashboard?\n   \n   Parameters in a Dashboard can be shared between different Queries, just make sure to use the same name, type and default value between all of them.\n\n3. What is the purpose of using parameters in a Query or dashboard?\n   \n   Parameters allow you to make a certain part of your SQL query dynamic and thereby offer you to make Queries and dashboards interactive. That way you can easily display detailed data on your dashboard since it allows the viewer to customize the dashboard for his needs."
        },
        {
          "fileName": "query-results.md",
          "filePath": "docs\\app\\queries\\query-results.md",
          "url": "https://dune.com/blob/master/app\\queries\\query-results.md",
          "summary": "The Query Results section of the Dune Docs app is the focus of this technical guide. The guide provides a detailed explanation of how to view and manipulate data returned by a query. The guide starts by explaining how to run a query and view the results in a table format. It also warns that queries run on the currently selected database in the Data Explorer dropdown. The guide then explains the elements above the results table, including the \"Query Results\" tab, the \"New Visualization\" button, and the \"Run\" button. \n\nThe guide also explains how to save a query, including how to make it private if the user is a Dune Premium user. After saving a query, the guide explains how to use the \"Star,\" \"Embed,\" and \"Fork\" buttons. The guide also explains how to re-run a query and how to cancel a running query. \n\nThe guide then explains how to format the results table, including how to change the title, alignment, format, and visibility of columns. The guide also explains how to color positive and negative values in a column. The guide provides a table that shows the different number formats that can be used to format column values. \n\nFinally, the guide explains how to create visualizations from query results. It instructs users to click the \"New Visualization\" button and provides a link to the Visualizations documentation. \n\nOverall, this technical guide provides a comprehensive explanation of how to use the Query Results section of the Dune Docs app. It covers everything from running a query to formatting the results table to creating visualizations. The guide is well-organized and easy to follow, making it a valuable resource for users of the app.",
          "questions": "1. What type of database does this app use for running queries?\n- The app technical guide does not provide information on the type of database used for running queries.\n\n2. Can users customize the formatting of the query results table?\n- Yes, users can customize the formatting and appearance of the query results table using the options provided below the table.\n\n3. Is there a limit to the number of visualizations that can be created from query results?\n- The app technical guide does not provide information on whether there is a limit to the number of visualizations that can be created from query results."
        },
        {
          "fileName": "query-window.md",
          "filePath": "docs\\app\\queries\\query-window.md",
          "url": "https://dune.com/blob/master/app\\queries\\query-window.md",
          "summary": "This app technical guide covers the Query Window feature of the Dune app. The Query Window is where users can input SQL code and run it. The guide provides an overview of the Query Window and its features, including Autocomplete, Run Selection, and Shortcuts.\n\nThe Autocomplete feature can be enabled or disabled using the gear wheel in the top right corner of the Query editor. It brings up PostgreSQL keywords, tables, and aliases that have already been included in the Query. The guide provides an example of how to turn on Autocomplete and how it works in the Query editor.\n\nThe Run Selection feature allows users to save time while testing and debugging Queries by running just a part of the Query. Users can highlight a part of the Query, and the Run button will turn into a Run Selection button. The guide provides an example of how to use the Run Selection feature and what happens when a syntactically complete and correct piece of SQL is not highlighted.\n\nThe guide also provides a list of Shortcuts to make crafting Queries faster. These shortcuts include executing the Query, commenting out selected code, bringing up a list of keywords, undoing and redoing changes, and searching for and replacing keywords. The guide notes that these shortcuts work on US/UK keyboards and may vary based on the language setting on the user's machine.\n\nOverall, this guide provides a comprehensive overview of the Query Window feature and its various functions. It is a useful resource for users who are new to the Dune app or who want to learn more about its features.",
          "questions": "1. What is the purpose of the Dune app and how does it relate to blockchain technology?\n   Answer: The app technical guide does not provide information on the purpose of the Dune app or its relation to blockchain technology. \n\n2. Does the Query window support SQL syntax for a specific type of database or is it database-agnostic?\n   Answer: The Query window supports PostgreSQL keywords, but the app technical guide does not provide information on whether it is specific to PostgreSQL or if it is database-agnostic.\n\n3. Are there any security features in place to prevent unauthorized access to the Query window or the SQL code entered into it?\n   Answer: The app technical guide does not provide information on any security features in place to prevent unauthorized access to the Query window or the SQL code entered into it."
        },
        {
          "fileName": "tips.md",
          "filePath": "docs\\app\\queries\\tips.md",
          "url": "https://dune.com/blob/master/app\\queries\\tips.md",
          "summary": "The Query Tips technical guide provides users with tips and tricks to help them become more proficient in querying data using Dune. The guide is divided into several sections, each of which focuses on a specific feature of the Dune app. \n\nThe first section of the guide is titled \"Use Spells\" and explains how users can use the well-organized data found in Spells to perform great analysis. Spells are tables that are cleaned and contain data/metadata that make them very straightforward to query. \n\nThe second section of the guide is titled \"V1 Inline Ethereum Addresses Formatting\" and explains how Ethereum addresses are stored as PostgreSQL byte arrays, which are encoded with the `\\x` prefix. This section provides users with an example of how to use an inline address to filter for a given token. \n\nThe third section of the guide is titled \"Quote Column and Table Names in camelCase\" and explains how column and table names are mostly taken directly from smart contract Application Binary Interfaces (ABIs), with no modification. This section provides users with an example of how to reference column and table names in PostgreSQL. \n\nThe fourth section of the guide is titled \"Remove Decimals\" and explains how to transmute ERC-20 tokens into a more human-friendly form by using the `erc20.tokens` table and dividing the token's `transfer_value` by 10. This section provides users with examples of how to perform this operation in both PostgreSQL and Spark SQL. \n\nThe fifth section of the guide is titled \"Get time with `date_trunc`\" and explains how to use the `date_trunc` function to get the time from decoded event tables. This section provides users with an example of how to use `date_trunc` to get the week from an event table. \n\nThe sixth section of the guide is titled \"How to get USD price\" and explains how to get the USD price of on-chain activity by joining the smart contract event with the `prices.usd` on the `minute` for a given `asset`. This section provides users with an example of how to perform this operation in PostgreSQL. \n\nThe seventh section of the guide is titled \"Token symbols\" and explains how to group results by token address using the token symbol instead. This section provides users with examples of how to perform this operation in both PostgreSQL and Spark SQL. \n\nThe eighth section of the guide is titled \"Filter Queries and Dashboards with Parameters\" and explains how to use parameters to turn a Query or Dashboard into an app for blockchain data. This section provides users with an example of how to add a parameter to a Query and how to use the parameter in a WHERE clause. \n\nOverall, the Query Tips technical guide provides users with a comprehensive overview of how to use Dune to query data effectively.",
          "questions": "1. What is the purpose of the app and what kind of data does it analyze?\n- The app is called Dune Docs and it provides Query related tips to help users become more powerful in analyzing data. It analyzes blockchain data.\n\n2. What is the difference between Dune V1 and other versions of the app?\n- Dune V1 engine has features that are not available in other versions of the app, such as V1 Inline Ethereum Addresses Formatting and Quote Column and Table Names in camelCase.\n\n3. How can parameters be used to filter queries and dashboards in the app?\n- Parameters can be added to the SQL editor on the Query editor page by clicking `Add parameter` in the bottom right corner. The name of the parameter is put inside double curly brackets, and if it is used in the WHERE clause, it needs to be enclosed in single quotes."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc\\docs\\json\\docs\\app\\queries` folder contains a series of technical guides that focus on the Query Editor feature of the Dune Docs app. These guides provide detailed explanations and examples on how to effectively use the Query Editor and its various components, such as the Data Explorer, Query Window, Query Results, and Parameters.\n\nFor instance, the `data-explorer.md` guide offers a comprehensive overview of the Data Explorer feature, including advanced searching techniques and the use of icons and labels. This guide would be useful for users who want to search for specific blockchain data and incorporate it into their queries.\n\nThe `explorer-labels.md` guide covers the different labels used in the Data Explorer, such as blockchain icons, dataset icons, dataset labels, and data type labels. This guide helps users understand the meaning of each label and how to identify specific data sets, making it easier to navigate the Data Explorer.\n\nThe `index.md` guide provides an overview of the Query Editor feature, covering aspects like the Data Explorer, Query Window, Query Results, Parameters, and Query Tips. This guide serves as a starting point for users who want to learn more about the Query Editor and its various components.\n\nThe `parameters.md` guide focuses on the use of parameters in the Dune app, allowing users to implement variables in their query code and create interactive dashboards. This guide would be helpful for users who want to create more flexible and reusable queries.\n\nThe `query-results.md` guide explains how to view and manipulate data returned by a query, including how to format the results table and create visualizations. This guide is valuable for users who want to interpret and use the data effectively.\n\nThe `query-window.md` guide covers the Query Window feature and its functions, such as Autocomplete, Run Selection, and Shortcuts. This guide is useful for users who are new to the Dune app or want to learn more about its features.\n\nLastly, the `tips.md` guide provides users with tips and tricks to help them become more proficient in querying data using Dune. This guide covers various aspects, such as using Spells, formatting Ethereum addresses, quoting column and table names, removing decimals, and more.\n\nOverall, the guides in the `.autodoc\\docs\\json\\docs\\app\\queries` folder provide a comprehensive understanding of the Query Editor feature and its various components, making it easier for users to effectively use the Dune Docs app for their data analysis needs.",
      "questions": ""
    },
    {
      "folderName": "visualizations",
      "folderPath": ".autodoc\\docs\\json\\docs\\app\\visualizations",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\app\\visualizations",
      "files": [
        {
          "fileName": "charts-graphs.md",
          "filePath": "docs\\app\\visualizations\\charts-graphs.md",
          "url": "https://dune.com/blob/master/app\\visualizations\\charts-graphs.md",
          "summary": "# Charts & Graphs\n\nThis technical guide covers how to create different types of graphs and charts using Dune. The guide explains how to create bar charts, area charts, scatter charts, line charts, pie charts, and mixed graphs. It also explains how to configure each visualization option, including chart options, result data, x-axis options, y-axis options, series options, and pie options.\n\nThe guide provides examples of each type of graph and explains how to edit each graph type. For instance, the guide explains how to enable or disable the legend for the chart, stack the chart values on top of each other based on the x-axis values, normalize the chart to display percentage values of the chosen data table, and display the individual datapoints inside of the graph.\n\nThe guide also explains how to pick the data points that are to be displayed, how to influence how your x-axis data gets displayed, and how to influence how your y-axis data gets displayed. Additionally, the guide explains how to finalize your graph by renaming the \"series,\" changing the chart type, changing the colors, and changing the order of the series.\n\nFinally, the guide explains how to format tick and label formats for numeric values and axis labels in your graphs. It provides a table that shows how to format tick and label formats for different starting values. \n\nOverall, this technical guide provides a comprehensive overview of how to create different types of graphs and charts using Dune. It is a useful resource for anyone who wants to create visualizations of their data.",
          "questions": "1. What types of data sources does Dune Docs support for creating charts and graphs?\n- The app technical guide does not provide information on the types of data sources supported by Dune Docs for creating charts and graphs.\n\n2. Can Dune Docs create charts and graphs for real-time data?\n- The app technical guide does not provide information on whether Dune Docs can create charts and graphs for real-time data.\n\n3. Does Dune Docs support customization of chart and graph colors beyond the browser native color selector?\n- The app technical guide does not provide information on whether Dune Docs supports customization of chart and graph colors beyond the browser native color selector."
        },
        {
          "fileName": "embeds.md",
          "filePath": "docs\\app\\visualizations\\embeds.md",
          "url": "https://dune.com/blob/master/app\\visualizations\\embeds.md",
          "summary": "# Embeds\n\nThis technical guide explains how to use the Embeds feature in the Dune Docs project. Embeds allow users to share live Dune charts across different web platforms. The guide starts by explaining how to generate an embed link by clicking on any query title and selecting the embed function in the top right corner. The guide also clarifies that the embed button works as a standalone link and as a way to embed live graphs into websites/apps. If a query has no visualizations, the link will be to the query results table. If there are multiple visualizations, the link will be for whichever visualization the user has selected when they clicked the Embed button.\n\nThe guide then goes on to explain how to use Embeds on different platforms such as Twitter, Discord, web pages, and Mirror.xyz. For Twitter, users can simply paste their embed link, and Twitter will render and update Dune visualizations automatically. For Discord, users can drop the embed link in the chat, and the corresponding visualization will be displayed. The guide also explains how to add live visualizations to any web page using an `iframe` and provides a code snippet example. For Mirror.xyz, users can easily embed Dune visualizations into articles by generating an embed link and postfixing it with `?display=iframe`.\n\nThe guide also highlights some known issues with Embeds, stating that they do not work in a couple of popular web platforms such as Substack, Medium, and GitBook. Finally, the guide explains how to use parameterized embeds, which work with parameterized queries. However, it is a bit tricky to get them to work, and users need to manually prefix the parameter link with the parameters. The guide provides an example of how to do this.\n\nOverall, this technical guide provides a comprehensive explanation of how to use the Embeds feature in the Dune Docs project. It covers different platforms and provides examples and code snippets to help users understand how to use Embeds effectively.",
          "questions": "1. What is the purpose of Dune Docs and how does it relate to blockchain technology?\n    \n    Answer: The app technical guide does not provide information on the purpose of Dune Docs or its relation to blockchain technology, so a blockchain SQL analyst might have this question.\n\n2. Can Dune embeds be used with other data visualization tools besides Dune charts?\n    \n    Answer: The app technical guide does not provide information on whether Dune embeds can be used with other data visualization tools, so a blockchain SQL analyst might have this question.\n\n3. Are there any security concerns with using Dune embeds on web pages or other platforms?\n    \n    Answer: The app technical guide does not provide information on any security concerns with using Dune embeds, so a blockchain SQL analyst might have this question."
        },
        {
          "fileName": "index.md",
          "filePath": "docs\\app\\visualizations\\index.md",
          "url": "https://dune.com/blob/master/app\\visualizations\\index.md",
          "summary": "# Visualizations\n\nThis technical guide is focused on the app feature of creating visualizations in the Dune project. The purpose of this guide is to provide information on how to create various types of visualizations using Dune.\n\nThe guide is divided into two main sections:\n\n## Charts & Graphs\n\nThis section explains and provides examples on how to create popular visualizations using Dune. It covers various types of charts and graphs such as line charts, bar charts, scatter plots, and pie charts. The section also provides information on how to customize the visualizations by changing colors, labels, and legends.\n\nExample: If a user wants to create a line chart to display the trend of sales over time, they can refer to this section to learn how to create the chart and customize it to their needs.\n\n## Other Visualizations\n\nThis section covers a few more unique visualizations that can be created using Dune. It includes examples such as heat maps, word clouds, and network graphs. The section provides information on how to create these visualizations and customize them.\n\nExample: If a user wants to create a network graph to display the relationships between different entities, they can refer to this section to learn how to create the graph and customize it to their needs.\n\nOverall, this technical guide provides a comprehensive overview of how to create various types of visualizations using Dune. It is a useful resource for users who want to create visualizations to analyze and present their data.",
          "questions": "1. What data sources does Dune Docs support for creating visualizations?\n- The app technical guide does not provide information on the data sources supported by Dune Docs for creating visualizations.\n\n2. Are there any limitations or restrictions on the types of visualizations that can be created using Dune Docs?\n- The app technical guide does not mention any limitations or restrictions on the types of visualizations that can be created using Dune Docs.\n\n3. Is there any information on how to integrate Dune Docs with blockchain data stored in a SQL database?\n- The app technical guide does not provide any information on how to integrate Dune Docs with blockchain data stored in a SQL database."
        },
        {
          "fileName": "other-visualizations.md",
          "filePath": "docs\\app\\visualizations\\other-visualizations.md",
          "url": "https://dune.com/blob/master/app\\visualizations\\other-visualizations.md",
          "summary": "This app technical guide covers non-graph visualizations that can be created using Dune. The guide is divided into two sections: Tables and Counters. \n\nThe Tables section explains how to create tables to display data. The default visualization for query results is a table, and users can create additional tables using the \"New visualization\" button and drop-down menu. The guide provides instructions on how to configure tables, including options for the table title and each column. Users can adjust the text alignment, numerical format, and visibility of each column. For numerical columns, users can choose between a normal display or a progress bar display, and can color positive and negative values. \n\nThe Counters section explains how to create counters, which are useful for displaying \"on a glance\" stats. Users can define which column and row of the underlying data table they want to display, and can adjust the formatting of the numerical data. Users can add a prefix or suffix to the counter value, and can choose how many decimal places to display. Additionally, users can add a label beneath the counter value. \n\nThe guide provides several examples of each type of visualization, including screenshots of the configuration options. Overall, this guide is a useful resource for users who want to create non-graph visualizations using Dune.",
          "questions": "1. What kind of data sources does Dune Docs support for creating visualizations?\n- The app technical guide does not provide information on the data sources supported by Dune Docs for creating visualizations.\n\n2. Can Dune Docs create visualizations for blockchain data stored in SQL databases?\n- The app technical guide does not provide information on whether Dune Docs can create visualizations for blockchain data stored in SQL databases.\n\n3. What kind of numerical formats can be used for data displayed in Counters and Tables?\n- The app technical guide provides information on the numerical formats that can be used for data displayed in Counters and Tables, including the ability to adjust the number of decimal places and add prefixes and suffixes to the data."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc\\docs\\json\\docs\\app\\visualizations` folder contains technical guides that focus on creating and customizing various types of visualizations using the Dune project. These guides are essential for users who want to analyze and present their data effectively through charts, graphs, and other visual representations.\n\nThe **charts-graphs.md** guide provides a comprehensive overview of creating different types of graphs and charts, such as bar charts, area charts, scatter charts, line charts, pie charts, and mixed graphs. It explains how to configure each visualization option and provides examples for each graph type. This guide is useful for users who want to create visually appealing and informative graphs to represent their data.\n\nThe **embeds.md** guide explains how to use the Embeds feature in the Dune Docs project, which allows users to share live Dune charts across different web platforms. It covers how to generate an embed link and use Embeds on various platforms like Twitter, Discord, web pages, and Mirror.xyz. This guide is beneficial for users who want to share their visualizations with a wider audience or embed them into websites and apps.\n\nThe **index.md** guide serves as an introduction to the visualizations feature in the Dune project. It provides an overview of the different types of visualizations that can be created using Dune, such as line charts, bar charts, scatter plots, pie charts, heat maps, word clouds, and network graphs. This guide is a starting point for users who want to explore the various visualization options available in Dune.\n\nThe **other-visualizations.md** guide covers non-graph visualizations, such as tables and counters. It explains how to create and configure tables to display data and how to create counters for displaying \"on a glance\" stats. This guide is useful for users who want to create non-graph visualizations to complement their data analysis.\n\nOverall, the guides in the `visualizations` folder provide a detailed and comprehensive understanding of creating various types of visualizations using the Dune project. These guides are essential for users who want to effectively analyze and present their data through visually appealing and informative representations.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc\\docs\\json\\docs\\app` folder contains technical guides that focus on various aspects of the Dune Docs app, such as decoding contracts, creating queries, and visualizing data. These guides are essential for users who want to effectively use the Dune Docs app for their data analysis needs.\n\nFor instance, the `decoding-contracts.md` guide provides a comprehensive overview of submitting contracts for decoding on the Dune platform. It covers different methods of submitting contracts, advanced options for detecting and indexing multiple contract addresses, and tracking submissions. This guide is useful for users who want to decode smart contracts into human-readable tables for each event and function defined in the contract's ABI.\n\nThe `index.md` guide serves as an introduction to the Dune app and its features, such as Queries, Visualizations, Dashboards, Decoding, and Teams. This guide is a starting point for users who want to learn more about the app and how to leverage its interface to analyze and visualize blockchain data.\n\nThe `teams.md` guide covers the Teams feature of the Dune app, which allows users to collaborate on shared content. It explains the benefits of creating a Team, different user roles, and how to get started with Teams. This guide is useful for users who want to collaborate with others on shared content and showcase all of a Team's work in one place.\n\nThe subfolders in this folder provide more in-depth guides on specific features of the Dune app. For example, the `dashboards` subfolder contains guides on creating and using various types of dashboards, such as Project Dashboards, Sector Dashboards, and Ecosystem Dashboards. These guides are essential for users who want to analyze and visualize blockchain data using custom dashboards.\n\nThe `queries` subfolder contains guides that focus on the Query Editor feature and its various components, such as the Data Explorer, Query Window, Query Results, and Parameters. These guides provide detailed explanations and examples on how to effectively use the Query Editor to create and manipulate queries.\n\nThe `visualizations` subfolder contains guides on creating and customizing various types of visualizations, such as charts, graphs, tables, and counters. These guides are essential for users who want to analyze and present their data effectively through visually appealing and informative representations.\n\nOverall, the guides in the `.autodoc\\docs\\json\\docs\\app` folder provide a comprehensive understanding of the Dune Docs app and its various features, making it easier for users to effectively use the app for their data analysis needs. The examples provided in these guides demonstrate the usefulness of the app in providing real-time data and insights into various aspects of the blockchain ecosystem.",
  "questions": ""
}