{
  "folderName": "queries",
  "folderPath": ".autodoc/docs/json/docs/app/queries",
  "url": "https://dune.com/.autodoc/docs/json/docs/app/queries",
  "files": [
    {
      "fileName": "data-explorer.md",
      "filePath": "docs/app/queries/data-explorer.md",
      "url": "https://dune.com/docs/app/queries/data-explorer.md",
      "summary": "# The Data Explorer\n\nThis technical guide covers the Data Explorer feature of the Dune app. The Data Explorer allows users to search for blockchain and other data to use in their Queries. The guide explains how to use the Data Explorer to find the data you need. \n\nThe guide starts by explaining how to select the database you want to search in and how to enter keywords, protocol names, contract names, or event names into the search bar to bring up a list of Tables containing blockchain data that can be used in Queries. \n\nThe guide then goes on to explain how to perform advanced searches in Dune V2 and V1. The V2 section explains how to search for data in the Dune V2 database, which contains all data accessible in one data lake. The V1 section explains how to search for data in the Dune V1 Engine, which has separate databases for each blockchain. \n\nThe guide provides examples of how to search for data using keywords, how to find specific schemas, events, calls, or contracts, and how to find specific contract data. It also explains how to add references to the Query Window. \n\nThe guide includes screenshots and GIFs to illustrate how to use the Data Explorer and how to perform advanced searches. It also provides warnings and notes to alert users to the fact that the V2 Data Explorer is still in beta and that the V2 explorer is not case sensitive. \n\nOverall, this guide provides a comprehensive overview of the Data Explorer feature of the Dune app and explains how to use it to find the data you need for your Queries.",
      "questions": "1. What databases can be searched using the Data Explorer?\n- The Data Explorer allows searching for blockchain and other data to use in Queries, and users can select which database they want to search in from the dropdown list.\n2. What is the difference between the V1 and V2 versions of the Data Explorer?\n- One of the biggest changes in Dune V2 lies in its data structure, where everything is accessible in one data lake, and users can incorporate data from multiple chains in one SQL query. In contrast, V1 allows users to search for specific schemas, events, calls, or contracts.\n3. How can users add references to the Query Window?\n- To add references to the contract tables, users can click the `>>` next to the Table name, and to reference specific data within a Table, they can click its name."
    },
    {
      "fileName": "explorer-labels.md",
      "filePath": "docs/app/queries/explorer-labels.md",
      "url": "https://dune.com/docs/app/queries/explorer-labels.md",
      "summary": "# Data Explorer Labels\n\nThis technical guide covers the various labels encountered while using the Data Explorer in the Dune Docs project. The guide is divided into four sections: Blockchain Icons, Dataset Icons, Dataset Labels, and Data Type Labels.\n\nThe Blockchain Icons section provides a table of icons and their descriptions for each blockchain available in the data sets. For instance, the Ethereum blockchain icon represents raw data, decoded project, or spell for Ethereum blockchain. \n\nThe Dataset Icons section provides a table of icons and their descriptions for each dataset. For example, the table icon represents data table (raw data, spell, or smart contract event or function), while the decoded project icon represents a decoded project (protocol or protocol version, e.g., \"opensea\" or \"aave_v2\").\n\nThe Dataset Labels section provides a table of labels and their descriptions for each dataset. For instance, the project label represents a spell set for a specific project, e.g., `aave`, while the sector label represents a spell set for a sector, e.g., `dex`.\n\nThe Data Type Labels section provides a table of labels and their descriptions for each data type. For example, the string label represents character sequences of any length greater or equal to 0, while the long label represents 8-byte signed integer numbers.\n\nOverall, this technical guide provides a comprehensive understanding of the various labels encountered while using the Data Explorer in the Dune Docs project. \n\nExample: \n\nIf a user encounters the Ethereum blockchain icon while using the Data Explorer, they can understand that the data set contains raw data, decoded project, or spell for the Ethereum blockchain. Similarly, if a user encounters the project label, they can understand that the data set represents a spell set for a specific project, such as `aave`.",
      "questions": "1. What is the purpose of the Data Explorer in relation to blockchain data?\n- The Data Explorer is used to explore and analyze blockchain data from various blockchains, including Ethereum, Gnosis Chain, Polygon, Optimism, BNB Chain, Solana, Arbitrum, Avalanche, and Fantom.\n\n2. What types of data sets are available in the Data Explorer?\n- The Data Explorer includes data sets for raw data, decoded projects, spells, and community data, as well as smart contract event and function datasets.\n\n3. What data types are supported in the Data Explorer?\n- The Data Explorer supports various data types, including string, long, integer, double, boolean, date, timestamp, decimal, and arrays of different data types."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/app/queries/index.md",
      "url": "https://dune.com/docs/app/queries/index.md",
      "summary": "# Queries\n\nThe Queries section of the Dune Docs app technical guide provides an overview of the Query Editor feature in Dune. The Query Editor is a tool that allows users to input SQL code and run it to retrieve data from the blockchain and other sources. The guide is broken down into several sub-sections, each of which covers a different aspect of the Query Editor.\n\nThe first sub-section, The Data Explorer, is focused on helping users search for blockchain and other data to use in their Queries. This feature allows users to explore the data available in Dune and select the data they want to use in their Queries.\n\nThe second sub-section, The Query Window, is where users input their SQL code and run it. This section provides an overview of how to use the Query Window and includes examples of SQL code that can be used to retrieve data from the blockchain.\n\nThe third sub-section, Query Results, is where users can view the data their Query returns after they run it. This section provides an overview of how to interpret the Query Results and includes examples of how to use the data in other parts of the Dune app.\n\nThe fourth sub-section, Parameters, is a specialized feature of Dune that allows users to implement variables in certain parts of their Query code. This section provides an overview of how to use Parameters and includes examples of how to implement them in SQL code.\n\nThe final sub-section, Query Tips, is a collection of tips to help users master Query creation with Dune. This section provides best practices for creating Queries and includes examples of how to optimize Query performance.\n\nOverall, the Queries section of the Dune Docs app technical guide is a comprehensive guide to using the Query Editor feature in Dune. It provides users with the information they need to create effective Queries and retrieve data from the blockchain and other sources.",
      "questions": "1. What type of blockchain data can be searched for using the Data Explorer?\n- The app technical guide does not provide information on the specific types of blockchain data that can be searched for using the Data Explorer.\n\n2. Can the Query Window handle complex SQL queries?\n- The app technical guide does not provide information on the limitations or capabilities of the Query Window in handling complex SQL queries.\n\n3. How are Parameters implemented in Dune's Query Editor?\n- The app technical guide briefly mentions Parameters as a specialized feature of Dune, but does not provide detailed information on how they are implemented in the Query Editor."
    },
    {
      "fileName": "parameters.md",
      "filePath": "docs/app/queries/parameters.md",
      "url": "https://dune.com/docs/app/queries/parameters.md",
      "summary": "# Parameters\n\nThis technical guide covers the use of parameters in the Dune app. Parameters are a feature that allows users to implement variables in certain parts of their Query code. This variable can be changed from dashboards, making it possible to create interactive dashboards. Parameters are defined in the Query code as `{{parametername}}` and will appear below the Query and in any dashboards in which a Query Visualization with parameters is used in. \n\nThe guide explains how to use parameters in Queries and dashboards. It also provides an example Query that returns the running total of Gas Paid in USD. The Query Author has included a parameter for `wallet address`, `start date`, and `end date`. The guide also provides examples of dashboards that use parameters. \n\nThe guide explains how to add a parameter to Queries by writing `{{parametername}}` or using the button below the Query. Users can edit the properties of single parameters by clicking on the gear wheel next to the parameter in the Query editor. This allows them to set a default value, define a list of possible parameters, or change the type of the parameter. If users want to share parameters between different Queries on a dashboard, they must ensure that they exactly match in regards to name, type, and default value.\n\nParameters allow users to make a certain part of their SQL query dynamic and thereby offer them to make Queries and dashboards interactive. That way, they can easily display detailed data on their dashboard since it allows the viewer to customize the dashboard for their needs. Parameters are like filters, but the possibilities of using this feature go beyond that.\n\nIn summary, this guide covers the use of parameters in the Dune app. It explains what parameters are, how to use them in Queries and dashboards, and provides examples of Queries and dashboards that use parameters.",
      "questions": "1. What is the purpose of Parameters in Dune Docs?\n- Parameters are a feature in Dune Docs that allow for the implementation of variables in certain parts of Query code, which can be changed from dashboards and allow for an interactive dashboard.\n\n2. How do you use Parameters in Dune Docs?\n- Parameters can be added to Queries by writing `{{parametername}}` or using the button below the Query. The properties of single parameters can be edited by clicking on the gear wheel next to the parameter in the Query editor.\n\n3. Can Parameters be shared between different Queries in a Dashboard?\n- Yes, Parameters in a Dashboard can be shared between different Queries, as long as they have the same name, type, and default value."
    },
    {
      "fileName": "query-results.md",
      "filePath": "docs/app/queries/query-results.md",
      "url": "https://dune.com/docs/app/queries/query-results.md",
      "summary": "# Query Results\n\nThe Query Results section of the Dune Docs app is where users can view the data their Query returns after running it. The guide explains how to get the results of a Query by clicking the \"Run\" button in the orange box below the Query Window. After a short time, the Query Results will appear as a table. The guide also warns users that queries run on the database they've currently selected in the Data Explorer dropdown. If a user runs a Query that uses Dune V1 Ethereum data, it will fail to run if they select another V1 Blockchain dataset or Dune V2.\n\nThe guide explains the elements above the Results table, which include the \"Query Results\" tab, the \"New Visualization\" button, \"Last run\" and \"Last run took\" times, and the \"Run\" button. The \"New Visualization\" button lets users make Visualizations out of their Query data. The guide also explains how to save a Query, and after running a Query at least once, the \"Save\" button appears above the Query Window. Users can give their Query a name and make it private if they're a Dune Premium user. \n\nThe guide also explains how to re-run a Query, format Results tables, and make Visualizations out of Query Results. Users can change the formatting and appearance of their Query Results tables with the options below the table. The guide explains the different column settings, including Title, Align, Format, Hide column, Colored positive values, and Colored negative values. The guide also provides a table that shows the different column number formatting options. \n\nOverall, the Query Results guide provides a detailed explanation of how to use the Query Results section of the Dune Docs app. It covers everything from running a Query to formatting Results tables and making Visualizations out of Query Results. The guide is a useful resource for users who want to get the most out of the Query Results section.",
      "questions": "1. What is the purpose of the Query Results section in Dune Docs?\n    \n    The Query Results section is where you can see the data your Query returns after running it.\n\n2. How can you save your Query in Dune Docs?\n    \n    After running your Query at least once, you'll see the Save button appear above the Query Window. Click it to see a pop-up that asks you to give your Query a name, with the option to make this Query private.\n\n3. How can you change the formatting and appearance of your Query Results tables in Dune Docs?\n    \n    You can change the formatting and appearance of your Query Results tables with the options below the table. The options include changing the table's title, settings for each of your columns, and adding the table to a dashboard."
    },
    {
      "fileName": "query-window.md",
      "filePath": "docs/app/queries/query-window.md",
      "url": "https://dune.com/docs/app/queries/query-window.md",
      "summary": "# The Query Window\n\nThis technical guide covers the Query window in the Dune Docs project. The Query window is where users can input SQL code and run it. The guide provides information on how to use the Query window effectively.\n\n## Autocomplete\n\nThe guide explains how to enable or disable the autocomplete function of the Query editor using the gear wheel in the top right corner. The autocomplete feature brings up PostgreSQL keywords, tables, and aliases that have already been included in the Query. The guide provides an example of how to turn on autocomplete and how it works in the Query editor.\n\n## Run Selection\n\nThe guide explains how to save time while testing and debugging Queries by running just a part of the Query. Users can highlight a part of the Query, and the <span class=\"fk-btn-1\">Run</span> button will turn into a <span class=\"fk-btn-1\">Run selection</span> button. The guide provides an example of how to run a selection and what happens when a user highlights an incorrect piece of SQL.\n\n## Shortcuts\n\nThe guide provides a list of shortcuts that users can use to make crafting Queries faster. The shortcuts include executing the Query, commenting out selected code, bringing up a list of keywords, undoing and redoing changes, and searching for and replacing keywords. The guide notes that these shortcuts work on US/UK keyboards and may vary based on the language setting on the user's machine.\n\nOverall, this technical guide provides a comprehensive overview of the Query window in the Dune Docs project. It explains how to use the Query window effectively and provides examples of how to use its features.",
      "questions": "1. What is the purpose of the Dune app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the Dune app or its relation to blockchain technology.\n\n2. What version of PostgreSQL does the Query editor support?\n- The app technical guide does not provide information on the version of PostgreSQL supported by the Query editor.\n\n3. Are there any security features in place to protect sensitive SQL code entered into the Query window?\n- The app technical guide does not provide information on any security features in place to protect sensitive SQL code entered into the Query window."
    },
    {
      "fileName": "tips.md",
      "filePath": "docs/app/queries/tips.md",
      "url": "https://dune.com/docs/app/queries/tips.md",
      "summary": "# Query Tips\n\nThis technical guide provides tips for using queries in the Dune app. It covers various topics such as using Spells, formatting Ethereum addresses, quoting column and table names, removing decimals, getting time with `date_trunc`, getting USD price, using token symbols, and filtering queries and dashboards with parameters.\n\nThe guide starts with an introduction to Spells, which are well-organized tables that contain cleaned data and metadata that make them easy to query. The guide then explains how to format Ethereum addresses in Dune V1 engine, which uses PostgreSQL byte arrays encoded with the `\\x` prefix. The guide also provides a warning that column and table names are case sensitive in PostgreSQL and that double quotes are reserved for tables and columns, whereas single quotes are reserved for values.\n\nThe guide then explains how to remove decimals from Ether transfers and ERC-20 tokens, which have 18 decimal places, making them difficult to read. The guide suggests using the `erc20.tokens` table and dividing the token's `transfer_value` by 10. The guide also provides examples of how to use `date_trunc` function to get time and how to get USD price by joining the smart contract event with the `prices.usd` on the `minute` for a given `asset`.\n\nThe guide also explains how to use token symbols instead of token addresses to group results by token address. To do this, the guide suggests joining the `erc20.tokens` table with the event table where `asset` = `{{token_address}}`. The guide also provides examples of how to filter queries and dashboards with parameters, which can turn a Query or Dashboard into an app for blockchain data.\n\nOverall, this technical guide provides useful tips for using queries in the Dune app. It is a valuable resource for anyone looking to become a more powerful user of Dune.",
      "questions": "1. What is the purpose of the Dune V1 engine and what features are only available in it?\n- The Dune V1 engine is mentioned in several sections of the technical guide, and a blockchain SQL analyst might want to know what it is and what features are exclusive to it. The guide states that the V1 engine is required for certain features such as inline Ethereum address formatting and camelCase table and column name references.\n\n2. How can token symbols be used instead of token addresses in queries?\n- The guide explains that token symbols can be more user-friendly than token addresses, but also warns that the erc20.tokens table only contains popular tokens and may exclude more obscure ones. A blockchain SQL analyst might want to know how to join the erc20.tokens table with their event table to select symbols instead of addresses.\n\n3. How can parameters be used to filter queries and dashboards?\n- The guide explains how parameters can be used to turn queries and dashboards into blockchain data apps, and provides an example of how to add a parameter for token symbol or holder address. A blockchain SQL analyst might want to know how to use parameters in their queries and how to format addresses to save users from having to input the `\\x` prefix."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/docs/app/queries` folder contains technical guides that focus on the Queries feature of the Dune app. These guides provide comprehensive information on how to use the Query Editor, Data Explorer, and other related features to create effective queries and retrieve data from the blockchain and other sources.\n\nFor example, the `data-explorer.md` guide covers the Data Explorer feature, which allows users to search for blockchain and other data to use in their queries. It explains how to select the database, enter keywords, and perform advanced searches in Dune V2 and V1. This guide is useful for users who want to find specific data for their queries and understand the differences between Dune V2 and V1 databases.\n\nThe `explorer-labels.md` guide provides a detailed understanding of the various labels encountered while using the Data Explorer. It covers Blockchain Icons, Dataset Icons, Dataset Labels, and Data Type Labels. This guide helps users to quickly identify and understand the data sets they encounter while using the Data Explorer.\n\nThe `index.md` guide serves as an overview of the Query Editor feature in Dune. It is broken down into several sub-sections, each covering a different aspect of the Query Editor, such as The Data Explorer, The Query Window, Query Results, Parameters, and Query Tips. This guide is a comprehensive resource for users who want to learn how to create effective queries and retrieve data from the blockchain and other sources.\n\nThe `parameters.md` guide covers the use of parameters in the Dune app. Parameters allow users to implement variables in certain parts of their Query code, making it possible to create interactive dashboards. This guide explains how to use parameters in Queries and dashboards and provides examples of Queries and dashboards that use parameters.\n\nThe `query-results.md` guide focuses on the Query Results section of the Dune Docs app, where users can view the data their Query returns after running it. It covers how to run a Query, format Results tables, and make Visualizations out of Query Results. This guide is useful for users who want to get the most out of the Query Results section.\n\nThe `query-window.md` guide provides a comprehensive overview of the Query window in the Dune Docs project. It explains how to use the Query window effectively, including enabling or disabling the autocomplete function, running a selection of the Query, and using shortcuts.\n\nFinally, the `tips.md` guide offers useful tips for using queries in the Dune app, covering topics such as using Spells, formatting Ethereum addresses, quoting column and table names, removing decimals, getting time with `date_trunc`, getting USD price, using token symbols, and filtering queries and dashboards with parameters.\n\nOverall, the guides in the `.autodoc/docs/json/docs/app/queries` folder provide valuable information and resources for users who want to become more proficient in using the Queries feature of the Dune app.",
  "questions": ""
}