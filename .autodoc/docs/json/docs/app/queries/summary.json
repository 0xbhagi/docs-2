{
  "folderName": "queries",
  "folderPath": ".autodoc\\docs\\json\\docs\\app\\queries",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\app\\queries",
  "files": [
    {
      "fileName": "data-explorer.md",
      "filePath": "docs\\app\\queries\\data-explorer.md",
      "url": "https://dune.com/blob/master/app\\queries\\data-explorer.md",
      "summary": "The app technical guide provides a detailed explanation of how to use the Data Explorer feature of the Dune Docs project. The Data Explorer is a tool that allows users to search for blockchain and other data to use in their queries. The guide explains how to use the Data Explorer to find the data you need by selecting the database you want to search in and entering keywords, protocol names, contract names, or event names into the search bar. \n\nThe guide also provides information on advanced searching in Dune V2 and V1. It explains that Dune V2 has a different data structure than V1, and that with V2, users can incorporate data from multiple chains in one SQL query. The guide provides examples of how to search for data within specific datasets and how to limit searches to specific categories for better speed. \n\nThe guide also explains the use of icons and labels in the Data Explorer, which provide information on which blockchain a Spell, Protocol contract set, or individual contract belongs to, whether a piece of data/dataset is a Spell, Decoded Contract, or Community Dataset, and what type a piece of data is. The guide provides a link to descriptions of what all the icons and labels mean. \n\nOverall, the guide provides a comprehensive overview of how to use the Data Explorer feature of the Dune Docs project, including advanced searching techniques and the use of icons and labels. It provides clear examples and instructions for users to follow, making it easy to understand and use the Data Explorer effectively.",
      "questions": "1. What databases can be searched using the Data Explorer?\n   \n   The Data Explorer allows searching for blockchain and other data, but a blockchain SQL analyst might want to know specifically which databases are available for searching. The app technical guide mentions that the user can select which database to search from a dropdown list, but it does not provide information on the specific databases available.\n\n2. How does the search function work in Dune V2 compared to V1?\n   \n   The app technical guide provides detailed information on how the search function works in Dune V2 and V1, including how to search for specific schemas, events, calls, and contracts. A blockchain SQL analyst might want to know the differences between the search functions in V2 and V1 to determine which version to use for their queries.\n\n3. What are the different categories of datasets available in Dune V2?\n   \n   The app technical guide mentions that there are four different categories of datasets available in Dune V2, but it does not provide information on what those categories are. A blockchain SQL analyst might want to know the categories to determine which dataset to search for their queries."
    },
    {
      "fileName": "explorer-labels.md",
      "filePath": "docs\\app\\queries\\explorer-labels.md",
      "url": "https://dune.com/blob/master/app\\queries\\explorer-labels.md",
      "summary": "# Data Explorer Labels\n\nThis technical guide covers the labels used in the Data Explorer of the Dune Docs project. The guide provides a detailed explanation of the different labels used in the project, including blockchain icons, dataset icons, dataset labels, and data type labels.\n\nThe blockchain icons section explains the different blockchain icons that can be found in some data sets. Each icon represents a specific blockchain, including Ethereum, Gnosis Chain, Polygon, Optimism, BNB Chain, Solana, Arbitrum, Avalanche C-Chain, Ethereum Goerli Testnet, and Fantom. The icons can represent raw data, decoded projects, or spells.\n\nThe dataset icons section explains the different icons that represent data tables, decoded projects, spells, and community data sets. The data table icon can represent raw data, spells, or smart contract events or functions. The decoded project icon represents a protocol or protocol version, such as \"opensea\" or \"aave_v2\". The spell icon represents a spell set, such as cow_protocol containing \"batches\" and \"solvers\" spells. The community data icon represents a community data set.\n\nThe dataset labels section explains the different labels that can be used to identify a specific data set. The labels include project, sector, event, and function. The project label represents a spell set for a specific project, such as \"aave\". The sector label represents a spell set for a sector, such as \"dex\". The event label represents a smart contract event dataset, and the function label represents a smart contract function dataset.\n\nThe data type labels section explains the different labels used to represent data types. The labels include string, long, integer, double, boolean, date, timestamp, decimal, and array. The guide provides a link to the full Spark SQL data types documentation and the official PostgreSQL data types for V1 data.\n\nOverall, this technical guide provides a comprehensive explanation of the different labels used in the Data Explorer of the Dune Docs project. It helps users understand the meaning of each label and how to identify specific data sets. The guide also provides links to additional resources for more information on data types.",
      "questions": "1. What is the purpose of the Data Explorer in relation to blockchain data?\n- The Data Explorer is used to explore and analyze blockchain data from various blockchains, including Ethereum, Gnosis Chain, Polygon, Optimism, BNB Chain, Solana, Arbitrum, Avalanche C-Chain, Ethereum Goerli Testnet, and Fantom.\n\n2. What types of data sets are available in the Data Explorer?\n- The Data Explorer includes data sets such as Raw Data, Decoded Project, Spell, smart contract Event, smart contract Function, and Community Data Set.\n\n3. What are the available data types in the Data Explorer?\n- The available data types in the Data Explorer include string, long, integer, double, boolean, date, timestamp, decimal, and array. More information on these data types can be found in the Spark SQL data types documentation and the PostgreSQL data types documentation."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\app\\queries\\index.md",
      "url": "https://dune.com/blob/master/app\\queries\\index.md",
      "summary": "# Queries\n\nThis section of the app technical guide for Dune Docs covers the Query Editor feature of the app. The Query Editor allows users to input SQL code and run it to search for blockchain and other data. The guide is broken down into several sub-sections, each covering a different aspect of the Query Editor:\n\n- **The Data Explorer**: This sub-section covers the Data Explorer feature of the Query Editor. The Data Explorer allows users to search for blockchain and other data to use in their queries. The guide provides more information on how to use this feature effectively.\n\n- **The Query Window**: This sub-section covers the Query Window feature of the Query Editor. The Query Window is where users input their SQL code and run it. The guide provides more information on how to use this feature effectively.\n\n- **Query Results**: This sub-section covers the Query Results feature of the Query Editor. After running a query, users can view the data returned in the Query Results section. The guide provides more information on how to interpret and use this data effectively.\n\n- **Parameters**: This sub-section covers the Parameters feature of the Query Editor. Parameters allow users to implement variables in certain parts of their query code. The guide provides more information on how to use this feature effectively.\n\n- **Query Tips**: This sub-section provides a collection of tips to help users master query creation with Dune. The tips cover a range of topics, from basic SQL syntax to more advanced query optimization techniques.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the Query Editor feature of Dune Docs. It covers all the major aspects of the feature and provides tips and best practices for using it effectively. For example, the guide might provide an example of how to use Parameters to create a more flexible and reusable query.",
      "questions": "1. What type of blockchain data can be searched for using Dune's Data Explorer?\n- The app technical guide does not provide specific information on what type of blockchain data can be searched for using Dune's Data Explorer.\n\n2. Can Dune's Query Editor be used with any SQL database or is it specifically designed for blockchain data?\n- The app technical guide does not provide information on whether Dune's Query Editor is specifically designed for blockchain data or if it can be used with any SQL database.\n\n3. Are there any limitations or restrictions on the use of variables in Query code using Dune's Parameters feature?\n- The app technical guide does not provide information on any limitations or restrictions on the use of variables in Query code using Dune's Parameters feature."
    },
    {
      "fileName": "parameters.md",
      "filePath": "docs\\app\\queries\\parameters.md",
      "url": "https://dune.com/blob/master/app\\queries\\parameters.md",
      "summary": "# Parameters\n\nThis technical guide covers the use of parameters in the Dune app. Parameters are a feature that allows users to implement variables in certain parts of their Query code. This variable can be changed from dashboards, making it possible to create an interactive dashboard. \n\nThe guide explains how parameters work, how to use them, and provides an example Query and several example dashboards. Parameters are defined in the Query code as `{{parametername}}` and will appear below the Query and in any dashboards in which a Query Visualization with parameters is used in. \n\nThe guide explains how to add a parameter to a Query by writing `{{parametername}}` or using the button below the Query. Users can edit the properties of single parameters by clicking on the gear wheel next to the parameter in the Query editor. This allows users to set a default value, define a list of possible parameters, or change the type of the parameter. \n\nThe guide provides an example Query that returns the running total of Gas Paid in USD. The Query Author has chosen to include a parameter for `wallet address`, `start date`, and `end date`. The guide also provides several example dashboards that use parameters. These dashboards allow users to find interesting stats on Ethereum wallets, drill down into the single pools of Barnbridge's Smart Yield Product, find out how many people are participating in Yearn Vaults, and find out how their investment in $KLIMA is doing. \n\nIn summary, parameters allow users to make a certain part of their SQL query dynamic and thereby offer them to make Queries and dashboards interactive. That way, users can easily display detailed data on their dashboard since it allows the viewer to customize the dashboard for their needs. Parameters are like filters, but the possibilities of using this feature go beyond that.",
      "questions": "1. What is the syntax for defining parameters in the Query code?\n   \n   Parameters are defined in the Query code as `{{parametername}}`.\n\n2. How can parameters be shared between different Queries in a dashboard?\n   \n   Parameters in a Dashboard can be shared between different Queries, just make sure to use the same name, type and default value between all of them.\n\n3. What is the purpose of using parameters in a Query or dashboard?\n   \n   Parameters allow you to make a certain part of your SQL query dynamic and thereby offer you to make Queries and dashboards interactive. That way you can easily display detailed data on your dashboard since it allows the viewer to customize the dashboard for his needs."
    },
    {
      "fileName": "query-results.md",
      "filePath": "docs\\app\\queries\\query-results.md",
      "url": "https://dune.com/blob/master/app\\queries\\query-results.md",
      "summary": "The Query Results section of the Dune Docs app is the focus of this technical guide. The guide provides a detailed explanation of how to view and manipulate data returned by a query. The guide starts by explaining how to run a query and view the results in a table format. It also warns that queries run on the currently selected database in the Data Explorer dropdown. The guide then explains the elements above the results table, including the \"Query Results\" tab, the \"New Visualization\" button, and the \"Run\" button. \n\nThe guide also explains how to save a query, including how to make it private if the user is a Dune Premium user. After saving a query, the guide explains how to use the \"Star,\" \"Embed,\" and \"Fork\" buttons. The guide also explains how to re-run a query and how to cancel a running query. \n\nThe guide then explains how to format the results table, including how to change the title, alignment, format, and visibility of columns. The guide also explains how to color positive and negative values in a column. The guide provides a table that shows the different number formats that can be used to format column values. \n\nFinally, the guide explains how to create visualizations from query results. It instructs users to click the \"New Visualization\" button and provides a link to the Visualizations documentation. \n\nOverall, this technical guide provides a comprehensive explanation of how to use the Query Results section of the Dune Docs app. It covers everything from running a query to formatting the results table to creating visualizations. The guide is well-organized and easy to follow, making it a valuable resource for users of the app.",
      "questions": "1. What type of database does this app use for running queries?\n- The app technical guide does not provide information on the type of database used for running queries.\n\n2. Can users customize the formatting of the query results table?\n- Yes, users can customize the formatting and appearance of the query results table using the options provided below the table.\n\n3. Is there a limit to the number of visualizations that can be created from query results?\n- The app technical guide does not provide information on whether there is a limit to the number of visualizations that can be created from query results."
    },
    {
      "fileName": "query-window.md",
      "filePath": "docs\\app\\queries\\query-window.md",
      "url": "https://dune.com/blob/master/app\\queries\\query-window.md",
      "summary": "This app technical guide covers the Query Window feature of the Dune app. The Query Window is where users can input SQL code and run it. The guide provides an overview of the Query Window and its features, including Autocomplete, Run Selection, and Shortcuts.\n\nThe Autocomplete feature can be enabled or disabled using the gear wheel in the top right corner of the Query editor. It brings up PostgreSQL keywords, tables, and aliases that have already been included in the Query. The guide provides an example of how to turn on Autocomplete and how it works in the Query editor.\n\nThe Run Selection feature allows users to save time while testing and debugging Queries by running just a part of the Query. Users can highlight a part of the Query, and the Run button will turn into a Run Selection button. The guide provides an example of how to use the Run Selection feature and what happens when a syntactically complete and correct piece of SQL is not highlighted.\n\nThe guide also provides a list of Shortcuts to make crafting Queries faster. These shortcuts include executing the Query, commenting out selected code, bringing up a list of keywords, undoing and redoing changes, and searching for and replacing keywords. The guide notes that these shortcuts work on US/UK keyboards and may vary based on the language setting on the user's machine.\n\nOverall, this guide provides a comprehensive overview of the Query Window feature and its various functions. It is a useful resource for users who are new to the Dune app or who want to learn more about its features.",
      "questions": "1. What is the purpose of the Dune app and how does it relate to blockchain technology?\n   Answer: The app technical guide does not provide information on the purpose of the Dune app or its relation to blockchain technology. \n\n2. Does the Query window support SQL syntax for a specific type of database or is it database-agnostic?\n   Answer: The Query window supports PostgreSQL keywords, but the app technical guide does not provide information on whether it is specific to PostgreSQL or if it is database-agnostic.\n\n3. Are there any security features in place to prevent unauthorized access to the Query window or the SQL code entered into it?\n   Answer: The app technical guide does not provide information on any security features in place to prevent unauthorized access to the Query window or the SQL code entered into it."
    },
    {
      "fileName": "tips.md",
      "filePath": "docs\\app\\queries\\tips.md",
      "url": "https://dune.com/blob/master/app\\queries\\tips.md",
      "summary": "The Query Tips technical guide provides users with tips and tricks to help them become more proficient in querying data using Dune. The guide is divided into several sections, each of which focuses on a specific feature of the Dune app. \n\nThe first section of the guide is titled \"Use Spells\" and explains how users can use the well-organized data found in Spells to perform great analysis. Spells are tables that are cleaned and contain data/metadata that make them very straightforward to query. \n\nThe second section of the guide is titled \"V1 Inline Ethereum Addresses Formatting\" and explains how Ethereum addresses are stored as PostgreSQL byte arrays, which are encoded with the `\\x` prefix. This section provides users with an example of how to use an inline address to filter for a given token. \n\nThe third section of the guide is titled \"Quote Column and Table Names in camelCase\" and explains how column and table names are mostly taken directly from smart contract Application Binary Interfaces (ABIs), with no modification. This section provides users with an example of how to reference column and table names in PostgreSQL. \n\nThe fourth section of the guide is titled \"Remove Decimals\" and explains how to transmute ERC-20 tokens into a more human-friendly form by using the `erc20.tokens` table and dividing the token's `transfer_value` by 10. This section provides users with examples of how to perform this operation in both PostgreSQL and Spark SQL. \n\nThe fifth section of the guide is titled \"Get time with `date_trunc`\" and explains how to use the `date_trunc` function to get the time from decoded event tables. This section provides users with an example of how to use `date_trunc` to get the week from an event table. \n\nThe sixth section of the guide is titled \"How to get USD price\" and explains how to get the USD price of on-chain activity by joining the smart contract event with the `prices.usd` on the `minute` for a given `asset`. This section provides users with an example of how to perform this operation in PostgreSQL. \n\nThe seventh section of the guide is titled \"Token symbols\" and explains how to group results by token address using the token symbol instead. This section provides users with examples of how to perform this operation in both PostgreSQL and Spark SQL. \n\nThe eighth section of the guide is titled \"Filter Queries and Dashboards with Parameters\" and explains how to use parameters to turn a Query or Dashboard into an app for blockchain data. This section provides users with an example of how to add a parameter to a Query and how to use the parameter in a WHERE clause. \n\nOverall, the Query Tips technical guide provides users with a comprehensive overview of how to use Dune to query data effectively.",
      "questions": "1. What is the purpose of the app and what kind of data does it analyze?\n- The app is called Dune Docs and it provides Query related tips to help users become more powerful in analyzing data. It analyzes blockchain data.\n\n2. What is the difference between Dune V1 and other versions of the app?\n- Dune V1 engine has features that are not available in other versions of the app, such as V1 Inline Ethereum Addresses Formatting and Quote Column and Table Names in camelCase.\n\n3. How can parameters be used to filter queries and dashboards in the app?\n- Parameters can be added to the SQL editor on the Query editor page by clicking `Add parameter` in the bottom right corner. The name of the parameter is put inside double curly brackets, and if it is used in the WHERE clause, it needs to be enclosed in single quotes."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc\\docs\\json\\docs\\app\\queries` folder contains a series of technical guides that focus on the Query Editor feature of the Dune Docs app. These guides provide detailed explanations and examples on how to effectively use the Query Editor and its various components, such as the Data Explorer, Query Window, Query Results, and Parameters.\n\nFor instance, the `data-explorer.md` guide offers a comprehensive overview of the Data Explorer feature, including advanced searching techniques and the use of icons and labels. This guide would be useful for users who want to search for specific blockchain data and incorporate it into their queries.\n\nThe `explorer-labels.md` guide covers the different labels used in the Data Explorer, such as blockchain icons, dataset icons, dataset labels, and data type labels. This guide helps users understand the meaning of each label and how to identify specific data sets, making it easier to navigate the Data Explorer.\n\nThe `index.md` guide provides an overview of the Query Editor feature, covering aspects like the Data Explorer, Query Window, Query Results, Parameters, and Query Tips. This guide serves as a starting point for users who want to learn more about the Query Editor and its various components.\n\nThe `parameters.md` guide focuses on the use of parameters in the Dune app, allowing users to implement variables in their query code and create interactive dashboards. This guide would be helpful for users who want to create more flexible and reusable queries.\n\nThe `query-results.md` guide explains how to view and manipulate data returned by a query, including how to format the results table and create visualizations. This guide is valuable for users who want to interpret and use the data effectively.\n\nThe `query-window.md` guide covers the Query Window feature and its functions, such as Autocomplete, Run Selection, and Shortcuts. This guide is useful for users who are new to the Dune app or want to learn more about its features.\n\nLastly, the `tips.md` guide provides users with tips and tricks to help them become more proficient in querying data using Dune. This guide covers various aspects, such as using Spells, formatting Ethereum addresses, quoting column and table names, removing decimals, and more.\n\nOverall, the guides in the `.autodoc\\docs\\json\\docs\\app\\queries` folder provide a comprehensive understanding of the Query Editor feature and its various components, making it easier for users to effectively use the Dune Docs app for their data analysis needs.",
  "questions": ""
}