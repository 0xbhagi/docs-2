{
  "folderName": "SQL-language",
  "folderPath": "docs/query/DuneSQL-reference/SQL-language",
  "url": "https://dune.com/docs/query/DuneSQL-reference/SQL-language",
  "files": [
    {
      "fileName": "datatypes.md",
      "filePath": "docs/query/DuneSQL-reference/SQL-language/datatypes.md",
      "url": "https://dune.com/docs/query/DuneSQL-reference/SQL-language/datatypes.md",
      "summary": "The app technical guide covers various data types used in DuneSQL, including:\n\n- **Boolean**: Captures boolean values `true` and `false`.\n- **Integer**: Different integer types such as `TINYINT`, `SMALLINT`, `INTEGER`, `BIGINT`, `UINT256`, and `INT256`.\n- **Floating-point**: `REAL` and `DOUBLE` types implementing the IEEE Standard 754 for Binary Floating-Point Arithmetic.\n- **Fixed-precision**: `DECIMAL` type with specified precision and scale.\n- **String**: `VARCHAR`, `CHAR`, `VARBINARY`, and `JSON` types.\n- **Date and time**: Various date and time types like `DATE`, `TIME`, `TIMESTAMP`, and `INTERVAL`.\n- **Structural**: `ARRAY`, `MAP`, and `ROW` types for complex data structures.\n- **Network address**: `IPADDRESS` type for IPv4 and IPv6 addresses.\n- **UUID**: Represents a Universally Unique IDentifier.\n- **HyperLogLog**: Data sketch for efficient computation of approximate distinct count.\n- **SetDigest**: Data sketch for calculating Jaccard similarity coefficient between two sets.\n- **Quantile digest**: Summary structure for capturing approximate distribution of data.\n- **T-Digest**: Summary structure similar to qdigest with higher performance, lower memory usage, and higher accuracy at high and low percentiles.\n\nThe guide provides examples and detailed explanations for each data type, including their usage, properties, and functions.",
      "questions": "1. **What are the differences between the `UINT256` and `INT256` data types, and when should each be used in EVM smart contracts?**\n\n   The `UINT256` data type is a 256-bit unsigned integer, representing only non-negative integers, including very large positive integers and zero. The `INT256` data type is a 256-bit signed integer, representing a wide range of values, including very large negative and positive integers, as well as zero. In EVM smart contracts, `UINT256` is commonly used for representing balances and other quantities, while `INT256` is used when the value can be negative.\n\n2. **How can I work with `VARBINARY` data types in DuneSQL, and are there any custom functions available for this purpose?**\n\n   In DuneSQL, addresses, hashes, calldata, and logs are stored as `VARBINARY` data types. You can use SQL statements with the binary data prefix `0x` and hexadecimal format for working with `VARBINARY` data types. DuneSQL also provides custom functions to make it easier to work with `VARBINARY` data types, which can be found on the [varbinary functions](/querying-with-DuneSQL/functions/varbinary/) page.\n\n3. **What are the differences between the `QDigest` and `TDigest` data structures, and when should each be used?**\n\n   Both `QDigest` and `TDigest` are summary structures that capture the approximate distribution of data for a given input set and can be queried to retrieve approximate quantile values. However, `TDigest` has some advantages over `QDigest`, including higher performance, lower memory usage, and higher accuracy at high and low percentiles. Both structures are additive, meaning they can be merged together without losing precision. You should choose the appropriate structure based on your performance, memory, and accuracy requirements."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/query/DuneSQL-reference/SQL-language/index.md",
      "url": "https://dune.com/docs/query/DuneSQL-reference/SQL-language/index.md",
      "summary": "# Overview\n\nThe Overview section of the Dune Docs app technical guide provides an introduction to DuneSQL, a custom-built query engine optimized for blockchain data. DuneSQL is built on a fork of TrinoSQL, an ANSI SQL compliant query engine that allows users to integrate their favorite data tools with any underlying data source. \n\nThe section notes that DuneSQL validates and translates SQL statements into the necessary operations on the connected data source. It also provides a reference to the supported SQL data types and other general characteristics of the SQL support of DuneSQL. \n\nThe section includes links to a full SQL statement and syntax reference, as well as a reference to numerous SQL functions and operators provided by Trino. \n\nOverall, the Overview section serves as a high-level introduction to DuneSQL and its capabilities, providing context for the more detailed technical information provided in other sections of the app technical guide. \n\nExample: \n\nIf a user is new to DuneSQL and wants to understand its capabilities and how it differs from TrinoSQL, they can start by reading the Overview section. This will provide them with a basic understanding of DuneSQL's features and how it can be used with other data tools. They can then explore the other sections of the app technical guide for more detailed information on specific aspects of DuneSQL.",
      "questions": "1. What specific optimizations does DuneSQL have for blockchain data? \n- The app technical guide does not provide specific details on the optimizations made for blockchain data.\n\n2. Can DuneSQL connect to a blockchain database directly or does it require a separate data source? \n- The app technical guide does not provide information on whether DuneSQL can connect directly to a blockchain database or if it requires a separate data source.\n\n3. Are there any limitations or differences in the SQL data types supported by DuneSQL compared to TrinoSQL? \n- The app technical guide does not mention any limitations or differences in the SQL data types supported by DuneSQL compared to TrinoSQL."
    },
    {
      "fileName": "reserved.md",
      "filePath": "docs/query/DuneSQL-reference/SQL-language/reserved.md",
      "url": "https://dune.com/docs/query/DuneSQL-reference/SQL-language/reserved.md",
      "summary": "The \"Reserved Keywords\" section of the app technical guide for the Dune Docs project provides a comprehensive list of all the keywords that are reserved in Trino, along with their status in the SQL standard. These reserved keywords must be quoted (using double quotes) in order to be used as an identifier. \n\nThis section is important for developers who are working on the app feature that involves writing SQL queries. It is essential to know which keywords are reserved in Trino and must be quoted to avoid syntax errors. \n\nFor example, if a developer wants to use the keyword \"SELECT\" as a column name in a table, they must quote it as \"SELECT\" to avoid conflicts with the reserved keyword. \n\nThe table in this section lists all the reserved keywords in alphabetical order, along with their status in the SQL standard. The SQL standard status indicates whether the keyword is reserved or non-reserved in the standard. \n\nOverall, this section serves as a quick reference for developers working on the app feature that involves writing SQL queries. It helps them avoid syntax errors and ensures that their queries run smoothly.",
      "questions": "1. What is the purpose of the dune docs app?\n- The app technical guide provided does not give any information about the purpose of the dune docs app, so a blockchain SQL analyst might have this question.\n\n2. How does the dune docs app use SQL?\n- The app technical guide lists all the reserved keywords in Trino SQL, but it does not explain how the dune docs app uses SQL, so a blockchain SQL analyst might have this question.\n\n3. Are there any specific SQL features or functions that the dune docs app requires?\n- The app technical guide does not mention any specific SQL features or functions that the dune docs app requires, so a blockchain SQL analyst might have this question."
    },
    {
      "fileName": "sql-support.md",
      "filePath": "docs/query/DuneSQL-reference/SQL-language/sql-support.md",
      "url": "https://dune.com/docs/query/DuneSQL-reference/SQL-language/sql-support.md",
      "summary": "The SQL statement support section of the app technical guide in the dune docs project provides information on how to use SQL statements in the app. This section is located in the 'api' folder of the project. \n\nThe guide starts by explaining what SQL is and how it is used in the app. It then goes on to provide examples of SQL statements that can be used in the app, such as SELECT, INSERT, UPDATE, and DELETE. Each example is accompanied by a detailed explanation of what the statement does and how it can be used in the app.\n\nThe guide also covers how to use parameters in SQL statements, which allows for more dynamic and flexible queries. It provides examples of how to use parameters in SELECT, INSERT, and UPDATE statements.\n\nIn addition, the guide explains how to handle errors that may occur when using SQL statements in the app. It provides information on how to catch and handle errors using try-catch blocks.\n\nOverall, the SQL statement support section of the app technical guide is a comprehensive resource for developers who need to use SQL statements in the app. It provides clear explanations and examples of how to use SQL statements, as well as tips for handling errors that may occur.",
      "questions": "## Question 1\nWhat specific SQL statements does the app support?\n### Answer\nThe app technical guide does not provide information on the specific SQL statements supported. Further documentation or communication with the developers may be necessary to obtain this information.\n\n## Question 2\nDoes the app support any blockchain-specific SQL statements?\n### Answer\nThe app technical guide does not mention any blockchain-specific SQL statements. It is unclear if the app is designed for use with blockchain technology.\n\n## Question 3\nAre there any limitations or restrictions on the use of SQL statements within the app?\n### Answer\nThe app technical guide does not provide information on any limitations or restrictions on the use of SQL statements. Further documentation or communication with the developers may be necessary to obtain this information."
    }
  ],
  "folders": [],
  "summary": "The `docs/query/DuneSQL-reference/SQL-language` folder contains a comprehensive guide on various aspects of DuneSQL, a custom-built query engine optimized for blockchain data. This guide is essential for developers and analysts working on the app feature that involves writing SQL queries and understanding the data types supported by DuneSQL.\n\nThe `datatypes.md` file provides an in-depth explanation of the various data types used in DuneSQL, such as Boolean, Integer, Floating-point, Fixed-precision, String, Date and time, Structural, Network address, UUID, HyperLogLog, SetDigest, Quantile digest, and T-Digest. This guide is useful for developers who need to understand the properties and functions of each data type when designing database schemas or writing SQL queries.\n\nThe `index.md` file serves as an overview of DuneSQL, its capabilities, and how it differs from TrinoSQL. This high-level introduction is beneficial for users who are new to DuneSQL and want to understand its features and integration with other data tools.\n\nThe `reserved.md` file lists all the reserved keywords in Trino, along with their status in the SQL standard. This section is crucial for developers to avoid syntax errors when writing SQL queries by quoting reserved keywords.\n\nThe `sql-support.md` file offers a detailed guide on using SQL statements in the app, including examples of SELECT, INSERT, UPDATE, and DELETE statements. It also covers the use of parameters in SQL statements for more dynamic and flexible queries and provides tips on handling errors that may occur.\n\nFor example, a developer working on a feature that requires querying blockchain data can refer to the `datatypes.md` file to understand the appropriate data types to use in their queries. They can also consult the `sql-support.md` file for examples of SQL statements and how to use parameters for more dynamic queries. If they encounter a reserved keyword in their query, they can refer to the `reserved.md` file to ensure they quote it correctly to avoid syntax errors.\n\nOverall, the guide in this folder is an essential resource for developers and analysts working on the app feature that involves writing SQL queries and understanding the data types supported by DuneSQL. It provides clear explanations, examples, and tips to ensure smooth and efficient querying of blockchain data.",
  "questions": ""
}