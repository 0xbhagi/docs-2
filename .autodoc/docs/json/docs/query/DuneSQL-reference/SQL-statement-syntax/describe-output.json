{
  "fileName": "describe-output.md",
  "filePath": "docs/query/DuneSQL-reference/SQL-statement-syntax/describe-output.md",
  "url": "https://dune.com/docs/query/DuneSQL-reference/SQL-statement-syntax/describe-output.md",
  "summary": "# Dune Docs App Technical Guide\n\n## Describe Output\n\nThe `DESCRIBE OUTPUT` statement is used to list the output columns of a prepared statement in the Dune Docs app. This includes the column name (or alias), catalog, schema, table, type, type size in bytes, and a boolean indicating if the column is aliased. \n\nThe `DESCRIBE OUTPUT` statement is useful for debugging and understanding the structure of a prepared statement. It can be used to verify that the output columns of a prepared statement match the expected structure.\n\nThe `DESCRIBE OUTPUT` statement takes the following syntax:\n\n``` text\nDESCRIBE OUTPUT statement_name\n```\n\nWhere `statement_name` is the name of the prepared statement to describe.\n\n### Examples\n\nThe following examples demonstrate how to use the `DESCRIBE OUTPUT` statement in the Dune Docs app:\n\n#### Example 1\n\nPrepare and describe a query with four output columns:\n\n``` sql\nPREPARE my_select1 FROM\nSELECT * FROM nation;\n\nDESCRIBE OUTPUT my_select1;\n```\n\nThis will output the following:\n\n``` text\nColumn Name | Catalog | Schema | Table  |  Type   | Type Size | Aliased\n-------------+---------+--------+--------+---------+-----------+---------\nnationkey   | tpch    | sf1    | nation | bigint  |         8 | false\nname        | tpch    | sf1    | nation | varchar |         0 | false\nregionkey   | tpch    | sf1    | nation | bigint  |         8 | false\ncomment     | tpch    | sf1    | nation | varchar |         0 | false\n(4 rows)\n```\n\n#### Example 2\n\nPrepare and describe a query whose output columns are expressions:\n\n``` sql\nPREPARE my_select2 FROM\nSELECT count(*) as my_count, 1+2 FROM nation;\n\nDESCRIBE OUTPUT my_select2;\n```\n\nThis will output the following:\n\n``` text\nColumn Name | Catalog | Schema | Table |  Type  | Type Size | Aliased\n-------------+---------+--------+-------+--------+-----------+---------\nmy_count    |         |        |       | bigint |         8 | true\n_col1       |         |        |       | bigint |         8 | false\n(2 rows)\n```\n\n#### Example 3\n\nPrepare and describe a row count query:\n\n``` sql\nPREPARE my_create FROM\nCREATE TABLE foo AS SELECT * FROM nation;\n\nDESCRIBE OUTPUT my_create;\n```\n\nThis will output the following:\n\n``` text\nColumn Name | Catalog | Schema | Table |  Type  | Type Size | Aliased\n-------------+---------+--------+-------+--------+-----------+---------\nrows        |         |        |       | bigint |         8 | false\n(1 row)\n```\n\n## See also\n\n`prepare`{.interpreted-text role=\"doc\"}\n\nThe `prepare` statement is used to prepare a SQL statement for execution in the Dune Docs app. It is often used in conjunction with the `DESCRIBE OUTPUT` statement to debug and understand the structure of prepared statements.",
  "questions": "1. What is the purpose of the `DESCRIBE OUTPUT` statement in the context of a blockchain SQL analyst's work?\n- A blockchain SQL analyst might want to know how to use the `DESCRIBE OUTPUT` statement to list the output columns of a prepared statement, including the column name (or alias), catalog, schema, table, type, type size in bytes, and a boolean indicating if the column is aliased.\n\n2. How can a blockchain SQL analyst use the `DESCRIBE OUTPUT` statement to prepare and describe a query with expressions as output columns?\n- A blockchain SQL analyst can use the `DESCRIBE OUTPUT` statement to prepare and describe a query with expressions as output columns by specifying the name of the prepared statement that contains the query.\n\n3. What is the relationship between the `DESCRIBE OUTPUT` statement and the `prepare` statement in the context of a blockchain SQL analyst's work?\n- The `DESCRIBE OUTPUT` statement is related to the `prepare` statement in that it is used to describe the output columns of a prepared statement that was created using the `prepare` statement."
}