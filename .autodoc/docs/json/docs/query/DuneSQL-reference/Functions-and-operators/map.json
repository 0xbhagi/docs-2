{
  "fileName": "map.md",
  "filePath": "docs/query/DuneSQL-reference/Functions-and-operators/map.md",
  "url": "https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/map.md",
  "summary": "# Map Functions and Operators\n\nThis technical guide is focused on the `app` folder of the Dune Docs project. It covers the use of map functions and operators in SQL. \n\nThe guide starts by explaining the subscript operator `[]`. This operator is used to retrieve the value corresponding to a given key from a map. An example is given to illustrate this. \n\nThe guide then goes on to explain various map functions that can be used in SQL. These functions include:\n\n- `cardinality()`: This function returns the cardinality (size) of the map `x`. An example is given to illustrate this.\n\n- `element_at()`: This function returns the value for a given `key`, or `NULL` if the key is not contained in the map. An example is given to illustrate this.\n\n- `map()`: This function returns an empty map or a map created using the given key/value arrays. Examples are given to illustrate this.\n\n- `map_from_entries()`: This function returns a map created from the given array of entries. An example is given to illustrate this.\n\n- `multimap_from_entries()`: This function returns a multimap created from the given array of entries. An example is given to illustrate this.\n\n- `map_entries()`: This function returns an array of all entries in the given map. An example is given to illustrate this.\n\n- `map_concat()`: This function returns the union of all the given maps. An example is given to illustrate this.\n\n- `map_filter()`: This function constructs a map from those entries of `map` for which `function` returns true. Examples are given to illustrate this.\n\n- `map_keys()`: This function returns all the keys in the map `x`.\n\n- `map_values()`: This function returns all the values in the map `x`.\n\n- `map_zip_with()`: This function merges the two given maps into a single map by applying `function` to the pair of values with the same key. Examples are given to illustrate this.\n\n- `transform_keys()`: This function returns a map that applies `function` to each entry of `map` and transforms the keys. Examples are given to illustrate this.\n\n- `transform_values()`: This function returns a map that applies `function` to each entry of `map` and transforms the values. Examples are given to illustrate this.\n\nOverall, this technical guide provides a comprehensive overview of map functions and operators in SQL. It explains each function in detail and provides examples to illustrate their use.",
  "questions": "1. What is the purpose of the `map()` function in this app and how is it used?\n   \n   The `map()` function is used to create an empty map or a map with key/value pairs. It can also be used with other functions like `map_filter()` and `map_zip_with()` to filter or merge maps based on certain conditions.\n\n2. How does the `transform_keys()` function work and what is its output format?\n   \n   The `transform_keys()` function applies a transformation function to each key in a map and returns a new map with the transformed keys and the original values. The output format is a map with the same value type as the input map, but with potentially different keys.\n\n3. Can the `map_concat()` function be used to merge maps with different value types?\n   \n   No, the `map_concat()` function can only be used to merge maps with the same key and value types. If the input maps have different value types, the function will return an error."
}