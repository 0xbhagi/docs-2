{
  "fileName": "index.md",
  "filePath": "docs/query/DuneSQL-reference/index.md",
  "url": "https://dune.com/docs/query/DuneSQL-reference/index.md",
  "summary": "# DuneSQL Overview\n\nThe DuneSQL Overview is a technical guide that provides an introduction to DuneSQL, a custom-built query engine optimized for blockchain data. The guide explains that DuneSQL is based on the open-source TrinoSQL engine and incorporates additional optimizations to handle blockchain-specific requirements. \n\n## Functions and Operators\n\nThis section of the guide covers the wide array of functions and operators that DuneSQL provides. These functions and operators enable users to perform various operations on their data, including arithmetic, string manipulation, date and time calculations, and much more. \n\nExample: `SELECT COUNT(*) FROM transactions WHERE block_number > 1000000;`\n\n## SQL Statement Syntax\n\nThe SQL Statement Syntax section explains that DuneSQL follows the standard SQL syntax, which consists of a series of clauses that define how data should be retrieved, manipulated, or stored. Commonly used clauses include SELECT, FROM, WHERE, GROUP BY, ORDER BY, and LIMIT. The guide also notes that administrative statements such as `create`, `update`, `delete`, and `drop` are disabled to ensure that the data in the database is not modified in any way. However, users can query queries in DuneSQL to replace the ability to create views and tables. \n\nExample: `SELECT * FROM transactions WHERE from_address = '0x123456789abcdef';`\n\n## SQL Language\n\nThe SQL Language section explains that the SQL language used in DuneSQL is ANSI-compliant, allowing users to leverage their existing SQL knowledge while working with blockchain data. Additionally, DuneSQL introduces custom data types and functions to better handle unique aspects of blockchain data, such as varbinary data types for addresses and hashes, as well as int256 and uint256 data types for large numeric values. \n\nExample: `SELECT COUNT(*) FROM transactions WHERE to_address = '0x987654321fedcba';`\n\nOverall, the DuneSQL Overview technical guide provides a comprehensive introduction to DuneSQL and its capabilities for efficient analysis of blockchain data.",
  "questions": "1. What optimizations has DuneSQL incorporated to handle blockchain-specific requirements?\n- DuneSQL has incorporated additional optimizations to handle blockchain-specific requirements.\n\n2. Can administrative statements such as create, update, delete, and drop be executed in DuneSQL?\n- No, all administrative statements are disabled in DuneSQL to ensure that the data in the database is not modified in any way.\n\n3. What custom data types and functions has DuneSQL introduced to better handle unique aspects of blockchain data?\n- DuneSQL has introduced custom data types and functions such as varbinary data types for addresses and hashes, as well as int256 and uint256 data types for large numeric values."
}