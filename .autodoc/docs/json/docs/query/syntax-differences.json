{
  "fileName": "syntax-differences.md",
  "filePath": "docs\\query\\syntax-differences.md",
  "url": "https://dune.com/blob/master/query\\syntax-differences.md",
  "summary": "The app technical guide provides a comprehensive guide for migrating queries from Postgres to Dune SQL and from SparkSQL to DuneSQL. The guide covers the syntax and operator differences between Postgres, Spark, and Dune SQL. It provides a table that highlights the differences in syntax between the three databases. The table covers topics such as bytea2numeric, doing math or numeric operations on a column, 0 vs 1 array-based indexing, implicit type conversions between character and numeric types, addresses, selecting keyword columns, alias naming, exponentiation notation, interval argument, generate_series(), handling decimals for prices.usd, define NULL array, encoding strings to hex, get JSON object differences, group by an alias, explicit date/time casting, checking if an item exists in an array, explode, median, using “is True/False,” string data type, casting as strings, left() method, aggregate functions, user-generated views, and event logs topic indexing.\n\nThe guide also provides examples of how to use Dune SQL to migrate queries from Postgres and SparkSQL. It also highlights the differences between the three databases and provides recommendations on how to avoid errors when using Dune SQL. For example, the guide recommends avoiding the use of double quotes in DuneV2, even when the engine runs your query without returning an error. This is because the parser sometimes treats words in double quotes as a string and sometimes it treats them as an object like a column name. \n\nOverall, the app technical guide is a useful resource for developers who want to migrate their queries from Postgres and SparkSQL to Dune SQL. It provides a detailed comparison of the syntax and operator differences between the three databases and provides examples of how to use Dune SQL to migrate queries.",
  "questions": "1. What are the differences in handling decimals for prices.usd in Dune SQL compared to Postgres and Spark SQL?\n- Dune SQL replaces prices.usd decimals with tokens_[blockchain].erc20.decimals.\n2. How does Dune SQL handle implicit type conversions between character and numeric types compared to Postgres and Spark SQL?\n- Dune SQL does not have implicit type conversions between character and numeric types, unlike Postgres and Spark SQL.\n3. What is the recommended approach for using double quotes in DuneV2?\n- Double quotes are not recommended in DuneV2 as the parser sometimes treats them as a string and sometimes as an object like a column name."
}