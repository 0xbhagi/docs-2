{
  "folderName": "query",
  "folderPath": ".autodoc\\docs\\json\\docs\\query",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\query",
  "files": [
    {
      "fileName": "dunesql-changes.md",
      "filePath": "docs\\query\\dunesql-changes.md",
      "url": "https://dune.com/blob/master/query\\dunesql-changes.md",
      "summary": "The DuneSQL migration technical guide provides documentation on the changes made to DuneSQL on March 2nd, 2023. The guide is divided into several sections, each with a specific focus. The first section is a warning that some tables in DuneSQL are still experiencing datatype issues, and the affected tables are listed. The section also provides a temporary workaround for the issue.\n\nThe second section of the guide explains the changes made to DuneSQL. DuneSQL has exited its alpha stage and now uses the same data types as the underlying EVM blockchain. This means that addresses, transaction hashes, and other encoded data are now stored as `varbinary` datatype. The guide also explains that `uint256` and `int256` are now supported, allowing full wei-level precision calculations. Additionally, the guide explains that logs are now stored with the correct topic indexing, and the `from_hex` native function has been modified to transform varchar to varbinary.\n\nThe third section of the guide explains what the changes mean for users. The switch to the `varbinary` datatype should improve query speed, and users can get rid of all string casts and conversions, making queries more readable and easier to maintain. The introduction of `uint256` and `int256` allows for full wei-level precision calculations, and the indexing of logs topics has been corrected to match the rest of the blockchain ecosystem.\n\nThe fourth section of the guide explains what users need to do to adjust to the changes. Users need to remove the `-- dunesql_alpha_deprecated` comment from their queries, adjust all occurrences of `0x` strings to fit the new data types, and remove any `varchar -> double`, `varchar -> decimals`, or `varchar -> bigint` casts. If queries used columns from logs tables, users need to adjust the indexing of topics. The guide provides a table of common errors and fixes.\n\nThe final section of the guide explains what will happen if users do not adjust to the changes. Queries will continue to run against the old data types until March 23, 2023, after which they will no longer run. The guide provides examples of breaking queries and fixed queries. Overall, the DuneSQL migration technical guide provides comprehensive documentation on the changes made to DuneSQL and what users need to do to adjust to the changes.",
      "questions": "1. What are the affected tables and when will they be fixed?\n- The affected tables are `prices.usd`, some Spellbook tables, `flashbots.*`, `reservoir.*`, `snapshot.*`, and `cowswap.*`. The fix for `prices.usd` was on March 6th, 2023, while the fixes for `flashbots.*` and `reservoir.*` will be on March 10th, 2023. The fixes for `snapshot.*` and `cowswap.*` are still to be determined.\n\n2. How will the switch to `varbinary` datatype affect query speed?\n- Switching to the `varbinary` datatype should significantly improve the speed of queries by approximately 30%.\n\n3. What should be done if a query has incompatible functions?\n- A comment `-- dunesql_alpha_deprecated` has been appended to any query that has incompatible functions. This comment allows the query to be run against the old data types until March 23, 2023. It is recommended to remove the comment and convert the query to use compatible functions before the deprecation date."
    },
    {
      "fileName": "DuneSQL.md",
      "filePath": "docs\\query\\DuneSQL.md",
      "url": "https://dune.com/blob/master/query\\DuneSQL.md",
      "summary": "The DuneSQL technical guide provides information on the datatypes, functions, and operators used in DuneSQL. The guide is divided into two main sections: Numerical types and Byte Array Functions. The Numerical types section covers the supported numerical types, including `INTEGER`, `BIGINT`, `DOUBLE`, `DECIMAL`, `UINT256`, and `INT256`. The Byte Array Functions section covers the helper functions used to manipulate byte arrays, including `bytearray_concat`, `bytearray_length`, `bytearray_ltrim`, `bytearray_position`, `bytearray_replace`, `bytearray_reverse`, `bytearray_rtrim`, `bytearray_starts_with`, `bytearray_substring`, and `bytearray_to_numeric`. \n\nThe guide also provides information on how to query queries as views in Dune SQL. All non-parameterized queries written using Dune SQL can be queried as views in other queries using the identifier `query_<queryId>`. The guide provides an example query that queries a saved query using its `queryId`. \n\nThe guide also includes a warning that Dune SQL exited alpha on March 2nd, 2023, and some changes to datatypes and column names were introduced that may cause breaking changes. The guide provides a link to the DuneSQL changes page for more details. \n\nOverall, the DuneSQL technical guide provides a comprehensive overview of the datatypes, functions, and operators used in DuneSQL, as well as information on how to query queries as views. The guide is a valuable resource for developers working with DuneSQL.",
      "questions": "1. What numerical types does DuneSQL support?\n- DuneSQL supports the numerical types `INTEGER`, `BIGINT`, `DOUBLE`, and fixed precision `DECIMAL` with precision up to 38 digits (i.e., `DECIMAL(38, 0)`), as well as `UINT256` for representing unsigned 256 bit integers and `INT256` for signed 256 bit integers.\n\n2. What are the byte array manipulation functions available in DuneSQL?\n- The byte array manipulation functions available in DuneSQL include `bytearray_concat`, `bytearray_length`, `bytearray_ltrim`, `bytearray_position`, `bytearray_replace`, `bytearray_reverse`, `bytearray_rtrim`, `bytearray_starts_with`, `bytearray_substring`, and `bytearray_substring`.\n\n3. Can all queries written using DuneSQL be queried as views in other queries?\n- Yes, all non-parameterized queries written using DuneSQL can be queried as views in other queries using the identifier `query_<queryId>`. However, there are some limitations, such as the requirement that all output columns of the query being queried must be named, and that only saved queries can be queried."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\query\\index.md",
      "url": "https://dune.com/blob/master/query\\index.md",
      "summary": "# Query Overview\n\nThis technical guide covers the querying process for data on Dune using DuneSQL, a custom-built query engine optimized for blockchain data. DuneSQL is a fork of TrinoSQL, an open-source distributed SQL query engine for big data, with added blockchain-specific optimizations. The guide explains how DuneSQL utilizes parquet files as its storage format, which is a columnar storage format optimized for fast reads. \n\nThe guide provides an overview of how to query using DuneSQL, highlighting the differences between DuneSQL and TrinoSQL. DuneSQL supports blockchain varbinary data types, which are used to store addresses, hashes, and other encoded data. Additionally, DuneSQL natively supports unint256 and int256 data types, which are used to store large numbers in blockchain data. The guide provides a set of functions that allow users to easily work with these data types. \n\nThe guide also covers the storage format used by DuneSQL, which is important to understand when writing efficient queries. Data is stored in columns instead of rows, allowing for fast reads of a single column, which is useful for aggregations and filters. \n\nThe guide provides resources for users to get help with SQL questions, including Google, ChatAIs, and the Trino documentation site. The #dune-sql Discord channel is also available for users to get help from the Dune team and Wizard community. Finally, the guide encourages users to send feedback to dunesql-feedback@dune.com to help improve and optimize the platform. \n\nOverall, this technical guide provides a comprehensive overview of querying on Dune using DuneSQL, including the data types and storage format used, as well as resources for users to get help and provide feedback.",
      "questions": "1. What optimizations has DuneSQL added to TrinoSQL specifically for blockchain data?\n   \n   Answer: The app technical guide mentions that DuneSQL has added blockchain specific optimizations to TrinoSQL, but it does not provide specific details on what those optimizations are. A blockchain SQL analyst might want to know more about these optimizations and how they improve query performance for blockchain data.\n\n2. How does DuneSQL handle large numbers in blockchain data?\n   \n   Answer: The app technical guide mentions that DuneSQL natively supports unint256 and int256 data types for storing large numbers in blockchain data, but it does not provide specific details on how these data types are handled. A blockchain SQL analyst might want to know more about how DuneSQL handles these data types and what functions are available for working with them.\n\n3. How does the columnar storage format used by DuneSQL compare to other storage formats commonly used in blockchain data analysis?\n   \n   Answer: The app technical guide mentions that DuneSQL utilizes a columnar storage format that is optimized for fast reads, but it does not provide a comparison to other storage formats commonly used in blockchain data analysis. A blockchain SQL analyst might want to know more about the advantages and disadvantages of using a columnar storage format for blockchain data analysis compared to other storage formats such as row-based or document-based storage."
    },
    {
      "fileName": "storage.md",
      "filePath": "docs\\query\\storage.md",
      "url": "https://dune.com/blob/master/query\\storage.md",
      "summary": "# Storage\n\nThe Storage section of the Dune Docs app technical guide explains the differences and thinking behind the V2 database structure. The guide explains how databases read data from storage into memory to allow that data to be operated on, and how read speed is an essential constraint of databases. The guide then goes on to explain the differences between row-oriented and column-oriented databases, and how Dune V2 runs on column-oriented tables. \n\nThe guide explains that in a row-oriented database, many pages with unneeded data are loaded when querying for one column across thousands or millions of rows. In contrast, column-oriented databases store pages within row groups which partition the data by rows inside the parquet files. Thus, the database is still roughly stored in a row-oriented format, but the individual values are stored in column orientation inside pages. \n\nThe guide also explains that the `min/max` values of strings are oftentimes not very useful, and that the performance cost is mostly relevant for base tables like `ethereum.transactions`, `bnb.logs`, `erc20_ethereum.erc20_evt_transfer`, etc. which contain very large datasets that aren’t pre-filtered. \n\nThe guide provides examples of Dune V2 queries, including querying for transaction hashes and aggregating data over a large amount of logical rows. The guide explains that querying for data across a large amount of logical rows is now much more efficient, and a lot of queries that were formerly impossible due to timing out are now able to be executed. \n\nFinally, the guide explains that Dune will continue to keep innovating on these datasets and their database architecture to make every query run as fast as possible on V2. If users have any feedback or run into trouble with the new system, they can reach out to the #dune-sql Discord channel or send an email to dunesql-feedback@dune.com. \n\nOverall, this guide provides a detailed explanation of the differences between row-oriented and column-oriented databases, and how Dune V2 runs on column-oriented tables. The guide also provides examples of Dune V2 queries and explains how the new system is more efficient than the previous system.",
      "questions": "1. How does the transition to a data lake in Dune V2 and separating storage and compute address the I/O bound challenge in databases?\n    \n    Answer: A blockchain SQL analyst might want to know more about how the transition to a data lake in Dune V2 and separating storage and compute addresses the I/O bound challenge in databases.\n\n2. How does Dune V2's column-oriented database structure differ from traditional row-oriented databases in terms of query speed and efficiency?\n\n    Answer: A blockchain SQL analyst might want to know more about how Dune V2's column-oriented database structure differs from traditional row-oriented databases in terms of query speed and efficiency.\n\n3. How does Dune V2 handle indexing and querying for data stored in strings like `tx_hash` and `address`?\n\n    Answer: A blockchain SQL analyst might want to know more about how Dune V2 handles indexing and querying for data stored in strings like `tx_hash` and `address`."
    },
    {
      "fileName": "syntax-differences.md",
      "filePath": "docs\\query\\syntax-differences.md",
      "url": "https://dune.com/blob/master/query\\syntax-differences.md",
      "summary": "The app technical guide provides a comprehensive guide for migrating queries from Postgres to Dune SQL and from SparkSQL to DuneSQL. The guide covers the syntax and operator differences between Postgres, Spark, and Dune SQL. It provides a table that highlights the differences in syntax between the three databases. The table covers topics such as bytea2numeric, doing math or numeric operations on a column, 0 vs 1 array-based indexing, implicit type conversions between character and numeric types, addresses, selecting keyword columns, alias naming, exponentiation notation, interval argument, generate_series(), handling decimals for prices.usd, define NULL array, encoding strings to hex, get JSON object differences, group by an alias, explicit date/time casting, checking if an item exists in an array, explode, median, using “is True/False,” string data type, casting as strings, left() method, aggregate functions, user-generated views, and event logs topic indexing.\n\nThe guide also provides examples of how to use Dune SQL to migrate queries from Postgres and SparkSQL. It also highlights the differences between the three databases and provides recommendations on how to avoid errors when using Dune SQL. For example, the guide recommends avoiding the use of double quotes in DuneV2, even when the engine runs your query without returning an error. This is because the parser sometimes treats words in double quotes as a string and sometimes it treats them as an object like a column name. \n\nOverall, the app technical guide is a useful resource for developers who want to migrate their queries from Postgres and SparkSQL to Dune SQL. It provides a detailed comparison of the syntax and operator differences between the three databases and provides examples of how to use Dune SQL to migrate queries.",
      "questions": "1. What are the differences in handling decimals for prices.usd in Dune SQL compared to Postgres and Spark SQL?\n- Dune SQL replaces prices.usd decimals with tokens_[blockchain].erc20.decimals.\n2. How does Dune SQL handle implicit type conversions between character and numeric types compared to Postgres and Spark SQL?\n- Dune SQL does not have implicit type conversions between character and numeric types, unlike Postgres and Spark SQL.\n3. What is the recommended approach for using double quotes in DuneV2?\n- Double quotes are not recommended in DuneV2 as the parser sometimes treats them as a string and sometimes as an object like a column name."
    }
  ],
  "folders": [
    {
      "folderName": "querying-with-DuneSQL",
      "folderPath": ".autodoc\\docs\\json\\docs\\query\\querying-with-DuneSQL",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\query\\querying-with-DuneSQL",
      "files": [
        {
          "fileName": "functions-and-operators.md",
          "filePath": "docs\\query\\querying-with-DuneSQL\\functions-and-operators.md",
          "url": "https://dune.com/blob/master/query\\querying-with-DuneSQL\\functions-and-operators.md",
          "summary": "The app technical guide provided describes the built-in SQL functions and operators supported by DuneSQL. These functions and operators allow for the implementation of complex functionality and behavior of the SQL executed by Trino operating on the underlying data sources. \n\nThe guide provides links to a full alphabetical list and a full list by topic of the available functions and operators. Additionally, using SHOW FUNCTIONS returns a list of all available functions, including custom functions, with all supported arguments and a short description. \n\nThe guide also recommends reviewing the SQL data types and the SQL statement and syntax reference. \n\nEach header in the guide corresponds to a specific category of functions and operators, such as Aggregate, Array, Binary, Bitwise, Color, Comparison, Conditional, Conversion, Date and time, Decimal, Geospatial, HyperLogLog, IP Address, JSON, Lambda, Logical, Machine learning, Map, Math, Quantile digest, Regular expression, Session, Set Digest, String, System, Table, Teradata, T-Digest, URL, UUID, and Window. \n\nFor example, the Aggregate header provides a link to the Trino documentation on aggregate functions, which are used to perform a calculation on a set of values and return a single value. The Array header provides a link to the Trino documentation on array functions, which are used to manipulate arrays. \n\nOverall, this guide serves as a reference for developers working with DuneSQL to understand the available SQL functions and operators and how to use them effectively in their code.",
          "questions": "1. What is the purpose of DuneSQL and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of DuneSQL or its relation to blockchain technology.\n\n2. Are there any specific SQL functions or operators that are particularly useful for analyzing blockchain data?\n- The app technical guide provides a list of built-in SQL functions and operators supported by DuneSQL, but does not specify any that are particularly useful for analyzing blockchain data.\n\n3. Does DuneSQL support any specialized data types or functions for working with blockchain-specific data structures, such as Merkle trees or cryptographic hashes?\n- The app technical guide does not provide information on whether DuneSQL supports specialized data types or functions for working with blockchain-specific data structures."
        }
      ],
      "folders": [],
      "summary": "The guide in the `functions-and-operators.md` file covers the built-in SQL functions and operators supported by DuneSQL, which is a part of the larger project feature \"query.\" This guide is essential for developers working with DuneSQL to understand the available SQL functions and operators and how to use them effectively in their code. It provides a comprehensive list of functions and operators, categorized by their specific use cases, such as Aggregate, Array, Binary, Bitwise, Color, Comparison, Conditional, Conversion, Date and time, Decimal, Geospatial, HyperLogLog, IP Address, JSON, Lambda, Logical, Machine learning, Map, Math, Quantile digest, Regular expression, Session, Set Digest, String, System, Table, Teradata, T-Digest, URL, UUID, and Window.\n\nFor example, if a developer is working on a feature that requires manipulating arrays, they can refer to the Array header in the guide, which provides a link to the Trino documentation on array functions. This will help them understand how to use the available functions to manipulate arrays effectively.\n\nSimilarly, if a developer needs to perform calculations on a set of values and return a single value, they can refer to the Aggregate header in the guide. This header provides a link to the Trino documentation on aggregate functions, which will help them understand how to use these functions in their code.\n\nThe guide also provides information on how to use the SHOW FUNCTIONS command to return a list of all available functions, including custom functions, with all supported arguments and a short description. This can be useful for developers who want to explore the available functions and their usage in their code.\n\nIn addition to the categorized list of functions and operators, the guide recommends reviewing the SQL data types and the SQL statement and syntax reference. This will help developers gain a better understanding of the data types they are working with and how to write efficient SQL queries using DuneSQL.\n\nOverall, this guide serves as a valuable reference for developers working with DuneSQL in the larger project feature \"query.\" It helps them understand the available SQL functions and operators, their usage, and how to implement complex functionality and behavior of the SQL executed by Trino operating on the underlying data sources.",
      "questions": ""
    }
  ],
  "summary": "The `functions-and-operators.md` file in the `querying-with-DuneSQL` subfolder provides a comprehensive guide on the built-in SQL functions and operators supported by DuneSQL, which is a part of the larger project feature \"query.\" This guide is essential for developers working with DuneSQL to understand the available SQL functions and operators and how to use them effectively in their code. It provides a categorized list of functions and operators, such as Aggregate, Array, Binary, Bitwise, Color, Comparison, Conditional, Conversion, Date and time, Decimal, Geospatial, HyperLogLog, IP Address, JSON, Lambda, Logical, Machine learning, Map, Math, Quantile digest, Regular expression, Session, Set Digest, String, System, Table, Teradata, T-Digest, URL, UUID, and Window.\n\nFor example, if a developer is working on a feature that requires manipulating arrays, they can refer to the Array header in the guide, which provides a link to the Trino documentation on array functions. This will help them understand how to use the available functions to manipulate arrays effectively.\n\nSimilarly, if a developer needs to perform calculations on a set of values and return a single value, they can refer to the Aggregate header in the guide. This header provides a link to the Trino documentation on aggregate functions, which will help them understand how to use these functions in their code.\n\nThe guide also provides information on how to use the SHOW FUNCTIONS command to return a list of all available functions, including custom functions, with all supported arguments and a short description. This can be useful for developers who want to explore the available functions and their usage in their code.\n\nIn addition to the categorized list of functions and operators, the guide recommends reviewing the SQL data types and the SQL statement and syntax reference. This will help developers gain a better understanding of the data types they are working with and how to write efficient SQL queries using DuneSQL.\n\nOverall, this guide serves as a valuable reference for developers working with DuneSQL in the larger project feature \"query.\" It helps them understand the available SQL functions and operators, their usage, and how to implement complex functionality and behavior of the SQL executed by Trino operating on the underlying data sources.",
  "questions": ""
}