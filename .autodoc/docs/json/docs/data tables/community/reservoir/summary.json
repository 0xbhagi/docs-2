{
  "folderName": "reservoir",
  "folderPath": ".autodoc\\docs\\json\\docs\\data tables\\community\\reservoir",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\data tables\\community\\reservoir",
  "files": [
    {
      "fileName": "ask-events.md",
      "filePath": "docs\\data tables\\community\\reservoir\\ask-events.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\ask-events.md",
      "summary": "# Ask Events\n\nThis section of the app technical guide covers the `reservoir.ask_events` table, which contains records with information about each ask change. The table includes columns such as `id`, `kind`, `contract`, `token_id`, `order_id`, `maker`, `price`, `quantity_remaining`, `valid_from`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`. \n\nThe `id` column is an internal event ID, while the `kind` column specifies the type of event (e.g. new-order, expiry, sale, cancel, balance-change, approval-change, bootstrap, revalidation, reprice). The `contract` column contains the contract address, and the `token_id` column contains the ID of the token in the collection. The `order_id` column is the associated ask ID, and the `maker` column contains the associated ask maker wallet address. The `price` column contains the associated ask price in native currency, and the `quantity_remaining` column contains the associated ask tokens remaining. The `valid_from` and `valid_until` columns contain the associated ask validity start and expiration, respectively. The `source` column specifies the source of the order (e.g. opensea.io), while the `tx_hash` and `tx_timestamp` columns contain the associated transaction hash and timestamp, respectively. Finally, the `created_at` column contains the timestamp the event was recorded.\n\nThis section also includes links to query examples for the `reservoir.ask_events` table, which can be found at [https://dune.com/queries/1302858/2232178](https://dune.com/queries/1302858/2232178) and [https://dune.com/queries/1302863/2232189](https://dune.com/queries/1302863/2232189).\n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.ask_events` table and its various columns, as well as links to query examples for further exploration. It is relevant to the data tables section of the project app.",
      "questions": "1. What is the purpose of the `reservoir.ask_events` table in the context of blockchain and SQL analysis?\n- The `reservoir.ask_events` table contains records with information about each ask change, which could be useful for analyzing the behavior of buyers and sellers in a blockchain marketplace.\n\n2. Are there any limitations or constraints on the data that can be queried from this table?\n- The app technical guide does not provide information on any limitations or constraints on the data that can be queried from this table.\n\n3. Are there any other tables or data sources that are related to the `reservoir.ask_events` table and could be used for more comprehensive analysis?\n- The app technical guide does not provide information on any other related tables or data sources, but a blockchain SQL analyst may want to explore other tables or data sources to gain a more comprehensive understanding of the marketplace behavior."
    },
    {
      "fileName": "asks.md",
      "filePath": "docs\\data tables\\community\\reservoir\\asks.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\asks.md",
      "summary": "# Reservoir.asks Table\n\nThe `reservoir.asks` table is a part of the Dune Docs project and contains records with information about each listing. The table has various columns such as `id`, `kind`, `status`, `contract`, `token_id`, `maker`, `taker`, `price`, `start_price`, `end_price`, `currency_address`, `currency_symbol`, `currency_price`, `dynamic`, `quantity`, `quantity_filled`, `quantity_remaining`, `valid_from`, `valid_until`, `nonce`, `source`, `fee_bps`, `expiration`, `raw_data`, `created_at`, and `updated_at`. Each column has a specific data type and description.\n\nThe purpose of this table is to provide information about each listing, including the listing's status, price, quantity, and other relevant details. The table can be queried using various query examples, which are provided in the documentation. \n\nFor example, to query all active listings, one can use the following SQL query:\n\n```\nSELECT * FROM reservoir.asks WHERE status = 'active';\n```\n\nThis will return all records from the `reservoir.asks` table where the `status` column is set to 'active'.\n\nOverall, the `reservoir.asks` table is an essential part of the Dune Docs project, providing valuable information about each listing. The documentation provides a detailed description of each column in the table, along with query examples to help users retrieve the data they need.",
      "questions": "1. What is the purpose of the `reservoir.asks` table in the Dune Docs app?\n- The `reservoir.asks` table contains records with information about each listing in the app.\n\n2. What type of data is stored in the `price` column of the `reservoir.asks` table?\n- The `price` column in the `reservoir.asks` table stores the current price in native currency.\n\n3. Is there any information in the `reservoir.asks` table about the buyer of a listing?\n- No, there is no information in the `reservoir.asks` table about the buyer of a listing. The table only contains information about the maker and taker wallet addresses."
    },
    {
      "fileName": "attribute-keys.md",
      "filePath": "docs\\data tables\\community\\reservoir\\attribute-keys.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\attribute-keys.md",
      "summary": "# Attribute Keys\n\nThis section of the app technical guide covers the `reservoir.attribute_keys` table, which contains records with information about each attribute key. The table has seven columns, including `id`, `collection_id`, `key`, `kind`, `rank`, `created_at`, and `updated_at`. \n\n- `id`: This column contains the internal attribute key id.\n- `collection_id`: This column contains the associated collection id.\n- `key`: This column contains the name of the attribute.\n- `kind`: This column contains the value type, which can be string, number, date, or range.\n- `rank`: This column contains the sort order.\n- `created_at`: This column contains the timestamp the attribute key was created.\n- `updated_at`: This column contains the timestamp the attribute key was updated.\n\nThe purpose of this section is to provide developers with an understanding of the structure and content of the `reservoir.attribute_keys` table. It also includes a link to query examples that can be used to retrieve data from the table.\n\nFor example, if a developer wants to retrieve all the attribute keys associated with a specific collection, they can use the following query:\n\n```\nSELECT *\nFROM reservoir.attribute_keys\nWHERE collection_id = 'collection_id_value';\n```\n\nOverall, this section of the app technical guide is essential for developers who are working with the `reservoir.attribute_keys` table and need to understand its structure and contents.",
      "questions": "1. What is the purpose of the `reservoir.attribute_keys` table in the context of the Dune Docs project?\n- The `reservoir.attribute_keys` table contains information about each attribute key in the project, including its name, value type, and sort order.\n\n2. How does the `reservoir.attribute_keys` table relate to blockchain technology?\n- It is unclear from the provided information how the `reservoir.attribute_keys` table specifically relates to blockchain technology.\n\n3. Are there any security considerations or best practices that should be followed when working with the `reservoir.attribute_keys` table?\n- It is unclear from the provided information whether there are any security considerations or best practices that should be followed when working with the `reservoir.attribute_keys` table."
    },
    {
      "fileName": "attributes.md",
      "filePath": "docs\\data tables\\community\\reservoir\\attributes.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\attributes.md",
      "summary": "# Dune Docs App Technical Guide: Attributes\n\n## Reservoir Attributes\n\nThis section of the guide covers the `reservoir.attributes` table, which contains records with information about each attribute. The table includes columns such as `id`, `value`, `token_count`, `on_sale_count`, `floor_sell_value`, `sell_updated_at`, `collection_id`, `kind`, `key`, `created_at`, and `updated_at`. \n\nThe `id` column represents the internal attribute ID, while the `attribute_key_id` column represents the internal attribute key ID. The `value` column contains the attribute value, and the `token_count` column represents the amount of tokens that have the attribute. The `on_sale_count` column represents the amount of tokens that have the attribute and are on sale. The `floor_sell_value` column represents the current floor ask price, and the `sell_updated_at` column represents the timestamp the floor sale was last updated. The `collection_id` column represents the associated collection ID, and the `kind` column represents the value type (string, number, date, range). The `key` column represents the associated key name, and the `created_at` and `updated_at` columns represent the timestamps the attribute was created and updated, respectively.\n\nThis section also provides query examples that can be found at `https://dune.com/queries/1302927/2232298` and `https://dune.com/queries/1302966/2232361`.\n\nOverall, this section of the guide is useful for developers working on the Dune Docs app who need to understand the structure and contents of the `reservoir.attributes` table. It provides a clear overview of the table's columns and their meanings, as well as examples of queries that can be used to retrieve data from the table.",
      "questions": "1. What is the purpose of the `reservoir.attributes` table in the context of blockchain? \n- The `reservoir.attributes` table contains information about each attribute, including the associated collection ID and the amount of tokens that have the attribute. \n\n2. How are the `floor_sell_value` and `sell_updated_at` columns relevant to blockchain analysis? \n- The `floor_sell_value` column contains the current floor ask price, which could be useful for analyzing token sales and market trends. The `sell_updated_at` column provides a timestamp for when the floor sale was last updated, which could also be relevant for market analysis. \n\n3. Are there any limitations or considerations to keep in mind when using the query examples provided in the technical guide? \n- The technical guide does not provide any information on limitations or considerations for the query examples, so it may be necessary to test and validate the queries before relying on them for analysis."
    },
    {
      "fileName": "bid-events.md",
      "filePath": "docs\\data tables\\community\\reservoir\\bid-events.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\bid-events.md",
      "summary": "# Bid Events\n\nThis section of the app technical guide covers the `reservoir.bid_events` table, which contains records with information about each bid change. The table includes various columns such as `id`, `kind`, `status`, `contract`, `token_set_id`, `order_id`, `maker`, `price`, `value`, `quantity_remaining`, `valid_from`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`. \n\nThe `id` column represents the internal event ID, while the `kind` column represents the type of event, such as `new-order`, `expiry`, `sale`, `cancel`, `balance-change`, `approval-change`, `bootstrap`, `revalidation`, and `reprice`. The `status` column represents the status of the event, which can be either `active` or `expired`. The `contract` column represents the contract address, while the `token_set_id` column represents the ID of the token set. The `order_id` column represents the associated bid ID, while the `maker` column represents the associated bid maker wallet address. The `price` column represents the associated bid price in native currency, while the `value` column represents the associated bid value in native currency. The `quantity_remaining` column represents the associated bid tokens remaining, while the `valid_from` column represents the associated bid validity start. The `valid_until` column represents the associated bid validity expiration, while the `source` column represents the source of the order, such as `opensea.io`. The `tx_hash` column represents the associated transaction hash, while the `tx_timestamp` column represents the associated transaction timestamp. Finally, the `created_at` column represents the timestamp the event was recorded.\n\nThis section also includes a link to query examples, which are currently TBD. The query examples will likely demonstrate how to retrieve specific information from the `reservoir.bid_events` table, such as bids of a certain type or bids associated with a specific contract or token set. Overall, this section of the app technical guide provides a detailed overview of the `reservoir.bid_events` table and its various columns, which will be useful for developers working on the bidding functionality of the Dune Docs app.",
      "questions": "1. What is the purpose of the dune docs project and how does it relate to blockchain technology?\n- The app technical guide provided does not give any information about the purpose of the dune docs project or its relation to blockchain technology.\n\n2. How is the data in the bid events table being stored and accessed?\n- The app technical guide does not provide information on how the data in the bid events table is being stored and accessed.\n\n3. Are there any security measures in place to protect the bid events data?\n- The app technical guide does not mention any security measures in place to protect the bid events data."
    },
    {
      "fileName": "bids.md",
      "filePath": "docs\\data tables\\community\\reservoir\\bids.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\bids.md",
      "summary": "# Dune Docs App Technical Guide: Bids\n\n## Reservoir.bids\n\nThis section of the guide covers the `reservoir.bids` table, which contains records with information about each bid. The table includes columns such as `id`, `kind`, `status`, `contract`, `maker`, `taker`, `price`, `value`, `currency_address`, `currency_symbol`, `currency_price`, `quantity`, `quantity_filled`, `quantity_remaining`, `valid_from`, `valid_until`, `nonce`, `source`, `fee_bps`, `expiration`, `raw_data`, `created_at`, and `updated_at`. \n\nThe purpose of this section is to provide a detailed description of each column in the `reservoir.bids` table, including the column name, type, and description. For example, the `id` column is a string that represents the internal order id, while the `kind` column is a string that represents the protocol name (e.g. seaport). \n\nAdditionally, this section provides a link to query examples for the `reservoir.bids` table, which can be found at [TBD](TBD). \n\nOverall, this section of the guide is useful for developers who are working with the `reservoir.bids` table and need to understand the purpose and structure of each column. \n\nExample: If a developer needs to retrieve the `maker` and `price` columns from the `reservoir.bids` table, they can use the following SQL query: \n\n```\nSELECT maker, price\nFROM reservoir.bids;\n```",
      "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain technology?\n- The app technical guide only provides information about a specific table called \"reservoir.bids\" and does not give an overview of the entire app. Therefore, a blockchain SQL analyst might have questions about the overall purpose of the app and how it utilizes blockchain technology.\n\n2. How is the data in the \"reservoir.bids\" table being collected and stored?\n- The app technical guide does not provide information on how the data is being collected and stored, which might be important for a blockchain SQL analyst to understand in order to properly analyze the data.\n\n3. Are there any security measures in place to protect the data in the \"reservoir.bids\" table?\n- The app technical guide does not mention any security measures, such as encryption or access controls, which might be a concern for a blockchain SQL analyst working with sensitive data."
    },
    {
      "fileName": "collection-floor-ask-events.md",
      "filePath": "docs\\data tables\\community\\reservoir\\collection-floor-ask-events.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\collection-floor-ask-events.md",
      "summary": "# Collection Floor Ask Events\n\nThis section of the app technical guide covers the `reservoir.collection_floor_ask_events` table, which contains records with information about each collection floor ask change. The table has several columns, including `id`, `kind`, `collection_id`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`. \n\nThe `kind` column specifies the type of event, which can be `new-order`, `expiry`, `sale`, `cancel`, `balance-change`, `approval-change`, `bootstrap`, `revalidation`, or `reprice`. The `collection_id` column contains the ID of the collection, while the `contract` column contains the address of the contract. The `token_id` column contains the ID of the token in the collection, and the `order_id` column contains the ID of the associated ask. The `maker` column contains the wallet address of the associated ask maker, and the `price` column contains the associated ask price in native currency. The `previous_price` column contains the previous floor ask price in native currency, and the `valid_until` column contains the expiration time of the associated ask. The `source` column specifies the source of the order, such as `opensea.io`. The `tx_hash` column contains the associated transaction hash, and the `tx_timestamp` column contains the associated transaction timestamp. The `created_at` column contains the timestamp when the event was recorded.\n\nThe guide also provides two query examples that can be used to retrieve information from the `reservoir.collection_floor_ask_events` table. The first query example can be found at [https://dune.com/queries/1302799/2232083](https://dune.com/queries/1302799/2232083), while the second query example can be found at [https://dune.com/queries/1302841/2232151](https://dune.com/queries/1302841/2232151).\n\nOverall, this section of the app technical guide provides a detailed explanation of the `reservoir.collection_floor_ask_events` table and its columns, as well as query examples that can be used to retrieve information from the table.",
      "questions": "1. What is the purpose of the `reservoir.collection_floor_ask_events` table in the context of blockchain and SQL analysis?\n- A blockchain SQL analyst might want to know how this table fits into the overall data schema and what insights it can provide about collection floor ask changes in a blockchain ecosystem.\n\n2. Are there any limitations or constraints to consider when querying this table?\n- A blockchain SQL analyst might want to know if there are any specific query requirements or limitations, such as query speed or data volume, that could impact their analysis.\n\n3. How frequently is this table updated and what is the data retention policy?\n- A blockchain SQL analyst might want to know how frequently new records are added to this table and how long the data is retained, in order to understand the freshness and reliability of the data for their analysis."
    },
    {
      "fileName": "collection-top-bid-events.md",
      "filePath": "docs\\data tables\\community\\reservoir\\collection-top-bid-events.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\collection-top-bid-events.md",
      "summary": "# Collection Top Bid Events\n\nThis section of the app technical guide covers the `reservoir.collection_top_bid_events` table. This table contains records with information about each collection top bid change. The table has several columns, including `id`, `kind`, `collection_id`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`. \n\nThe `id` column contains the internal event ID, while the `kind` column specifies the type of event, such as `new-order`, `expiry`, `sale`, `cancel`, `balance-change`, `approval-change`, `bootstrap`, `revalidation`, or `reprice`. The `collection_id` column contains the ID of the collection, and the `contract` column contains the contract address. The `token_id` column contains the ID of the token in the collection, and the `order_id` column contains the associated bid ID. The `maker` column contains the associated bid maker wallet address, and the `price` column contains the associated bid price in native currency. The `previous_price` column contains the previous top bid price in native currency, and the `valid_until` column contains the associated bid validity expiration. The `source` column contains the source of the order, such as `opensea.io`. The `tx_hash` column contains the associated transaction hash, and the `tx_timestamp` column contains the associated transaction timestamp. Finally, the `created_at` column contains the timestamp the event was recorded.\n\nThis section also provides a link to query examples, which are currently TBD. \n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.collection_top_bid_events` table and its various columns. It is useful for developers who need to work with this table and understand the information it contains.",
      "questions": "1. What is the purpose of the \"reservoir.collection_top_bid_events\" table in the context of blockchain and SQL? \n- The table contains records with information about each collection top bid change, which could be useful for analyzing bidding behavior and trends within a collection.\n\n2. Are there any limitations or constraints on the data types used in the table columns? \n- The table lists the data types for each column, but it does not specify any limitations or constraints on those data types. A blockchain SQL analyst may need to investigate further to determine if there are any restrictions on the data that can be stored in the table.\n\n3. Is there any additional documentation or context available for the \"kind\" column, which lists different event types? \n- The table provides a list of possible values for the \"kind\" column, but it does not explain what each of those event types represents. A blockchain SQL analyst may need to consult other documentation or resources to gain a better understanding of the different event types and their significance."
    },
    {
      "fileName": "collections.md",
      "filePath": "docs\\data tables\\community\\reservoir\\collections.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\collections.md",
      "summary": "# Collections\n\nThis section of the app technical guide covers the `reservoir.collections` table, which contains records with information about each NFT collection. The table includes columns such as `id`, `slug`, `name`, `description`, `token_count`, `contract`, `day1_rank`, `day7_rank`, `day30_rank`, `all_time_rank`, `day1_volume`, `day7_volume`, `day30_volume`, `all_time_volume`, `day1_volume_change`, `day7_volume_change`, `day30_volume_change`, `floor_ask_value`, `day1_floor_sale_value`, `day7_floor_sale_value`, `day30_floor_sale_value`, `day1_floor_sale_change`, `day7_floor_sale_change`, `day30_floor_sale_change`, `created_at`, and `updated_at`. \n\nThe purpose of this guide is to provide developers with an understanding of the structure and contents of the `reservoir.collections` table, as well as examples of queries that can be used to retrieve data from the table. The guide includes a detailed description of each column in the table, including the data type and a brief explanation of its purpose. \n\nThe query examples provided in the guide demonstrate how to retrieve specific data from the `reservoir.collections` table using Dune's query language. For example, the first query example retrieves the `id`, `name`, `description`, and `contract` columns for all records in the table. The second query example retrieves the `id`, `name`, `day1_rank`, `day7_rank`, and `day30_rank` columns for all records in the table. \n\nOverall, this section of the app technical guide is essential for developers who need to work with NFT collections in the Dune app. It provides a clear understanding of the structure and contents of the `reservoir.collections` table, as well as examples of queries that can be used to retrieve data from the table.",
      "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain technology?\n   \n   Answer: The app technical guide for dune docs does not provide information on the purpose of the app or its relation to blockchain technology. Further documentation or context would be needed to answer this question.\n\n2. What is the significance of the \"contract\" column in the \"reservoir.collections\" table?\n   \n   Answer: The \"contract\" column in the \"reservoir.collections\" table contains the contract address for each NFT collection. This information could be useful for a blockchain SQL analyst who is interested in tracking NFT collections on a specific blockchain network.\n\n3. How are the \"day1_rank\", \"day7_rank\", \"day30_rank\", and \"all_time_rank\" columns calculated in the \"reservoir.collections\" table?\n   \n   Answer: The app technical guide for dune docs does not provide information on how the \"day1_rank\", \"day7_rank\", \"day30_rank\", and \"all_time_rank\" columns are calculated in the \"reservoir.collections\" table. Further documentation or context would be needed to answer this question."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\data tables\\community\\reservoir\\index.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\index.md",
      "summary": "The Reservoir section of the app technical guide covers the Reservoir feature of the Dune Docs project. Reservoir is an open-source, on-chain NFT order aggregation tool that enables the next generation of NFT products and liquidity sources. The guide provides links to the Reservoir dashboard, documentation, and Discord channel for further information and support.\n\nThe Reservoir section of the app technical guide is divided into three subsections: Dashboard, Docs, and Discord. The Dashboard subsection provides a link to the Reservoir dashboard, which is a web-based interface for managing and monitoring Reservoir orders. The Docs subsection provides a link to the Reservoir documentation, which contains detailed information on how to use Reservoir, including installation instructions, API documentation, and examples. The Discord subsection provides a link to the Reservoir Discord channel, which is a community forum for discussing Reservoir and getting help from other users.\n\nOverall, the Reservoir section of the app technical guide is a useful resource for anyone looking to use Reservoir in their NFT project. The guide provides links to all the necessary resources for getting started with Reservoir, including the dashboard, documentation, and community forum. By following the instructions in the guide and using the resources provided, users can easily integrate Reservoir into their NFT project and take advantage of its powerful features.",
      "questions": "1. What is the purpose of Reservoir in the context of blockchain technology?\n- Reservoir is enabling the next generation of NFT products and liquidity sources through open-source, on-chain NFT order aggregation.\n\n2. What are the available resources for developers to learn about Reservoir?\n- Developers can access the Reservoir dashboard, documentation, and Discord channel for learning about the app.\n\n3. Is Reservoir built on a blockchain or using SQL technology?\n- The app technical guide does not provide information on whether Reservoir is built on a blockchain or using SQL technology."
    },
    {
      "fileName": "sales.md",
      "filePath": "docs\\data tables\\community\\reservoir\\sales.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\sales.md",
      "summary": "# Sales\n\nThis section of the app technical guide covers the `reservoir.sales` table, which contains records with information about each sale. The table includes various columns such as `id`, `contract`, `token_id`, `order_id`, `order_kind`, `order_side`, `order_source`, `from`, `to`, `price`, `usd_price`, `currency_address`, `currency_symbol`, `currency_price`, `amount`, `fill_source`, `aggregator_source`, `wash_trading_score`, `is_primary`, `tx_hash`, `tx_log_index`, `tx_batch_index`, `tx_timestamp`, `created_at`, and `updated_at`. Each column is described in detail, including its data type and a brief description of its purpose.\n\nThe guide also provides two query examples that can be used to retrieve data from the `reservoir.sales` table. These queries can be accessed via the links provided in the guide.\n\nOverall, this section of the app technical guide is useful for developers who need to work with sales data in the Dune Docs project. It provides a clear understanding of the structure and contents of the `reservoir.sales` table, as well as examples of how to query the data.",
      "questions": "1. What is the purpose of the `reservoir.sales` table in the context of blockchain technology? \n- The `reservoir.sales` table contains records with information about each sale, likely related to transactions on a blockchain.\n\n2. How is the `usd_price` column calculated and what currency is it based on? \n- The `usd_price` column represents the sale price in USD, but it is unclear how this value is calculated or what currency exchange rate is used.\n\n3. What is the significance of the `is_primary` column and how does it relate to blockchain technology? \n- The `is_primary` column indicates whether the sale is a paid mint, but it is unclear how this relates to blockchain technology or what a paid mint refers to in this context."
    },
    {
      "fileName": "token-attributes.md",
      "filePath": "docs\\data tables\\community\\reservoir\\token-attributes.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\token-attributes.md",
      "summary": "# Token Attributes\n\nThis section of the app technical guide covers the `reservoir.token_attributes` table, which contains records with information about each NFT token attribute. The table has several columns, including `id`, `contract`, `token_id`, `attribute_id`, `collection_id`, `key`, `value`, `created_at`, and `updated_at`. \n\nThe `id` column is an internal token attribute ID, while the `contract` column contains the contract address. The `token_id` column contains the ID of the token in the collection, and the `attribute_id` column is an internal attribute ID. The `collection_id` column contains the internal collection ID, while the `key` column contains the attribute name. The `value` column contains the attribute value, and the `created_at` and `updated_at` columns contain timestamps for when the token attribute was created and updated, respectively.\n\nThe guide provides a query example for this table, which can be found at [https://dune.com/queries/1302940/2232326](https://dune.com/queries/1302940/2232326). This query can be used to retrieve information from the `reservoir.token_attributes` table.\n\nOverall, this section of the app technical guide provides information about the `reservoir.token_attributes` table and its columns. It is useful for developers who are working on the app's NFT token attributes functionality.",
      "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the dune docs app or its relation to blockchain technology.\n\n2. Can this app be used to query token attributes on any blockchain platform or is it specific to a certain blockchain?\n- The app technical guide does not provide information on whether this app can be used to query token attributes on any blockchain platform or if it is specific to a certain blockchain.\n\n3. Are there any limitations or restrictions on the types of token attributes that can be queried using this app?\n- The app technical guide does not provide information on any limitations or restrictions on the types of token attributes that can be queried using this app."
    },
    {
      "fileName": "token-floor-ask-events.md",
      "filePath": "docs\\data tables\\community\\reservoir\\token-floor-ask-events.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\token-floor-ask-events.md",
      "summary": "# Token Floor Ask Events\n\nThis section of the app technical guide covers the `reservoir.token_floor_ask_events` table, which contains records with information about each NFT token floor ask change. The table includes columns such as `id`, `kind`, `contract`, `token_id`, `order_id`, `maker`, `price`, `previous_price`, `nonce`, `valid_from`, `valid_until`, `source`, `tx_hash`, `tx_timestamp`, and `created_at`.\n\nThe `id` column represents the internal token attribute id, while the `kind` column represents the event type, such as `new-order`, `expiry`, `sale`, `cancel`, `balance-change`, `approval-change`, `bootstrap`, `revalidation`, or `reprice`. The `contract` column contains the contract address, and the `token_id` column contains the id of the token in the collection. The `order_id` column represents the associated Ask id, and the `maker` column represents the associated Ask maker wallet address. The `price` column contains the associated ask price in native currency, while the `previous_price` column contains the previous ask price in native currency. The `nonce` column represents the order nonce of the maker, and the `valid_from` and `valid_until` columns represent the associated ask validity start and expiration, respectively. The `source` column contains the source of the order, such as `opensea.io`, while the `tx_hash` column contains the associated transaction hash, and the `tx_timestamp` column contains the associated transaction timestamp. Finally, the `created_at` column represents the timestamp the event was recorded.\n\nThis section also includes two query examples that can be found at the specified URLs. These queries can be used to retrieve information from the `reservoir.token_floor_ask_events` table.\n\nOverall, this section of the app technical guide provides a detailed explanation of the `reservoir.token_floor_ask_events` table and its columns, as well as query examples that can be used to retrieve information from the table.",
      "questions": "1. What is the purpose of this table in the context of a blockchain application?\n- This table contains records of NFT token floor ask changes, which could be useful for analyzing market trends and pricing behavior.\n\n2. Are there any limitations or constraints on the data stored in this table?\n- The technical guide does not mention any specific limitations or constraints on the data stored in this table, but it may be important to check the underlying database schema for any such restrictions.\n\n3. How frequently is this table updated and what triggers those updates?\n- The technical guide does not provide information on the frequency or triggers for updates to this table, which could be important for understanding the timeliness and accuracy of the data."
    },
    {
      "fileName": "tokens.md",
      "filePath": "docs\\data tables\\community\\reservoir\\tokens.md",
      "url": "https://dune.com/blob/master/data tables\\community\\reservoir\\tokens.md",
      "summary": "# Tokens\n\nThis section of the app technical guide covers the `reservoir.tokens` table, which contains records with information about each NFT token. The table includes columns such as `id`, `contract`, `token_id`, `name`, `description`, `collection_id`, `owner`, `floor_ask_id`, `floor_ask_value`, `floor_ask_maker`, `floor_ask_valid_from`, `floor_ask_valid_to`, `floor_ask_source`, `last_sale_value`, `last_sale_timestamp`, `created_at`, and `updated_at`. \n\nThe `id` column represents the internal token id, while the `contract` column contains the contract address. The `token_id` column represents the id of the token in the collection, and the `name` and `description` columns contain the name and description of the NFT. The `collection_id` column represents the associated collection id, and the `owner` column contains the wallet address of the owner. \n\nThe `floor_ask_id`, `floor_ask_value`, `floor_ask_maker`, `floor_ask_valid_from`, `floor_ask_valid_to`, and `floor_ask_source` columns represent information about the floor ask, such as the id, value, maker wallet address, listing start and end times, and source. The `last_sale_value` and `last_sale_timestamp` columns represent the associated transaction timestamp. Finally, the `created_at` and `updated_at` columns contain timestamps for when the token was created and updated, respectively.\n\nThe guide also provides query examples for the `reservoir.tokens` table, which can be found at the links provided. These examples can be used to retrieve specific information from the table, such as the floor ask value for a particular token.\n\nOverall, this section of the app technical guide provides a detailed overview of the `reservoir.tokens` table and its columns, as well as query examples for retrieving information from the table.",
      "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the dune docs app or its relation to blockchain technology.\n\n2. Can the reservoir.tokens table be used to track the ownership and transaction history of NFTs on a blockchain?\n- Yes, the reservoir.tokens table contains information about each NFT token, including the owner wallet address and associated transaction timestamps.\n\n3. Are there any limitations or restrictions on the types of NFTs that can be tracked using the reservoir.tokens table?\n- The app technical guide does not provide information on any limitations or restrictions on the types of NFTs that can be tracked using the reservoir.tokens table."
    }
  ],
  "folders": [],
  "summary": "The Reservoir section of the app technical guide focuses on the data tables related to the Reservoir feature of the Dune Docs project. Reservoir is an open-source, on-chain NFT order aggregation tool that enables the next generation of NFT products and liquidity sources. The guide provides detailed explanations of various tables, their columns, and their purposes, as well as query examples for retrieving specific information from these tables.\n\nFor instance, the `reservoir.sales` table contains records with information about each sale, including columns such as `id`, `contract`, `token_id`, `order_id`, and more. The guide provides a clear understanding of the structure and contents of this table, as well as examples of how to query the data. This information is useful for developers who need to work with sales data in the Dune Docs project.\n\nAnother example is the `reservoir.tokens` table, which contains records with information about each NFT token. The guide provides a detailed overview of the table and its columns, such as `id`, `contract`, `token_id`, `name`, `description`, and more. The guide also provides query examples for retrieving information from the table, such as the floor ask value for a particular token.\n\nThe Reservoir section of the app technical guide is essential for developers who need to work with NFT collections, sales, and attributes in the Dune app. It provides a clear understanding of the structure and contents of the various data tables related to the Reservoir feature, as well as examples of queries that can be used to retrieve data from these tables. By following the instructions in the guide and using the resources provided, developers can easily integrate Reservoir into their NFT project and take advantage of its powerful features.\n\nOverall, the Reservoir section of the app technical guide is a valuable resource for anyone looking to use Reservoir in their NFT project. The guide provides links to all the necessary resources for getting started with Reservoir, including the dashboard, documentation, and community forum. By following the instructions in the guide and using the resources provided, users can easily integrate Reservoir into their NFT project and take advantage of its powerful features.",
  "questions": ""
}