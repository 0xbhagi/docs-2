{
  "folderName": "Adding A Spell",
  "folderPath": ".autodoc\\docs\\json\\docs\\data tables\\spellbook\\contributing\\Adding A Spell",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\data tables\\spellbook\\contributing\\Adding A Spell",
  "files": [
    {
      "fileName": "1-do-some-prerequisites and-set-up-Spellbook-dbt.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\Adding A Spell\\1-do-some-prerequisites and-set-up-Spellbook-dbt.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\Adding A Spell\\1-do-some-prerequisites and-set-up-Spellbook-dbt.md",
      "summary": "This app technical guide provides a step-by-step guide on how to set up Spellbook dbt on a local computer. The guide is divided into two main sections: prerequisites and setting up Spellbook dbt. The prerequisites section outlines the software and tools required to set up Spellbook dbt, including VSCode, Python 3.9, pip, pipenv, and git and GitHub. The section also provides links to resources for installing these tools and troubleshooting any issues that may arise.\n\nThe second section of the guide focuses on setting up Spellbook dbt. It provides instructions on how to clone the Spellbook repository, install the necessary packages, and initialize dbt. The guide also includes a sample configuration file with prompts that users can enter to configure dbt. The section concludes with instructions on how to create a new branch and push it to a remote GitHub repository.\n\nThe guide includes screenshots and a video tutorial to help users visualize the steps involved in setting up Spellbook dbt. The guide is intended for users who are new to Spellbook dbt and provides a comprehensive overview of the steps involved in setting up the tool. Overall, the guide is well-organized and easy to follow, making it an excellent resource for users who are new to Spellbook dbt.",
      "questions": "1. What is the purpose of Spellbook and how does it relate to blockchain technology?\n   - The app technical guide does not provide information on the purpose of Spellbook or its relation to blockchain technology.\n2. Are there any specific database management systems that Spellbook dbt is compatible with?\n   - The app technical guide mentions that during the setup process, users will be prompted to choose a database management system, with Databricks being one of the options.\n3. Are there any security considerations that need to be taken into account when setting up Spellbook?\n   - The app technical guide does not provide information on any security considerations that need to be taken into account when setting up Spellbook."
    },
    {
      "fileName": "2-decide-on-a-Spell-to-cast.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\Adding A Spell\\2-decide-on-a-Spell-to-cast.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\Adding A Spell\\2-decide-on-a-Spell-to-cast.md",
      "summary": "This app technical guide covers the process of deciding on a Spell to cast in the Dune app. The guide provides three ways to decide on a Spell, including having an idea of what abstract data is needed, looking at Spellbook bounties in Dework, or asking for suggestions in the #spellbook Discord channel. The guide then provides an example of creating a migration Spell for translating the Keep3r network view_job_log abstraction from Dune's v1 database into a V2 Spell.\n\nThe guide also includes a note that Dune V1 Abstractions have been moved to a new repository, which needs to be cloned to access the code for migrating a V1 Abstraction to a Spell. The guide provides the full path to the view_job_log.sql file, which is needed to set up the file structure for the Spell's SQL schema and source files.\n\nOverall, this guide provides a step-by-step process for deciding on a Spell to cast and creating a migration Spell in the Dune app. It also includes helpful links and examples to guide users through the process.",
      "questions": "1. What is the purpose of the Dune Docs app and how does it relate to blockchain technology? \n   - The app technical guide does not provide information on the purpose of the Dune Docs app or its relation to blockchain technology.\n2. How does the migration Spell mentioned in the guide interact with blockchain data? \n   - The app technical guide does not provide information on how the migration Spell interacts with blockchain data.\n3. Are there any security considerations or best practices that should be followed when creating Spells in Dune? \n   - The app technical guide does not provide information on security considerations or best practices for creating Spells in Dune."
    },
    {
      "fileName": "3-set-up-your-file-structure-for-SQL-schema-and-source-files.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\Adding A Spell\\3-set-up-your-file-structure-for-SQL-schema-and-source-files.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\Adding A Spell\\3-set-up-your-file-structure-for-SQL-schema-and-source-files.md",
      "summary": "This technical guide provides instructions on how to set up the file structure for SQL, schema, and source files in the Dune Docs project. The guide explains that all Spells are stored in the `/spellbook/models` directory by project name and blockchain network. The folder names are all lowercase, and words are separated by underscores. The guide provides an example of the folder structure for the Keep3r network, where the folder is `/spellbook/models/keep3r_network/ethereum`. \n\nThe guide explains that if the project folder exists but a Spell is being created for a new blockchain, a folder for the new blockchain should be created. The guide then explains that three files need to be created: a `.sql` file for the Spell's logic, a `_schema.yml` file to define the Spell's purpose and add generic tests, descriptions, metadata, etc., and a `_sources.yml` file with any project-specific table dependencies. The guide provides an example of the file structure for a Spell folder. \n\nThe guide also explains the naming convention for Spell files. Schema files are named `[project_name]_[blockchain]_schema.yml`, sources files are named `[project_name]_[blockchain]_sources.yml`, and SQL files for Spells are named `[project_name]_[blockchain]_[spell_name].sql`. \n\nThe guide then provides an example of a specific v1 migration example where three additional `.sql` files are needed for a Spell called `keep3r_network_ethereum_view_job_log.sql`. The guide explains that these files are needed because the original `view_job_log.sql` V1 Abstraction has two `FROM` statements that reference two other files that are also abstractions that need to be converted into Spells. The guide also explains that a recursive check needs to be done to see if those abstractions depend on any other abstractions that have yet to be migrated to Spells. \n\nOverall, this technical guide provides a clear and detailed explanation of how to set up the file structure for Spells in the Dune Docs project. It provides examples and naming conventions for the different types of files needed for Spells and explains how to handle dependencies between Spells.",
      "questions": "1. What is the purpose of the app and how does it relate to blockchain technology?\n   Answer: The app technical guide is focused on setting up a file structure for SQL, schema, and source files for a project that involves blockchain networks. A blockchain SQL analyst might want to know more about the specific use case of the project and how it utilizes blockchain technology.\n\n2. What are the naming conventions for the files and folders in the app?\n   Answer: The app technical guide provides specific naming conventions for the files and folders used in the project. A blockchain SQL analyst might want to know more about these conventions to ensure consistency and organization in their work.\n\n3. How does the app handle dependencies between different files and abstractions?\n   Answer: The app technical guide explains how to identify and handle dependencies between different files and abstractions in the project. A blockchain SQL analyst might want to know more about this process to ensure that all necessary files and abstractions are properly migrated to Spells."
    },
    {
      "fileName": "4-identify-and-define-sources.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\Adding A Spell\\4-identify-and-define-sources.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\Adding A Spell\\4-identify-and-define-sources.md",
      "summary": "This app technical guide covers the process of identifying and defining sources in the Dune Docs project. The guide provides instructions on how to complete the `_sources.yml` file, which is used to specify the sources of data for the project. The file is formatted using YAML syntax, and it contains information about the version of the engine used, the name and description of the source, and the tables associated with the source.\n\nThe guide explains how to identify the sources that need to be named by searching for `FROM` statements in the V1 abstractions that are being migrated. The tables mentioned in these statements that are not abstractions are the ones that need to be included in the `_sources.yml` file. The guide provides an example of how to create a `keep3r_network_ethereum_sources.yml` file, which includes a description of the Keep3r Network, a marketplace for posting and accepting jobs to help run decentralized infrastructure. The file lists the tables associated with the source, such as `Keep3r_evt_LiquidityAddition` and `Keep3r_evt_KeeperWork`.\n\nOverall, this guide is essential for developers working on the Dune Docs project, as it provides clear instructions on how to identify and define sources of data. By following the steps outlined in the guide, developers can ensure that the project is properly structured and that the data is accurately represented.",
      "questions": "1. What is the purpose of the `_sources.yml` file in the Dune Docs project?\n    \n    The `_sources.yml` file in the Dune Docs project is used to identify and define sources for the project's data.\n\n2. How are the sources formatted in the `_sources.yml` file?\n    \n    The sources in the `_sources.yml` file are formatted with a name, a one-line description, and a list of tables.\n\n3. How can a blockchain SQL analyst determine which sources to name in the `_sources.yml` file?\n    \n    A blockchain SQL analyst can determine which sources to name in the `_sources.yml` file by searching for `FROM` statements in the V1 abstractions being migrated and looking for all tables mentioned that are not abstractions."
    },
    {
      "fileName": "6-write-your-spell-as-SELECT-statement.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\Adding A Spell\\6-write-your-spell-as-SELECT-statement.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\Adding A Spell\\6-write-your-spell-as-SELECT-statement.md",
      "summary": "This technical guide is focused on the app feature of the Dune Docs project. The guide provides a step-by-step process for writing a Spell as a SELECT statement. The guide starts by explaining that the endpoint is `_view_job_log.sql`, but the lowest-level dependency is `_view_job_migrations.sql`. The guide then explains that the process of migrating from V1 abstraction to V2 Spell starts by copying the contents of the V1 file to the `keep3r_network_ethereum_view_job_migrations.sql` file. The guide then explains how to modify the syntax from V1 abstraction style to V2 Spell style. \n\nThe guide also explains how to replace hard-coded references with JINJA templating. The guide clarifies that sources are data that have been added by the Dune team, while models are the `SELECT` statements defined in the `.sql` files stored inside the `spellbook/models` directory. The guide provides examples of how to format references to sources and models using JINJA templating. \n\nThe guide emphasizes the importance of testing each SQL file individually and fixing any errors before adding JINJA templating. The guide also provides tips on how to fix errors, including googling the error message or asking for help in the community Discord channel. \n\nOverall, this technical guide provides a detailed explanation of how to write a Spell as a SELECT statement and how to replace hard-coded references with JINJA templating. The guide is well-organized and easy to follow, making it a useful resource for developers working on the Dune Docs app.",
      "questions": "1. What is the purpose of the dune docs app?\n- The app technical guide does not provide information on the purpose of the dune docs app.\n\n2. What programming languages or technologies are used in this app?\n- The app technical guide mentions the use of SQL, PostgreSQL, Spark SQL, and JINJA templating.\n\n3. What is the process for migrating from V1 abstraction to V2 Spell style?\n- The app technical guide provides a detailed process for migrating from V1 abstraction to V2 Spell style, which involves modifying the syntax to Spark SQL, replacing hard-coded references with JINJA templating, and testing the SQL code in dune.com."
    },
    {
      "fileName": "7-configure-alias-and-materialization-strategy.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\Adding A Spell\\7-configure-alias-and-materialization-strategy.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\Adding A Spell\\7-configure-alias-and-materialization-strategy.md",
      "summary": "This technical guide covers the configuration of aliases and materialization strategies in the dune docs project. The guide explains how to configure aliases for Spells, which are SQL files that contain logic for data transformation, and how to specify the materialization strategy for each Spell. The guide also provides an overview of the four materialization strategies available in dbt, which are table, ephemeral, view, and incremental. \n\nThe `view` materialization strategy is the default in Spellbook, and it is used to store SQL logic without additional data. The `incremental` materialization strategy, on the other hand, allows dbt to insert or update records in a table according to the defined logic. The guide provides an example of how to create an incremental Spell by specifying the partition column, materialization type, and incremental strategy. \n\nTo configure aliases and materialization, the guide explains how to add configuration to the top of each SQL file. The configuration includes an alias for the Spell file that appears in the dune.com UI, as well as how the file is stored and categorized in the UI. The guide provides an example of how to configure aliases for a `view` materialization strategy. \n\nFinally, the guide explains how to add new models to the `dbt_project.yml` file in the Spellbook root folder. The models section specifies the project name, schema, and materialization strategy for the project as a whole, as well as the specific blockchain(s) that the Spells are created for. \n\nOverall, this guide provides a comprehensive overview of how to configure aliases and materialization strategies in the dune docs project. It is a useful resource for developers who are working on the app, API, data tables, or query features of the project.",
      "questions": "1. What are the available materialization strategies in dbt and which ones does Spellbook use?\n   \n   Answer: There are 4 materialization strategies in dbt: `table`, `ephemeral`, `view`, and `incremental`. Spellbook uses `view` and `incremental`.\n   \n2. How can an `incremental` Spell be created and what are the benefits of using it?\n\n   Answer: An `incremental` Spell can be created by including specific configuration statements in the Config section of the SQL file. The benefits of using it are faster run times, though the data won't be as fresh as `view` Spells.\n   \n3. How can aliases and materialization be configured for a Spell and where should this configuration be added?\n\n   Answer: Aliases and materialization can be configured for a Spell by adding configuration statements to the top of each SQL file. This configuration assumes a `view` materialization strategy. It should be added to the top of each SQL file."
    },
    {
      "fileName": "8-make-a-pull-request-get-merged-become-an-archwizard.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\Adding A Spell\\8-make-a-pull-request-get-merged-become-an-archwizard.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\Adding A Spell\\8-make-a-pull-request-get-merged-become-an-archwizard.md",
      "summary": "This section of the app technical guide covers the process of submitting a pull request to the official Spellbook in the Dune Docs project. The guide provides step-by-step instructions on how to commit local changes to a GitHub fork of the Spellbook and then submit a pull request. \n\nThe guide also includes a screenshot of the \"Open pull request\" button on the GitHub page and advises users to give their pull request an appropriate message. It also notes that comments from the team may be received and that improvements may need to be made before the pull request is approved. \n\nThe purpose of this guide is to help users contribute to the Spellbook and become Dune Archwizards. It is relevant to the app folder of the project as it pertains to the process of submitting changes to the app's codebase. \n\nAn example of how this guide could be useful is if a user has made changes to the Spellbook and wants to contribute those changes to the official version. By following the steps outlined in the guide, the user can ensure that their changes are properly submitted and reviewed by the team before being merged into the official Spellbook.",
      "questions": "1. What is the purpose of the Spellbook and how does it relate to blockchain technology?\n   \n   The app technical guide does not provide information on the purpose of the Spellbook or its relation to blockchain technology.\n\n2. Are there any specific coding languages or frameworks required to contribute to the Spellbook?\n\n   The app technical guide does not provide information on any specific coding languages or frameworks required to contribute to the Spellbook.\n\n3. Is there a review process for pull requests and who is responsible for reviewing them?\n\n   The app technical guide mentions that there is a review process for pull requests and that the Team provides comments for improvements, but it does not provide information on who is responsible for reviewing the pull requests."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\Adding A Spell\\index.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\Adding A Spell\\index.md",
      "summary": "This technical guide is titled \"How to Cast a Spell\" and is focused on the Spellbook feature of the Dune Docs project. The guide explains what Spellbook is, why it is used, and how to use it. Spellbook is an open-source dbt repository that allows users to create and maintain high-level blockchain data tables using SQL and Jinja templating. It enables the community to build towards a standardized way to transform data into meaningful abstraction layers. \n\nThe guide explains that blockchain data is packaged in blocks, which is one form of data we call \"Raw\" in Dune. Spellbook lets users create abstracted data sets, like dex.trades and nft.trades, which aggregate and organize raw data from multiple sources to make it much easier to query. The guide provides examples of how to use Spellbook to analyze blockchain data and how it can save time and effort.\n\nThe guide also provides an overview of the nft.trades Spell, which allows users to see industry-wide stats like total volume by # of txs and $USD, 24-hr volume, 24-hour and 7-day growth, market share by marketplace, volume by marketplace, and transaction count by marketplace. The guide explains how Spellbook can be used to make data more transparent, accessible, and meaningful together.\n\nThe guide provides 8 steps to casting a Spell, which includes doing some prerequisites and setting up Spellbook dbt, deciding on a Spell to cast, setting up the file structure for SQL, schema, and source files, identifying and defining sources, defining expectations with schema and tests, writing the Spell as a SELECT statement, configuring alias and materialization strategy, and making a pull request, getting merged, and becoming an Archwizard. \n\nOverall, this technical guide provides a comprehensive overview of Spellbook and how to use it to analyze blockchain data. It is a useful resource for anyone looking to work with blockchain data and wants to learn how to use Spellbook to make the process easier and more efficient.",
      "questions": "1. What is Spellbook and how does it relate to blockchain data analytics?\n   \n   Spellbook is an open-source dbt repository that allows for the creation and maintenance of high-level blockchain data tables using SQL and Jinja templating. It enables the community to build towards a standardized way to transform data into meaningful abstraction layers, making it much easier to query and analyze blockchain data.\n\n2. How does the nft.trades Spell work and what insights can it provide for blockchain data analysts?\n   \n   The nft.trades Spell allows for the querying of industry-wide stats such as total volume by number of transactions and USD, 24-hour volume, 24-hour and 7-day growth, market share by marketplace, volume by marketplace, and transaction count by marketplace. It provides insights into the performance of NFT marketplaces and can be used to create dashboards and visualizations for analysis.\n\n3. What are the steps to casting a Spell and how can it benefit the web3 data community?\n   \n   The 8 steps to casting a Spell include prerequisites and setting up Spellbook dbt, deciding on a Spell to cast, setting up file structure for SQL, schema, and source files, identifying and defining sources, defining expectations with schema and tests, writing the Spell as a SELECT statement, configuring alias and materialization strategy, and making a pull request to become an Archwizard. Casting a Spell can benefit the web3 data community by allowing for the creation of standardized abstraction layers and making blockchain data more transparent, accessible, and meaningful for analysis."
    }
  ],
  "folders": [],
  "summary": "The \"Adding A Spell\" folder in the Dune Docs project is focused on guiding users through the process of creating and contributing a new Spell to the Spellbook feature. The Spellbook is an open-source dbt repository that allows users to create and maintain high-level blockchain data tables using SQL and Jinja templating. It enables the community to build towards a standardized way to transform data into meaningful abstraction layers.\n\nThe guide in this folder covers various aspects of creating a new Spell, including setting up prerequisites and the Spellbook dbt environment, deciding on a Spell to cast, setting up the file structure for SQL, schema, and source files, identifying and defining sources, defining expectations with schema and tests, writing the Spell as a SELECT statement, configuring alias and materialization strategy, and making a pull request to contribute the Spell to the official Spellbook.\n\nThis guide is particularly useful for developers and analysts who want to contribute to the Dune Docs project by creating new Spells or migrating existing V1 abstractions to V2 Spells. By following the steps outlined in the guide, users can ensure that their Spells are properly structured, tested, and submitted for review by the Dune Docs team.\n\nFor example, a user might want to create a new Spell that aggregates data from multiple sources to analyze the performance of a specific decentralized finance (DeFi) protocol. By following the guide, the user can set up the necessary environment, create the required files, write the SQL logic, and submit their Spell for review and potential inclusion in the official Spellbook.\n\nOverall, the \"Adding A Spell\" folder provides a comprehensive and detailed guide for users who want to contribute to the Dune Docs project by creating and submitting new Spells. The guide is well-organized and easy to follow, making it an excellent resource for users who are new to the Spellbook feature or the Dune Docs project as a whole.",
  "questions": ""
}