{
  "folderName": "examples",
  "folderPath": ".autodoc\\docs\\json\\docs\\data tables\\spellbook\\contributing\\examples",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\data tables\\spellbook\\contributing\\examples",
  "files": [
    {
      "fileName": "daily-aggregation.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\examples\\daily-aggregation.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\examples\\daily-aggregation.md",
      "summary": "# Daily Aggregation\n\nThis technical guide covers the Daily Aggregation feature of the Dune Docs project. The Daily Aggregation feature sums all transfers for the day. The table is materialized as an incrementally loaded table updated every 15 minutes because the next step includes a slower `window` function to capture a rolling sum.\n\nThe guide explains the novel components that make this Spell incremental. The `<div data-gb-custom-block data-tag=\"if\"> </div>` JINJA block allows the addition of an arbitrary filter when running in “incremental” mode. Incremental mode is default, and a full refresh is denoted by a command-line argument to completely recreate the table. The block is used to filter for all data timestamped in the last two days. The model runs every fifteen minutes, but a look back of 2 days is allowed to account for data arriving late from the blockchain.\n\nThe guide also explains the use of “refs” in this spellset. A ref, like `{{ ref('tokens_ethereum_erc20') }}` is a reference to another model in the DBT project. The ref references the name of the file itself. That means, duplicate file names are not allowed.\n\nThe guide provides an example of the `transfers_ethereum_erc20_agg_day.sql` file, which contains the SQL code for the Daily Aggregation feature. The file uses the `config` function to set the alias, materialized, file format, incremental strategy, and unique key. The SQL code selects the blockchain, date truncated to the day, wallet address, token address, symbol, sum of the amount_raw, sum of the amount_raw divided by power(10, t.decimals), and unique_transfer_id. The file also uses the `left join` function to join the `transfers_ethereum_erc20` and `tokens_ethereum_erc20` tables. The `where` function is used to filter the data timestamped in the last two days. The `group by` function is used to group the data by date truncated to the day, wallet address, token address, t.symbol, and unique_tx_id.\n\nThe guide also provides an example of the `transfers_ethereum_schema.yml` file, which contains the schema for the Daily Aggregation feature. The file includes the name, meta, config, and columns of the table. The columns include blockchain, hour, wallet_address, token_address, symbol, amount_raw, amount, and amount_usd.\n\nIn summary, the Daily Aggregation feature of the Dune Docs project is an incrementally loaded table updated every 15 minutes that sums all transfers for the day. The feature uses a JINJA block to add an arbitrary filter when running in “incremental” mode and refs to reference another model in the DBT project. The `transfers_ethereum_erc20_agg_day.sql` file contains the SQL code for the feature, while the `transfers_ethereum_schema.yml` file contains the schema for the feature.",
      "questions": "1. What is the purpose of the \"incremental\" mode and how does it work?\n    \n    The \"incremental\" mode is used to update the table every 15 minutes with new data. It is the default mode and allows for a look back of 2 days to account for late data from the blockchain. A full refresh is denoted by a command line arg to completely recreate the table.\n    \n2. How does the app handle duplicates in the table and what is the unique key used for deduplication?\n    \n    The app uses a \"merge\" incremental strategy to handle duplicates in the table. The unique key used for deduplication is the `'unique_transfer_id'` which is created by coalescing several transfer features together.\n    \n3. What is a \"ref\" in this app and how is it used?\n    \n    A \"ref\" is a reference to another model in the DBT project. It references the name of the file itself and is used to avoid duplicate file names. In this app, it is used to reference the transfers and tokens models in the Ethereum ERC20 project."
    },
    {
      "fileName": "final-day-balance.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\examples\\final-day-balance.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\examples\\final-day-balance.md",
      "summary": "# Final Daily Balance\n\nThis technical guide is focused on the `app` folder of the Dune Docs project. The guide explains the final daily Ethereum ERC20 token balances spell. The spell is expanded to cover all days, not just the days with transfer activity. The guide also explains how price data is added, known rebase tokens are removed, and any tokens that resulted in large negative balances are removed.\n\nThe `balances_ethereum_erc20_day.sql` file contains the SQL code for the spell. The code uses the `transfers_ethereum_erc20_rolling_day` table to derive the `balances_ethereum_erc20_noncompliant` table. The `balances_ethereum_erc20_noncompliant` table looks for unique token addresses with larger negative balances, which indicate the contract may not be compliant with ERC20. The `tokens_ethereum_rebase` table is a static list of known rebase tokens that are managed.\n\nThe SQL code in `balances_ethereum_erc20_day.sql` calculates the daily token balances of ERC20 Ethereum tokens per wallet and contract address pair. The code uses the `prices` table to calculate the amount in USD. The code also removes rebase tokens from balances and likely non-compliant tokens due to negative balances.\n\nThe `transfers_ethereum_schema.yml` file contains the schema for the `balances_ethereum_erc20_day` table. The table has columns for the blockchain, day, wallet address, token address, amount raw, amount, amount USD, and symbol.\n\nOverall, this technical guide provides a detailed explanation of the final daily Ethereum ERC20 token balances spell and how it works. It also explains the tables used and how they are derived. The guide is useful for developers who want to understand how the spell works and how to use it in their projects.",
      "questions": "1. What is the purpose of the `transfers_ethereum_erc20_rolling_day` table and how is it used in the `balances_ethereum_erc20_day` query?\n   \n   The blockchain SQL analyst might want to know more about the `transfers_ethereum_erc20_rolling_day` table and how it is used in the `balances_ethereum_erc20_day` query to understand how daily token balances are calculated.\n\n2. How are rebase tokens identified and removed from the final daily Ethereum ERC20 token balances spell?\n   \n   The blockchain SQL analyst might want to know more about how rebase tokens are identified and removed from the final daily Ethereum ERC20 token balances spell to understand how the spell handles these types of tokens.\n\n3. What is the significance of the `balances_ethereum_erc20_noncompliant` table and how is it derived?\n   \n   The blockchain SQL analyst might want to know more about the `balances_ethereum_erc20_noncompliant` table and how it is derived to understand how the spell identifies non-compliant ERC20 tokens."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\examples\\index.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\examples\\index.md",
      "summary": "This app technical guide covers the Spellbook Examples for the Dune Docs project. The Spellbook Examples are a series of modular spells that demonstrate how to track daily balances for ERC-20 tokens that follow a contract standard set by the Ethereum Foundation. The guide begins by introducing ERC-20 tokens and the need to identify transfers to track daily balances. The main base Dune table used for this purpose is `erc20_ethereum.evt_Transfer`, which can be found via the data explorer.\n\nThe guide then goes on to describe the modular spells that make up the Spellbook Examples. The first spell is the Reformatted transfers spell, which reformats the data from the `evt_Transfer` table to make it easier to work with. The second spell is the Daily aggregation of transfers spell, which aggregates the transfers on a daily basis. The third spell is the Rolling sum of daily transfers spell, which calculates the rolling sum of daily transfers. The final spell is the Final daily balances for Ethereum ERC20 tokens spell, which calculates the final daily balances for the ERC-20 tokens.\n\nEach spell is described in detail, with examples and screenshots where appropriate. The guide is focused on the app folder of the project and provides a high-level overview of the purpose of each spell and how it applies to the app. Overall, this guide serves as a useful resource for developers looking to track daily balances for ERC-20 tokens using the Dune Docs app.",
      "questions": "1. What is the purpose of the Dune table `erc20_ethereum.evt_Transfer` and how does it relate to blockchain data analysis? \n   - The Dune table `erc20_ethereum.evt_Transfer` is used to track daily balances of ERC-20 tokens and is a key component in analyzing blockchain data related to token transfers.\n2. How does the Spellbook Examples module break down the analysis of ERC-20 tokens? \n   - The Spellbook Examples module breaks down the analysis of ERC-20 tokens into a series of modular spells, including reformatted transfers, daily aggregation, rolling sum, and final daily balances.\n3. Is this app technical guide specific to Ethereum or can it be applied to other blockchain platforms? \n   - The app technical guide specifically references ERC-20 tokens and the Ethereum Foundation, so a blockchain SQL analyst may wonder if the techniques and tools described can be applied to other blockchain platforms and token standards."
    },
    {
      "fileName": "reformatted.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\examples\\reformatted.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\examples\\reformatted.md",
      "summary": "The app technical guide is focused on the Reformatted Transfers feature of the Dune Docs project. The guide explains how the base table records the transfer amount to and from an account, and how it is munged into a union of sent transactions and received transactions to make it easier to sum up transfers. The guide also explains how WETH requires special handling, and how `zeroex_ethereum.weth9_evt_deposit` is added as a source to the model. \n\nThe guide further explains that the model is defined in a YAML file, where things like the description, tests, and metadata are defined. The guide also highlights that the JINJA config block defines that the alias for this view is `erc20`, and without this alias, the table name would default to the file name. The schema name for this view is defined in the `dbt_project.yml` file in the root of the Spellbook project. \n\nThe guide provides examples of the SQL code for the `transfers_ethereum_erc20` model, the YAML file for the model, and the `dbt_project.yml` file. The SQL code shows how the sent transfers, received transfers, deposited WETH, and withdrawn WETH are selected and unioned to create the `transfers_ethereum_erc20` model. The YAML file shows the metadata, description, and columns for the `transfers_ethereum_erc20` model. The `dbt_project.yml` file shows the schema and materialized view for the `transfers` and `ethereum` models. \n\nOverall, the app technical guide provides a detailed explanation of the Reformatted Transfers feature of the Dune Docs project, including how it works, how it is defined, and how it is implemented. The guide is useful for developers who want to understand how the feature works and how to use it in their own projects.",
      "questions": "1. What is the purpose of the `unique_tx_id` field in the SQL query?\n   \n   The `unique_tx_id` field is used to identify unique transactions and avoid duplicates in the table.\n\n2. How are contributors tracked in the YAML file?\n   \n   Contributors are tracked in the YAML file using the `contributors` field, where they can add their handle when writing or editing a spell.\n\n3. How is the schema name for this view defined in the project?\n   \n   The schema name for this view is defined in the `dbt_project.yml` file in the root of the Spellbook project, where schemas are defined by the directory structure."
    },
    {
      "fileName": "rolling-sum.md",
      "filePath": "docs\\data tables\\spellbook\\contributing\\examples\\rolling-sum.md",
      "url": "https://dune.com/blob/master/data tables\\spellbook\\contributing\\examples\\rolling-sum.md",
      "summary": "# Rolling Sum of Daily Transfers\n\nThis section of the app technical guide covers the rolling sum of daily transfers feature of the Dune Docs project. The purpose of this feature is to apply a rolling sum window function to each daily transfer sum. The query for this feature is provided in the `transfers_ethereum_erc20_rolling_day.sql` file. The query selects the blockchain, day, wallet address, token address, symbol, last updated timestamp, recency index, and the sum of the raw amount and amount of the ERC20 token held. \n\nThe `transfers_ethereum_schema.yml` file contains the schema for the `transfers_ethereum_erc20_rolling_hour` table. This table includes columns for the blockchain, hour, wallet address, token address, symbol, amount raw, amount, amount in USD, updated at timestamp, and recency index. \n\nThe purpose of these files is to provide the necessary code and schema for the rolling sum of daily transfers feature. The `transfers_ethereum_erc20_rolling_day.sql` file provides the query for the feature, while the `transfers_ethereum_schema.yml` file provides the schema for the table that stores the results of the query. \n\nOverall, this section of the app technical guide provides developers with the necessary information to implement the rolling sum of daily transfers feature in the Dune Docs project.",
      "questions": "1. What is the purpose of the Rolling Sum of Daily Transfers query in the context of blockchain SQL analysis?\n- The Rolling Sum of Daily Transfers query is used to apply a rolling sum window function to each daily transfer sum in order to calculate the amount of ERC20 tokens held by each wallet/contract pair.\n\n2. How does the Rolling Sum of Daily Transfers query handle missing data?\n- The Rolling Sum of Daily Transfers query fills in all the missing days and does a few more clean up steps in order to ensure accurate calculations.\n\n3. What information is included in the transfers_ethereum_erc20_rolling_hour schema?\n- The transfers_ethereum_erc20_rolling_hour schema includes information such as the blockchain, hour, wallet address, token address, ERC20 token symbol, rolling sum of raw amount of ERC20 token held, rolling sum of amount of ERC20 token held in USD, UTC timestamp when table was last updated, and recency index."
    }
  ],
  "folders": [],
  "summary": "This section of the app technical guide focuses on the Spellbook Examples for the Dune Docs project, specifically covering the daily aggregation of transfers, final daily balances, reformatted transfers, and rolling sum of daily transfers features. These modular spells demonstrate how to track daily balances for ERC-20 tokens that follow a contract standard set by the Ethereum Foundation. The guide is particularly useful for developers looking to track daily balances for ERC-20 tokens using the Dune Docs app.\n\nThe **Daily Aggregation** feature sums all transfers for the day and is incrementally loaded every 15 minutes. The guide explains the use of JINJA blocks and refs in this spellset, as well as providing examples of the `transfers_ethereum_erc20_agg_day.sql` file and the `transfers_ethereum_schema.yml` file.\n\nThe **Final Daily Balance** feature calculates the final daily Ethereum ERC20 token balances per wallet and contract address pair. The guide explains how price data is added, known rebase tokens are removed, and any tokens that resulted in large negative balances are removed. Examples of the `balances_ethereum_erc20_day.sql` file and the `transfers_ethereum_schema.yml` file are provided.\n\nThe **Reformatted Transfers** feature reformats the data from the `evt_Transfer` table to make it easier to work with. The guide explains how WETH requires special handling and how `zeroex_ethereum.weth9_evt_deposit` is added as a source to the model. Examples of the SQL code for the `transfers_ethereum_erc20` model, the YAML file for the model, and the `dbt_project.yml` file are provided.\n\nThe **Rolling Sum of Daily Transfers** feature applies a rolling sum window function to each daily transfer sum. The guide provides examples of the `transfers_ethereum_erc20_rolling_day.sql` file and the `transfers_ethereum_schema.yml` file.\n\nIn summary, this section of the app technical guide offers a comprehensive understanding of the Spellbook Examples for the Dune Docs project, focusing on the daily aggregation of transfers, final daily balances, reformatted transfers, and rolling sum of daily transfers features. The guide is beneficial for developers who want to implement these features in their own projects and gain a deeper understanding of how they work within the Dune Docs app.",
  "questions": ""
}