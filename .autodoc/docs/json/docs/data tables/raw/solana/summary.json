{
  "folderName": "solana",
  "folderPath": ".autodoc\\docs\\json\\docs\\data tables\\raw\\solana",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\data tables\\raw\\solana",
  "files": [
    {
      "fileName": "account-activity.md",
      "filePath": "docs\\data tables\\raw\\solana\\account-activity.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\solana\\account-activity.md",
      "summary": "# Account Activity\n\nThis technical guide covers the `Solana.account_activity` table, which contains information from the transactions table focused on account usage. Each row contains all information about an account's usage in a transaction. The purpose of this guide is to provide a detailed description of the columns in the `Solana.account_activity` table and their corresponding data types.\n\nThe table contains the following columns:\n\n- `block_slot`: a `bigint` representing the slot of the block this transaction was in.\n- `block_hash`: a `string` representing the hash of the block this transaction was in.\n- `block_time`: a `timestamp` representing the timestamp that this account usage occurred.\n- `block_date`: a `date` representing the date this account usage occurred.\n- `address`: a `string` representing the address of the account, also referred to as public key.\n- `tx_index`: an `int` representing the index of this transaction in the block.\n- `tx_id`: a `string` representing the ID of the transaction in which this account usage occurred.\n- `tx_success`: a `boolean` representing whether the transaction succeeded and was committed.\n- `signed`: a `boolean` representing whether this account signed this transaction.\n- `writeable`: a `boolean` representing whether this account was granted read-write access in this transaction.\n- `pre_balance`: a `bigint` representing the balance of this account before the transaction was processed.\n- `pre_token_balance`: a `decimal` representing the token balance before the transaction was processed.\n- `post_balance`: a `bigint` representing the balance of this account after the transaction was processed.\n- `post_token_balance`: a `decimal` representing the token balance after the transaction was processed.\n- `balance_change`: a `bigint` representing the balance change that occurred as part of the transaction.\n- `token_balance_change`: a `decimal` representing the balance change that occurred as part of the transaction.\n- `token_mint_address`: a `string` representing the address the associated token address is minting from (i.e. the actual token address).\n- `token_owner_address`: a `string` representing the address that owns this token address.\n\nThis guide provides a clear understanding of the `Solana.account_activity` table and its columns. For example, if a developer wants to retrieve information about an account's usage in a transaction, they can use this table to get all the necessary information.",
      "questions": "1. What blockchain platform is this app technical guide for?\n- The app technical guide is for the Solana blockchain platform.\n\n2. What specific account information is included in the table?\n- The table contains information about an account's usage in a transaction, including its address, pre- and post-transaction balances, and token balances.\n\n3. What is the purpose of the token\\_mint\\_address and token\\_owner\\_address columns?\n- The token\\_mint\\_address column indicates the address from which the associated token is being minted, while the token\\_owner\\_address column indicates the address that owns the token address."
    },
    {
      "fileName": "blocks.md",
      "filePath": "docs\\data tables\\raw\\solana\\blocks.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\solana\\blocks.md",
      "summary": "# Blocks\n\nThis section of the app technical guide focuses on the `Solana.blocks` table, which contains block data within Solana's blockchain. The purpose of this table is to identify block activity and transaction changes over time. The table includes several columns such as `hash`, `height`, `slot`, `time`, `date`, `parent_slot`, `previous_block___hash`, `total_transactions`, `successful_transactions`, and `failed_transactions`. Each column is described in detail, including the data type and a brief explanation of what it represents.\n\nFor example, the `hash` column is a string that represents the hash of the block, base-58 encoded. The `height` column is a bigint that represents the number of blocks beneath this block. The `time` column is a timestamp that represents the estimated time this block was produced. The `total_transactions` column is a bigint that represents the total number of transactions in this block, while the `successful_transactions` and `failed_transactions` columns represent the number of successful and failed transactions in this block, respectively.\n\nThe guide also includes a video that provides an overview of the `Solana.blocks` table. Additionally, there are two Solana Query examples provided: `Solana blocks over time` and `Transactions per day`. These examples demonstrate how to use the `Solana.blocks` table to analyze block activity and transaction changes over time.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the `Solana.blocks` table and its columns. It also includes examples of how to use the table to analyze block activity and transaction changes over time.",
      "questions": "1. What is the purpose of the Solana.blocks table in the Dune Docs app?\n- The Solana.blocks table contains block data within Solana's blockchain and can be used to identify block activity and transaction changes over time.\n\n2. What data types are used in the Solana.blocks table?\n- The Solana.blocks table uses data types such as string, bigint, timestamp, and date.\n\n3. Are there any sample queries available for analyzing Solana.blocks data in the Dune Docs app?\n- Yes, there are sample queries available for analyzing Solana.blocks data in the Dune Docs app, such as Solana blocks over time and Transactions per day."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\data tables\\raw\\solana\\index.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\solana\\index.md",
      "summary": "# Solana Technical Guide\n\nThis technical guide provides information on Solana's raw data and how it differs from other chains. It also provides details on the data available in the app and the changelog of the app.\n\n## Data Available\n\nThis section provides a list of the data available in the app. It includes the following:\n\n- Account Activity: This table contains information from the transactions table focused on account usage.\n- Blocks: Blocks are the building blocks of blockchains and rollups.\n- Rewards: This table contains data about rewards paid out on Solana.\n- Transactions: Transactions are cryptographically signed instructions from accounts.\n- Vote Transactions: This table contains the full set of vote transactions that are submitted by validators to vote on a block.\n\n## Changelog\n\nThis section provides a list of changes made to the app. It includes the following:\n\n### 2022-03-25\n\nThe `solana.account_activity` table has been updated to a new version. The new version of the table contains additional information around token activity. The following columns were added to the table:\n\n- `pre_token_balances`: The token balance before the transaction was processed.\n- `post_token_balances`: The token balance after the transaction was processed.\n- `token_balance_changes`: The balance change that occurred as part of the transaction.\n\n### 2022-03-18\n\nThe `solana.account_activity` table has been released. It contains all of the information about an account’s usage in a transaction. The table is optimized to run with ‘WHERE address = …’ queries.\n\n### 2022-03-01\n\nThe `solana.transactions` table has been upgraded to a new version. The new version of the table uses cleaner array structs to make it easier to extract useful information. The vote transactions have also been split into their own table `solana.vote_transactions`, so queries using `solana.transactions` will have better performance. \n\nThis section also provides information on what the changes mean for existing queries using `solana.transactions`. It includes the following:\n\n- You won't need to check if a transaction is a vote transaction.\n- The `error_index` and `error_message` columns have been removed and merged into the `error` column.\n- Structs containing indexes to `account_keys` now include the account address directly.\n- The `pre_token_balances` and `post_token_balances` columns have changed.\n- The `instructions` column has changed.\n- The `inner_instructions` column is removed, and inner instructions have been moved into the `instructions` column.\n\nOverall, this technical guide provides a comprehensive overview of Solana's raw data and the data available in the app. It also provides information on the changes made to the app and what they mean for existing queries.",
      "questions": "1. What is Solana and how does it differ from other chains?\n- Solana is a non-EVM chain and its raw data looks different from other chains.\n\n2. What data is available in this app and what information does it provide?\n- The app provides information on account activity, blocks, rewards, transactions, and vote transactions.\n\n3. What changes were made to the `solana.transactions` table and how might it affect existing queries?\n- The `solana.transactions` table has been upgraded to a new version, with cleaner array structs and better performance for queries. However, some existing queries may break due to changes in column names and structures."
    },
    {
      "fileName": "rewards.md",
      "filePath": "docs\\data tables\\raw\\solana\\rewards.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\solana\\rewards.md",
      "summary": "# Rewards\n\nThis section of the app technical guide covers the `Solana.rewards` table, which contains data about rewards paid out on Solana. Each row in the table corresponds to one reward, and one block may contain zero or more rewards. The table has several columns, including `block_slot`, which indicates the block's slot index in the ledger, `block_hash`, which is the hash of the block, `block_time`, which is the estimated time the block was produced, and `block_date`, which is the date of the event. Other columns include `commission`, which indicates the vote account commission when the reward was credited (only present for voting and staking rewards), `lamports`, which is the number of reward lamports credited or debited by the account, `pre_balance`, which is the account balance in lamports before the reward was applied, `post_balance`, which is the account balance in lamports after the reward was applied, `recipient`, which is the public key of the account that received the reward, and `reward_type`, which indicates the type of reward (e.g., \"fee\", \"rent\", \"voting\", \"staking\").\n\nAn example query for this table is provided in the guide, which can be found at [Solana rewards fee per day](https://dune.xyz/queries/391421/747012). This query likely retrieves data from the `Solana.rewards` table to calculate the daily rewards paid out on Solana.\n\nOverall, this section of the app technical guide provides information on the `Solana.rewards` table and its columns, which is useful for developers working on the rewards feature of the app.",
      "questions": "1. What is the purpose of the Solana.rewards table?\n    \n    The Solana.rewards table contains data about rewards paid out on Solana, with each row corresponding to one reward.\n\n2. What information does the commission column provide and when is it present?\n    \n    The commission column provides the vote account commission when the reward was credited, and it is only present for voting and staking rewards.\n\n3. What are the different types of rewards listed in the reward_type column?\n    \n    The different types of rewards listed in the reward_type column are \"fee\", \"rent\", \"voting\", and \"staking\"."
    },
    {
      "fileName": "transactions.md",
      "filePath": "docs\\data tables\\raw\\solana\\transactions.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\solana\\transactions.md",
      "summary": "# Transactions\n\nThe Transactions section of the Dune Docs project focuses on the Solana.transactions table, which contains transaction data within Solana's blockchain. This table provides relevant data related to account, protocol, and program activity. The guide provides a detailed description of each column in the table, including the column name, column type, and description. \n\nThe guide also includes query examples that demonstrate how to use the Solana.transactions table to extract data. For example, the guide provides a query that shows the number of Solana instructions by day for DEXes. \n\nThe guide also includes several struct definitions that allow for representing nested hierarchical data and have key-value pairs. These structs can be used to group fields together to make them more accessible. The guide provides a detailed description of each struct, including the field name, data type, and description. \n\nThe token_balance struct, for example, includes the account key of the account that the token balance is provided for, the public key of the token's mint, and the derived amount from the token balance's raw amount and the number of decimals. \n\nThe instructions struct includes an ordered list of accounts to pass to the program, program input data in a base-58 string, and the account key of the program that executed this instruction. \n\nThe inner_instructions struct includes an ordered list of accounts to pass to the program, program input data in a base-58 string, and the account key of the program that executed this instruction. \n\nFinally, the error struct includes the instruction number that failed and the error message. \n\nOverall, the Transactions section of the Dune Docs project provides a comprehensive guide to the Solana.transactions table and the structs used to represent nested hierarchical data. The guide includes detailed descriptions of each column and struct, as well as query examples that demonstrate how to use the data in the table.",
      "questions": "1. What data is available in the Solana.transactions table?\n- The Solana.transactions table contains transaction data within Solana's blockchain, including relevant data related to account, protocol, and program activity.\n\n2. What is the purpose of the STRUCT data type in this app?\n- The STRUCT data type allows for representing nested hierarchical data and has key-value pairs, similar to a dictionary in Python. It can be used to group fields together to make them more accessible.\n\n3. Are there any examples of how to extract data from the token_balance field?\n- Yes, there is an example query provided in the app technical guide that shows how to extract the number of Solana instructions by day for DEXes using the token_balance field."
    },
    {
      "fileName": "vote-transactions.md",
      "filePath": "docs\\data tables\\raw\\solana\\vote-transactions.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\solana\\vote-transactions.md",
      "summary": "# Vote Transactions\n\nThis section of the app technical guide covers the `Solana.vote_transactions` table, which contains the full set of vote transactions that are submitted by validators to vote on a block. This table can be joined with the non-vote transactions table to get a full breakdown of all transactions. The schema of this table is the same as the main transactions table.\n\nThe guide provides a detailed description of each column in the `Solana.vote_transactions` table, including the column name, column type, and description. Some of the key columns include:\n\n- `block_slot`: This column contains the block's slot index in the ledger.\n- `block_time`: This column contains the estimated time the block was produced.\n- `fee`: This column contains the fee charged for the transaction.\n- `success`: This column indicates whether the transaction was valid and committed.\n- `instructions`: This column contains the instructions to execute in order.\n- `signatures`: This column contains a list of base-58 encoded signatures applied to the transaction.\n\nThe guide also provides an example query that demonstrates how to use the `Solana.vote_transactions` table. The query shows how to retrieve Solana transactions from the past 30 days using Dune Analytics.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the `Solana.vote_transactions` table and its columns. It is a useful resource for developers who are working with Solana transactions and need to understand the data contained in this table.",
      "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain technology?\n- The app technical guide provided does not give information on the overall purpose of the dune docs app, so a blockchain SQL analyst may want to know more about how the app relates to blockchain technology and what specific features it offers for blockchain analysis.\n\n2. How does the Solana.vote_transactions table differ from other transaction tables in the app?\n- The app technical guide provides information on the Solana.vote_transactions table, but it does not explain how it differs from other transaction tables in the app. A blockchain SQL analyst may want to know this information in order to better understand how to use the table for analysis.\n\n3. Are there any limitations or known issues with the app's data collection or analysis capabilities?\n- The app technical guide does not provide any information on limitations or known issues with the app's data collection or analysis capabilities. A blockchain SQL analyst may want to know this information in order to assess the reliability and accuracy of the data provided by the app."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc\\docs\\json\\docs\\data tables\\raw\\solana` folder contains a comprehensive technical guide for various Solana data tables, which are essential for developers and analysts working with Solana blockchain data. These guides provide detailed information on the structure, columns, and data types of the tables, as well as examples of how to use them in queries and analysis.\n\nFor instance, the `account-activity.md` guide focuses on the `Solana.account_activity` table, which contains information about account usage in transactions. This guide is particularly useful for developers who want to retrieve information about an account's usage in a transaction, as it provides a clear understanding of the table and its columns.\n\nSimilarly, the `blocks.md` guide covers the `Solana.blocks` table, which contains block data within Solana's blockchain. This guide is essential for analyzing block activity and transaction changes over time. It also includes examples of Solana Query, such as `Solana blocks over time` and `Transactions per day`, demonstrating how to use the `Solana.blocks` table effectively.\n\nThe `rewards.md` guide focuses on the `Solana.rewards` table, which contains data about rewards paid out on Solana. This guide is useful for developers working on the rewards feature of the app, as it provides information on the table's columns and an example query for calculating daily rewards paid out on Solana.\n\nThe `transactions.md` guide provides a comprehensive overview of the `Solana.transactions` table and the structs used to represent nested hierarchical data. This guide is crucial for developers working with transaction data within Solana's blockchain, as it includes detailed descriptions of each column and struct, as well as query examples that demonstrate how to use the data in the table.\n\nLastly, the `vote-transactions.md` guide covers the `Solana.vote_transactions` table, which contains the full set of vote transactions submitted by validators to vote on a block. This guide is a valuable resource for developers working with Solana transactions and understanding the data contained in this table.\n\nOverall, the guides in the `.autodoc\\docs\\json\\docs\\data tables\\raw\\solana` folder provide a thorough understanding of various Solana data tables and their usage in queries and analysis. These guides are essential for developers and analysts working with Solana blockchain data and contribute significantly to the larger project feature of data tables.",
  "questions": ""
}