{
  "folderName": "raw",
  "folderPath": ".autodoc\\docs\\json\\docs\\data tables\\raw",
  "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\data tables\\raw",
  "files": [
    {
      "fileName": "blocks.md",
      "filePath": "docs\\data tables\\raw\\blocks.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\blocks.md",
      "summary": "# Blocks\n\nThis section of the app technical guide covers the concept of blocks in blockchains and rollups. A block is a collection of transactions that incrementally alter the state of an EVM system. Transactions within a block can only be executed one after the other, not in parallel. \n\nThe guide provides tables that are useful for identifying block activity and transaction changes over time. These tables are divided into two sections: V2 Engine (Spark SQL) and V1 Engine (PosgreSQL). Each table contains information about different chains, such as Ethereum Mainnet, Gnosis Chain, Polygon, Optimism, BNB Chain, Arbitrum, and Avalanche C-Chain. The tables also provide notes on what information is not included in each chain. \n\nThe guide also includes a section on column data, which provides a description of each column in the tables. The columns include `time`, `number`, `hash`, `parent hash`, `gas_limit`, `gas_used`, `miner`, `difficulty`, `total_difficulty`, `nonce`, `size`, and `base_fee_per_gas`. Each column has a data type and a description of what it represents. \n\nThe guide provides an example of the column data in the form of a video. The video shows how to use the tables to identify block activity and transaction changes over time. \n\nOverall, this section of the app technical guide provides a comprehensive overview of blocks in blockchains and rollups. It also provides useful tables and column data that can be used to analyze block activity and transaction changes over time.",
      "questions": "1. What is the purpose of the Dune Docs app in relation to blockchain SQL analysis?\n- The app technical guide provides information on tables and column data that can be used for identifying block activity and transaction changes over time in various chains.\n\n2. What is the difference between the V2 Engine (Spark SQL) and V1 Engine (PosgreSQL) tables?\n- The V2 Engine tables contain more chains and additional columns such as `miner`, `nonce`, and `base_fee_per_gas`, while the V1 Engine tables have fewer chains and do not contain `nonce` or `base_fee_per_gas`.\n\n3. How can the Dune Docs app be used to analyze blockchains and rollups?\n- The app provides tables and column data that can be queried using Spark SQL or PostgreSQL to analyze block activity and transaction changes over time in various chains."
    },
    {
      "fileName": "event-logs.md",
      "filePath": "docs\\data tables\\raw\\event-logs.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\event-logs.md",
      "summary": "# Event Logs\n\nThis technical guide covers the `Event Logs` tables in the Dune Docs project. These tables store all logs data that gets generated by smart contracts. The purpose of this guide is to provide an understanding of how event logs work and how they can be useful for querying contracts that are not yet decoded or are not able to be decoded since the code of the smart contract is not public.\n\nThe guide explains that logs are an elegant way to store tiny amounts of data on EVM blockchains for a small amount of gas. Specifically, event logs are useful to let other people know something has happened without them having to query contracts individually. The guide also provides a link to an article for more information on this topic.\n\nThe guide then provides two tables that show the different chains and tables that are available in the Dune Docs project. The first table shows the V2 Engine (Spark SQL) and the second table shows the V1 Engine (PosgreSQL). Each table lists the chain, table, and any notes that may be relevant.\n\nFinally, the guide provides a detailed description of the column data that is available in the Event Logs tables. The description includes the column name, data type, and a brief explanation of what the column represents. An example is also provided to help users understand how the data is structured.\n\nOverall, this technical guide provides a comprehensive overview of the Event Logs tables in the Dune Docs project. It explains how event logs work, how they can be useful, and provides detailed information on the available data.",
      "questions": "1. What is the purpose of the Event Logs tables in this app and how are they useful for blockchain analysis?\n   \n   The Event Logs tables store all logs data generated by smart contracts and are useful for querying contracts that are not yet decoded or are not able to be decoded since the code of the smart contract is not public. They are also useful for letting other people know something has happened without them having to query contracts individually.\n\n2. What engines are used for this app and what are the differences between them?\n   \n   The app uses two engines: V2 Engine (Spark SQL) and V1 Engine (PosgreSQL). The main difference between them is the type of SQL used: Spark SQL for V2 and PostgreSQL for V1.\n\n3. What kind of data is stored in the Event Logs tables and what are some examples of the columns?\n   \n   The Event Logs tables store data such as the contract address, keccak256 hash of a flattened event declaration string, indexed topics of the event, unindexed data containing further information on the event, transaction hash, block hash, block number, block time, and index position of the log and transaction in the block. An example of the columns can be found in the table under the \"Column Data\" section of the app technical guide."
    },
    {
      "fileName": "index.md",
      "filePath": "docs\\data tables\\raw\\index.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\index.md",
      "summary": "# Raw Tables\n\nThe Raw Tables section of the Dune Docs project provides raw, unfiltered, and unedited data for querying transactions, blocks, event logs, or traces across the blockchains that Dune supports. This section is useful for obtaining meta information about the blockchain, a transaction, traces, or certain events. However, queries written using raw data tables can be difficult to understand and audit due to the nature of the encoded data commonly found in these tables. Additionally, raw data tables have a large number of rows, which can make querying slow. Therefore, it is often better to submit contracts for decoding and work with decoded data.\n\nThe EVM Raw Table Data section focuses on Ethereum Virtual Machine (EVM), which powers all chains in Dune except Solana and Bitcoin. This section includes the following subtopics:\n\n- Blocks: Blocks are the building blocks of blockchains and rollups.\n- Event Logs: Event Logs are data generated by smart contracts.\n- Traces: Traces contain information about the execution of smaller atomic actions generated by transactions.\n- Transactions: Transactions are cryptographically signed instructions from accounts.\n\nEach subtopic provides detailed information on how to query the specific data type. For example, the Blocks subtopic explains how to query block data, including block number, timestamp, and miner address. The Event Logs subtopic explains how to query event logs, including the event name, contract address, and event parameters.\n\nOverall, the Raw Tables section of the Dune Docs project provides a comprehensive guide for querying raw data tables and understanding the encoded data commonly found in these tables. It also provides guidance on when it is better to work with decoded data and how to query specific data types within the EVM Raw Table Data section.",
      "questions": "1. What types of blockchain data can be queried using raw tables in Dune Docs?\n- Raw tables in Dune Docs allow for querying of any transaction, block, event log, or trace across the blockchains that Dune supports.\n\n2. What are some challenges associated with querying raw data tables?\n- Queries written using raw data tables can be difficult to understand and audit due to the encoded data commonly found in these tables. Additionally, raw data tables have a large number of rows and can be slow to query.\n\n3. Which blockchains in Dune Docs are powered by the Ethereum Virtual Machine (EVM)?\n- All chains in Dune Docs except for Solana and Bitcoin are powered by the Ethereum Virtual Machine (EVM)."
    },
    {
      "fileName": "traces.md",
      "filePath": "docs\\data tables\\raw\\traces.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\traces.md",
      "summary": "# Traces\n\nThis technical guide covers the Traces feature of the Dune Docs project. Traces tables contain information about the execution of smaller atomic actions generated by transactions. Transactions can trigger smaller atomic actions that modify the internal state of an Ethereum Virtual Machine. Information about the execution of these actions is logged and can be found stored as an EVM execution trace, or just a trace. \n\nThe guide provides information on the tables and column data of the Traces feature. The tables are divided into two engines: V2 Engine (Spark SQL) and V1 Engine (PosgreSQL). Each table contains information about the traces of different chains, such as Ethereum Mainnet, Gnosis Chain, Polygon, Optimism, BNB Chain, Arbitrum, and Avalanche C-Chain. The column data provides a detailed description of each column in the tables. \n\nThe guide also explains the gas used in `.traces`. The `gas_used` column in the `.traces` tables is a bit hard to understand, so the guide provides pointers on how to understand it. For example, the `gas_used` of a trace will always include the gas consumed by the trace and all its subtraces. \n\nFinally, the guide provides information on creation traces. One type of trace, `create`, is used to create a smart contract then transfer ether to it. The guide provides tables and column data for creation traces. \n\nOverall, this technical guide provides a comprehensive overview of the Traces feature of the Dune Docs project. \n\nExample queries are also provided in the guide. For instance, there is an example query that shows how to arrive at the \"true\" `gas_used` value. Another example query shows how to create a smart contract then transfer ether to it. \n\nNote that this guide is not a part of the Dune Docs project.",
      "questions": "1. What is the purpose of the `traces` tables in the different chains listed in the guide?\n- The `traces` tables contain information about the execution of smaller atomic actions generated by transactions in different chains.\n\n2. What is the difference between the `gas` and `gas_used` columns in the `.traces` tables?\n- The `gas` column represents the gas provided with the message call, while the `gas_used` column represents the gas consumed by the transaction in `wei`.\n\n3. What is the purpose of the `creation_traces` tables in the different chains listed in the guide?\n- The `creation_traces` tables contain information about the creation of smart contracts and the transfer of ether to them."
    },
    {
      "fileName": "transactions.md",
      "filePath": "docs\\data tables\\raw\\transactions.md",
      "url": "https://dune.com/blob/master/data tables\\raw\\transactions.md",
      "summary": "# Transactions\n\nThis section of the app technical guide covers transactions in the Ethereum network. Transactions are cryptographically signed instructions from accounts that initiate a transaction to update the state of the Ethereum network. Transactions always originate from externally owned accounts, and a smart contract cannot initiate a transaction. Transactions need to be broadcast to the whole network, and any node can broadcast a request for a transaction to be executed on the EVM. After this happens, a miner will execute the transaction and propagate the resulting state change to the rest of the network. \n\nThe section also provides a link to the official Ethereum documentation for more information on transactions.\n\n## Tables\n\nThis section provides a table that lists the different chains and tables that contain transaction data. The tables are divided into two engines: V2 Engine (Spark SQL) and V1 Engine (PosgreSQL). The table lists the chains, tables, and notes for each table. For example, the Ethereum Mainnet chain has a table named `ethereum.transactions`, and the Gnosis Chain has a table named `gnosis.transactions`.\n\n## Column Data\n\nThis section provides a table that lists the different columns and their data types for the transaction data. The table also provides a description of each column. For example, the `block_time` column is of type `_timestamptz_` and represents the time when the block was mined that includes this transaction. The `value` column is of type `_numeric_` and represents the amount of `[chain_gas_token]` sent in this transaction in `wei`. Note that ERC20 tokens do not show up here. \n\nThe section also provides an example of the column data in the form of an embedded video. \n\nOverall, this section of the app technical guide provides a comprehensive overview of transactions in the Ethereum network, including tables and column data.",
      "questions": "1. What is the purpose of the Transactions table in this app and what data does it contain?\n   \n   The Transactions table contains information about transactions on various blockchain networks, including Ethereum Mainnet, Gnosis Chain, Polygon, Optimism, BNB Chain, Arbitrum, and Avalanche C-Chain. It includes data such as the block time, block number, value, gas limit, gas price, gas used, max fee per gas, max priority fee per gas, priority fee per gas, nonce, index, success, from address, to address, block hash, data, hash, type, access list, effective gas price, gas used for L1, L1 gas used, L1 gas price, L1 fee, L1 fee scalar, L1 block number, L1 timestamp, and L1 tx origin.\n   \n2. Does this app support EIP1559 and how is it reflected in the Transactions table?\n   \n   The app supports EIP1559 on some networks, but not on others. The Transactions table includes columns for max fee per gas, max priority fee per gas, and priority fee per gas, which are introduced by EIP1559. However, for networks where EIP1559 is not supported, these columns do not contain data and the type column is always set to Legacy.\n   \n3. How is gas measured in this app and is it consistent across all networks?\n   \n   Gas is measured in wei for most networks, but for Arbitrum it is measured in ArbGas and for Avalanche C-Chain it is measured in nanoavax. Therefore, gas measurement is not consistent across all networks in this app."
    }
  ],
  "folders": [
    {
      "folderName": "bitcoin",
      "folderPath": ".autodoc\\docs\\json\\docs\\data tables\\raw\\bitcoin",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\data tables\\raw\\bitcoin",
      "files": [
        {
          "fileName": "blocks.md",
          "filePath": "docs\\data tables\\raw\\bitcoin\\blocks.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\bitcoin\\blocks.md",
          "summary": "# Blocks\n\nThis section of the app technical guide covers the `bitcoin.blocks` feature of the project. It provides a detailed description of the columns in the `bitcoin.blocks` table, which contains information about each block in the Bitcoin blockchain. \n\nEach column name is listed along with its corresponding data type and a description of what the column represents. For example, the `time` column represents the time at which the block was mined, while the `height` column represents the block number. \n\nThe guide also includes information about the various rewards associated with mining a block, such as the `mint_reward` and `total_reward`. Additionally, it provides details about the size of the block, the number of transactions it contains, and the difficulty of mining the block. \n\nOverall, this section of the guide is useful for developers who are working with Bitcoin data and need to understand the structure of the `bitcoin.blocks` table. \n\nExample: If a developer wants to retrieve information about the size of a particular block, they can query the `size` column in the `bitcoin.blocks` table.",
          "questions": "1. What is the purpose of the `bitcoin.blocks` table in the Dune Docs app? \n- The `bitcoin.blocks` table in the Dune Docs app contains information about Bitcoin blocks, including their time, height, hash, transaction count, size, and various rewards.\n\n2. How does the app handle updates to the `bitcoin.blocks` table? \n- The app technical guide does not provide information on how updates to the `bitcoin.blocks` table are handled.\n\n3. Can the app be used to analyze blocks from other cryptocurrencies besides Bitcoin? \n- The app technical guide does not provide information on whether the app can be used to analyze blocks from other cryptocurrencies besides Bitcoin."
        },
        {
          "fileName": "index.md",
          "filePath": "docs\\data tables\\raw\\bitcoin\\index.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\bitcoin\\index.md",
          "summary": "# App Technical Guide: Bitcoin\n\nThis guide provides information on how to work with Bitcoin data in the Dune Docs project. As a non-EVM chain, Bitcoin's raw data looks different from other chains, and this guide aims to help users understand and work with this data.\n\nThe guide starts with a brief introduction to Bitcoin and provides a link to a full written guide on getting started. This is useful for users who are new to Bitcoin and want to learn more about it.\n\nThe main section of the guide is \"Data Available,\" which lists the different types of Bitcoin data that are available in the Dune Docs project. These include blocks, transactions, outputs, and inputs. Each of these data types has its own page, which provides more detailed information on how to work with that specific type of data.\n\nFor example, the \"Blocks\" page provides information on how to access and analyze Bitcoin block data, while the \"Transactions\" page provides information on how to work with Bitcoin transaction data. The \"Outputs\" and \"Inputs\" pages provide information on how to work with Bitcoin output and input data, respectively.\n\nOverall, this guide is a useful resource for anyone who wants to work with Bitcoin data in the Dune Docs project. It provides an overview of the different types of data available and links to more detailed information on each type.",
          "questions": "1. What type of data is available for analysis in this app?\n- The app provides data on blocks, transactions, outputs, and inputs for Bitcoin.\n\n2. Is this app compatible with Ethereum Virtual Machine (EVM) chains?\n- No, this app is specifically designed for non-EVM chains like Bitcoin.\n\n3. Are there any additional resources available for getting started with analyzing Bitcoin data?\n- Yes, the app provides a link to a full written guide on getting started with analyzing Bitcoin data."
        },
        {
          "fileName": "inputs.md",
          "filePath": "docs\\data tables\\raw\\bitcoin\\inputs.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\bitcoin\\inputs.md",
          "summary": "The Inputs section of the app technical guide for the Dune Docs project provides a detailed description of the `bitcoin.inputs` table. This table contains information related to the inputs of Bitcoin transactions, including block time, block date, block height, index, transaction ID, spent block height, spent transaction ID, spent output number, value, address, type, coinbase, script ASM, script HEX, script description, script signature ASM, script signature HEX, sequence, and witness data. \n\nThe guide provides a table that lists each column name, data type, and a brief description of what the column represents. For example, the `block_time` column represents the time at which the block containing the input was mined, while the `value` column represents the number of Satoshis attached to the input. \n\nThe guide also provides additional information about certain columns, such as the `sequence` column, which is intended to allow unconfirmed time-locked transactions to be updated before being finalized. The guide notes that this column is not currently used except to disable locktime in a transaction. \n\nOverall, this section of the app technical guide provides developers with a comprehensive understanding of the `bitcoin.inputs` table and the information it contains. By providing detailed descriptions of each column, developers can more easily work with this data and integrate it into their applications.",
          "questions": "1. What is the purpose of this app and how does it relate to blockchain technology?\n- The app is not clearly described in this technical guide, so a blockchain SQL analyst might want to know more about its intended use and how it interacts with blockchain data.\n\n2. Are there any limitations or known issues with the data being collected in the `bitcoin.inputs` table?\n- The technical guide does not provide information on data quality or potential issues with the input data, so an analyst might want to investigate this further before using the data for analysis.\n\n3. Is there any additional documentation or support available for using this app and its associated data tables?\n- The technical guide only provides information on the `bitcoin.inputs` table, so an analyst might want to know if there are other tables or resources available for understanding the app and its data."
        },
        {
          "fileName": "outputs.md",
          "filePath": "docs\\data tables\\raw\\bitcoin\\outputs.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\bitcoin\\outputs.md",
          "summary": "The app technical guide provides documentation for the `dune docs` project, specifically focusing on the `Outputs` feature of the app. The guide contains a table with detailed information on the `bitcoin.outputs` data table, which includes column names, data types, and descriptions of each column. \n\nThe `block_time` column provides the timestamp of the block, while the `block_date` column provides the date of the block. The `block_height` column provides the block number, and the `block_hash` column provides the hash of the block. The `tx_id` column provides the hash of the transaction that the output is from, and the `index` column provides the 0-indexed number of the output within the transaction. \n\nThe `value` column provides the number of Satoshis attached to the output, while the `script_asm` column provides a symbolic representation of the bitcoin's script language op-codes. The `script_hex` column provides a hexadecimal representation of the bitcoin's script language op-codes. The `address` column provides the address that owns the output, and the `type` column provides the address type of the output. \n\nThis guide is useful for developers who are working on the `Outputs` feature of the `dune docs` app. It provides a clear understanding of the data table and its columns, which can be used to build queries and analyze data. For example, a developer could use this guide to understand how to retrieve the block time and date of a specific output, or how to identify the address type of an output. \n\nOverall, the app technical guide provides a comprehensive overview of the `Outputs` feature of the `dune docs` app, making it easier for developers to work with the data and build new features.",
          "questions": "1. What data source does this app technical guide pull from to generate the `bitcoin.outputs` table?\n- This information is not provided in the app technical guide and would require further investigation or documentation.\n\n2. Can this app technical guide be used to analyze outputs from other cryptocurrencies besides Bitcoin?\n- No, this app technical guide is specifically for analyzing Bitcoin outputs and does not provide information on other cryptocurrencies.\n\n3. Is there any information provided in this app technical guide about the inputs that correspond to each output in the `bitcoin.outputs` table?\n- No, this app technical guide only provides information on the outputs themselves and does not include any information on the corresponding inputs."
        },
        {
          "fileName": "transactions.md",
          "filePath": "docs\\data tables\\raw\\bitcoin\\transactions.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\bitcoin\\transactions.md",
          "summary": "The Transactions section of the Dune Docs project provides a detailed guide on the `bitcoin.transactions` feature. This guide covers the various columns that make up the transaction table, including their data types and descriptions. The table columns include block time, block date, block height, block hash, index, ID, input value, output value, fee, input count, output count, size, virtual size, is coinbase, coinbase, input, output, lock time, and hex. \n\nThe guide also provides definitions for the various structures within the input and output columns. The input structure includes fields such as value, height, tx_id, output_number, coinbase, sequence, witness_data, script_signature, and script_pub_key. The output structure includes fields such as index, value, and script_pub_key. \n\nThe guide explains that the STRUCT data type allows for representing nested hierarchical data and has key-value pairs. It is similar to a dictionary in Python and can be used to group fields together to make them more accessible. The guide also provides examples of how to work with these columns using syntax such as `input[1].witness_data[2]` or `input[3].script_pub_key.address`. \n\nOverall, this guide provides a comprehensive overview of the `bitcoin.transactions` feature, including the various columns and structures that make up the transaction table. It is a valuable resource for developers working with this feature in the Dune Docs project.",
          "questions": "1. What is the source of the data in the `bitcoin.transactions` table?\n- The app technical guide does not provide information on the source of the data in the `bitcoin.transactions` table.\n\n2. Can the `input` and `output` fields be joined to other tables in the database?\n- The app technical guide does not provide information on whether the `input` and `output` fields can be joined to other tables in the database.\n\n3. Is there any information on the frequency of updates to the data in the `bitcoin.transactions` table?\n- The app technical guide does not provide information on the frequency of updates to the data in the `bitcoin.transactions` table."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc\\docs\\json\\docs\\data tables\\raw\\bitcoin` folder contains a comprehensive app technical guide for working with Bitcoin data in the Dune Docs project. The guide is divided into several sections, each focusing on a specific aspect of Bitcoin data, such as blocks, transactions, inputs, and outputs.\n\nThe `blocks.md` file provides a detailed description of the `bitcoin.blocks` table, which contains information about each block in the Bitcoin blockchain. This section is useful for developers who need to understand the structure of the `bitcoin.blocks` table and retrieve information about specific blocks, such as their size or the number of transactions they contain.\n\nThe `index.md` file serves as an introduction to the app technical guide, providing an overview of the different types of Bitcoin data available in the Dune Docs project. This file is a useful starting point for users who are new to Bitcoin and want to learn more about the data types and how to work with them.\n\nThe `inputs.md` file focuses on the `bitcoin.inputs` table, which contains information related to the inputs of Bitcoin transactions. This section is valuable for developers who need to understand the structure of the `bitcoin.inputs` table and work with input data, such as the value of an input or the block time of the block containing the input.\n\nThe `outputs.md` file provides a detailed guide on the `bitcoin.outputs` data table, which includes information about the outputs of Bitcoin transactions. This section is helpful for developers working with output data, such as retrieving the block time and date of a specific output or identifying the address type of an output.\n\nFinally, the `transactions.md` file offers a comprehensive overview of the `bitcoin.transactions` feature, including the various columns and structures that make up the transaction table. This guide is a valuable resource for developers working with transaction data, such as analyzing transaction fees or working with nested hierarchical data in the input and output columns.\n\nOverall, the app technical guide in this folder is an essential resource for developers and analysts working with Bitcoin data in the Dune Docs project. It provides a clear understanding of the different data types and structures, making it easier to build queries, analyze data, and integrate the information into various applications.",
      "questions": ""
    },
    {
      "folderName": "solana",
      "folderPath": ".autodoc\\docs\\json\\docs\\data tables\\raw\\solana",
      "url": "https://dune.com/tree/master/doc\\docs\\json\\docs\\data tables\\raw\\solana",
      "files": [
        {
          "fileName": "account-activity.md",
          "filePath": "docs\\data tables\\raw\\solana\\account-activity.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\solana\\account-activity.md",
          "summary": "# Account Activity\n\nThis technical guide covers the `Solana.account_activity` table, which contains information from the transactions table focused on account usage. Each row contains all information about an account's usage in a transaction. The purpose of this guide is to provide a detailed description of the columns in the `Solana.account_activity` table and their corresponding data types.\n\nThe table contains the following columns:\n\n- `block_slot`: a `bigint` representing the slot of the block this transaction was in.\n- `block_hash`: a `string` representing the hash of the block this transaction was in.\n- `block_time`: a `timestamp` representing the timestamp that this account usage occurred.\n- `block_date`: a `date` representing the date this account usage occurred.\n- `address`: a `string` representing the address of the account, also referred to as public key.\n- `tx_index`: an `int` representing the index of this transaction in the block.\n- `tx_id`: a `string` representing the ID of the transaction in which this account usage occurred.\n- `tx_success`: a `boolean` representing whether the transaction succeeded and was committed.\n- `signed`: a `boolean` representing whether this account signed this transaction.\n- `writeable`: a `boolean` representing whether this account was granted read-write access in this transaction.\n- `pre_balance`: a `bigint` representing the balance of this account before the transaction was processed.\n- `pre_token_balance`: a `decimal` representing the token balance before the transaction was processed.\n- `post_balance`: a `bigint` representing the balance of this account after the transaction was processed.\n- `post_token_balance`: a `decimal` representing the token balance after the transaction was processed.\n- `balance_change`: a `bigint` representing the balance change that occurred as part of the transaction.\n- `token_balance_change`: a `decimal` representing the balance change that occurred as part of the transaction.\n- `token_mint_address`: a `string` representing the address the associated token address is minting from (i.e. the actual token address).\n- `token_owner_address`: a `string` representing the address that owns this token address.\n\nThis guide provides a clear understanding of the `Solana.account_activity` table and its columns. For example, if a developer wants to retrieve information about an account's usage in a transaction, they can use this table to get all the necessary information.",
          "questions": "1. What blockchain platform is this app technical guide for?\n- The app technical guide is for the Solana blockchain platform.\n\n2. What specific account information is included in the table?\n- The table contains information about an account's usage in a transaction, including its address, pre- and post-transaction balances, and token balances.\n\n3. What is the purpose of the token\\_mint\\_address and token\\_owner\\_address columns?\n- The token\\_mint\\_address column indicates the address from which the associated token is being minted, while the token\\_owner\\_address column indicates the address that owns the token address."
        },
        {
          "fileName": "blocks.md",
          "filePath": "docs\\data tables\\raw\\solana\\blocks.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\solana\\blocks.md",
          "summary": "# Blocks\n\nThis section of the app technical guide focuses on the `Solana.blocks` table, which contains block data within Solana's blockchain. The purpose of this table is to identify block activity and transaction changes over time. The table includes several columns such as `hash`, `height`, `slot`, `time`, `date`, `parent_slot`, `previous_block___hash`, `total_transactions`, `successful_transactions`, and `failed_transactions`. Each column is described in detail, including the data type and a brief explanation of what it represents.\n\nFor example, the `hash` column is a string that represents the hash of the block, base-58 encoded. The `height` column is a bigint that represents the number of blocks beneath this block. The `time` column is a timestamp that represents the estimated time this block was produced. The `total_transactions` column is a bigint that represents the total number of transactions in this block, while the `successful_transactions` and `failed_transactions` columns represent the number of successful and failed transactions in this block, respectively.\n\nThe guide also includes a video that provides an overview of the `Solana.blocks` table. Additionally, there are two Solana Query examples provided: `Solana blocks over time` and `Transactions per day`. These examples demonstrate how to use the `Solana.blocks` table to analyze block activity and transaction changes over time.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the `Solana.blocks` table and its columns. It also includes examples of how to use the table to analyze block activity and transaction changes over time.",
          "questions": "1. What is the purpose of the Solana.blocks table in the Dune Docs app?\n- The Solana.blocks table contains block data within Solana's blockchain and can be used to identify block activity and transaction changes over time.\n\n2. What data types are used in the Solana.blocks table?\n- The Solana.blocks table uses data types such as string, bigint, timestamp, and date.\n\n3. Are there any sample queries available for analyzing Solana.blocks data in the Dune Docs app?\n- Yes, there are sample queries available for analyzing Solana.blocks data in the Dune Docs app, such as Solana blocks over time and Transactions per day."
        },
        {
          "fileName": "index.md",
          "filePath": "docs\\data tables\\raw\\solana\\index.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\solana\\index.md",
          "summary": "# Solana Technical Guide\n\nThis technical guide provides information on Solana's raw data and how it differs from other chains. It also provides details on the data available in the app and the changelog of the app.\n\n## Data Available\n\nThis section provides a list of the data available in the app. It includes the following:\n\n- Account Activity: This table contains information from the transactions table focused on account usage.\n- Blocks: Blocks are the building blocks of blockchains and rollups.\n- Rewards: This table contains data about rewards paid out on Solana.\n- Transactions: Transactions are cryptographically signed instructions from accounts.\n- Vote Transactions: This table contains the full set of vote transactions that are submitted by validators to vote on a block.\n\n## Changelog\n\nThis section provides a list of changes made to the app. It includes the following:\n\n### 2022-03-25\n\nThe `solana.account_activity` table has been updated to a new version. The new version of the table contains additional information around token activity. The following columns were added to the table:\n\n- `pre_token_balances`: The token balance before the transaction was processed.\n- `post_token_balances`: The token balance after the transaction was processed.\n- `token_balance_changes`: The balance change that occurred as part of the transaction.\n\n### 2022-03-18\n\nThe `solana.account_activity` table has been released. It contains all of the information about an account’s usage in a transaction. The table is optimized to run with ‘WHERE address = …’ queries.\n\n### 2022-03-01\n\nThe `solana.transactions` table has been upgraded to a new version. The new version of the table uses cleaner array structs to make it easier to extract useful information. The vote transactions have also been split into their own table `solana.vote_transactions`, so queries using `solana.transactions` will have better performance. \n\nThis section also provides information on what the changes mean for existing queries using `solana.transactions`. It includes the following:\n\n- You won't need to check if a transaction is a vote transaction.\n- The `error_index` and `error_message` columns have been removed and merged into the `error` column.\n- Structs containing indexes to `account_keys` now include the account address directly.\n- The `pre_token_balances` and `post_token_balances` columns have changed.\n- The `instructions` column has changed.\n- The `inner_instructions` column is removed, and inner instructions have been moved into the `instructions` column.\n\nOverall, this technical guide provides a comprehensive overview of Solana's raw data and the data available in the app. It also provides information on the changes made to the app and what they mean for existing queries.",
          "questions": "1. What is Solana and how does it differ from other chains?\n- Solana is a non-EVM chain and its raw data looks different from other chains.\n\n2. What data is available in this app and what information does it provide?\n- The app provides information on account activity, blocks, rewards, transactions, and vote transactions.\n\n3. What changes were made to the `solana.transactions` table and how might it affect existing queries?\n- The `solana.transactions` table has been upgraded to a new version, with cleaner array structs and better performance for queries. However, some existing queries may break due to changes in column names and structures."
        },
        {
          "fileName": "rewards.md",
          "filePath": "docs\\data tables\\raw\\solana\\rewards.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\solana\\rewards.md",
          "summary": "# Rewards\n\nThis section of the app technical guide covers the `Solana.rewards` table, which contains data about rewards paid out on Solana. Each row in the table corresponds to one reward, and one block may contain zero or more rewards. The table has several columns, including `block_slot`, which indicates the block's slot index in the ledger, `block_hash`, which is the hash of the block, `block_time`, which is the estimated time the block was produced, and `block_date`, which is the date of the event. Other columns include `commission`, which indicates the vote account commission when the reward was credited (only present for voting and staking rewards), `lamports`, which is the number of reward lamports credited or debited by the account, `pre_balance`, which is the account balance in lamports before the reward was applied, `post_balance`, which is the account balance in lamports after the reward was applied, `recipient`, which is the public key of the account that received the reward, and `reward_type`, which indicates the type of reward (e.g., \"fee\", \"rent\", \"voting\", \"staking\").\n\nAn example query for this table is provided in the guide, which can be found at [Solana rewards fee per day](https://dune.xyz/queries/391421/747012). This query likely retrieves data from the `Solana.rewards` table to calculate the daily rewards paid out on Solana.\n\nOverall, this section of the app technical guide provides information on the `Solana.rewards` table and its columns, which is useful for developers working on the rewards feature of the app.",
          "questions": "1. What is the purpose of the Solana.rewards table?\n    \n    The Solana.rewards table contains data about rewards paid out on Solana, with each row corresponding to one reward.\n\n2. What information does the commission column provide and when is it present?\n    \n    The commission column provides the vote account commission when the reward was credited, and it is only present for voting and staking rewards.\n\n3. What are the different types of rewards listed in the reward_type column?\n    \n    The different types of rewards listed in the reward_type column are \"fee\", \"rent\", \"voting\", and \"staking\"."
        },
        {
          "fileName": "transactions.md",
          "filePath": "docs\\data tables\\raw\\solana\\transactions.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\solana\\transactions.md",
          "summary": "# Transactions\n\nThe Transactions section of the Dune Docs project focuses on the Solana.transactions table, which contains transaction data within Solana's blockchain. This table provides relevant data related to account, protocol, and program activity. The guide provides a detailed description of each column in the table, including the column name, column type, and description. \n\nThe guide also includes query examples that demonstrate how to use the Solana.transactions table to extract data. For example, the guide provides a query that shows the number of Solana instructions by day for DEXes. \n\nThe guide also includes several struct definitions that allow for representing nested hierarchical data and have key-value pairs. These structs can be used to group fields together to make them more accessible. The guide provides a detailed description of each struct, including the field name, data type, and description. \n\nThe token_balance struct, for example, includes the account key of the account that the token balance is provided for, the public key of the token's mint, and the derived amount from the token balance's raw amount and the number of decimals. \n\nThe instructions struct includes an ordered list of accounts to pass to the program, program input data in a base-58 string, and the account key of the program that executed this instruction. \n\nThe inner_instructions struct includes an ordered list of accounts to pass to the program, program input data in a base-58 string, and the account key of the program that executed this instruction. \n\nFinally, the error struct includes the instruction number that failed and the error message. \n\nOverall, the Transactions section of the Dune Docs project provides a comprehensive guide to the Solana.transactions table and the structs used to represent nested hierarchical data. The guide includes detailed descriptions of each column and struct, as well as query examples that demonstrate how to use the data in the table.",
          "questions": "1. What data is available in the Solana.transactions table?\n- The Solana.transactions table contains transaction data within Solana's blockchain, including relevant data related to account, protocol, and program activity.\n\n2. What is the purpose of the STRUCT data type in this app?\n- The STRUCT data type allows for representing nested hierarchical data and has key-value pairs, similar to a dictionary in Python. It can be used to group fields together to make them more accessible.\n\n3. Are there any examples of how to extract data from the token_balance field?\n- Yes, there is an example query provided in the app technical guide that shows how to extract the number of Solana instructions by day for DEXes using the token_balance field."
        },
        {
          "fileName": "vote-transactions.md",
          "filePath": "docs\\data tables\\raw\\solana\\vote-transactions.md",
          "url": "https://dune.com/blob/master/data tables\\raw\\solana\\vote-transactions.md",
          "summary": "# Vote Transactions\n\nThis section of the app technical guide covers the `Solana.vote_transactions` table, which contains the full set of vote transactions that are submitted by validators to vote on a block. This table can be joined with the non-vote transactions table to get a full breakdown of all transactions. The schema of this table is the same as the main transactions table.\n\nThe guide provides a detailed description of each column in the `Solana.vote_transactions` table, including the column name, column type, and description. Some of the key columns include:\n\n- `block_slot`: This column contains the block's slot index in the ledger.\n- `block_time`: This column contains the estimated time the block was produced.\n- `fee`: This column contains the fee charged for the transaction.\n- `success`: This column indicates whether the transaction was valid and committed.\n- `instructions`: This column contains the instructions to execute in order.\n- `signatures`: This column contains a list of base-58 encoded signatures applied to the transaction.\n\nThe guide also provides an example query that demonstrates how to use the `Solana.vote_transactions` table. The query shows how to retrieve Solana transactions from the past 30 days using Dune Analytics.\n\nOverall, this section of the app technical guide provides a comprehensive overview of the `Solana.vote_transactions` table and its columns. It is a useful resource for developers who are working with Solana transactions and need to understand the data contained in this table.",
          "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain technology?\n- The app technical guide provided does not give information on the overall purpose of the dune docs app, so a blockchain SQL analyst may want to know more about how the app relates to blockchain technology and what specific features it offers for blockchain analysis.\n\n2. How does the Solana.vote_transactions table differ from other transaction tables in the app?\n- The app technical guide provides information on the Solana.vote_transactions table, but it does not explain how it differs from other transaction tables in the app. A blockchain SQL analyst may want to know this information in order to better understand how to use the table for analysis.\n\n3. Are there any limitations or known issues with the app's data collection or analysis capabilities?\n- The app technical guide does not provide any information on limitations or known issues with the app's data collection or analysis capabilities. A blockchain SQL analyst may want to know this information in order to assess the reliability and accuracy of the data provided by the app."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc\\docs\\json\\docs\\data tables\\raw\\solana` folder contains a comprehensive technical guide for various Solana data tables, which are essential for developers and analysts working with Solana blockchain data. These guides provide detailed information on the structure, columns, and data types of the tables, as well as examples of how to use them in queries and analysis.\n\nFor instance, the `account-activity.md` guide focuses on the `Solana.account_activity` table, which contains information about account usage in transactions. This guide is particularly useful for developers who want to retrieve information about an account's usage in a transaction, as it provides a clear understanding of the table and its columns.\n\nSimilarly, the `blocks.md` guide covers the `Solana.blocks` table, which contains block data within Solana's blockchain. This guide is essential for analyzing block activity and transaction changes over time. It also includes examples of Solana Query, such as `Solana blocks over time` and `Transactions per day`, demonstrating how to use the `Solana.blocks` table effectively.\n\nThe `rewards.md` guide focuses on the `Solana.rewards` table, which contains data about rewards paid out on Solana. This guide is useful for developers working on the rewards feature of the app, as it provides information on the table's columns and an example query for calculating daily rewards paid out on Solana.\n\nThe `transactions.md` guide provides a comprehensive overview of the `Solana.transactions` table and the structs used to represent nested hierarchical data. This guide is crucial for developers working with transaction data within Solana's blockchain, as it includes detailed descriptions of each column and struct, as well as query examples that demonstrate how to use the data in the table.\n\nLastly, the `vote-transactions.md` guide covers the `Solana.vote_transactions` table, which contains the full set of vote transactions submitted by validators to vote on a block. This guide is a valuable resource for developers working with Solana transactions and understanding the data contained in this table.\n\nOverall, the guides in the `.autodoc\\docs\\json\\docs\\data tables\\raw\\solana` folder provide a thorough understanding of various Solana data tables and their usage in queries and analysis. These guides are essential for developers and analysts working with Solana blockchain data and contribute significantly to the larger project feature of data tables.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc\\docs\\json\\docs\\data tables\\raw` folder contains a comprehensive app technical guide for working with raw data tables in the Dune Docs project. These guides provide detailed information on the structure, columns, and data types of the tables, as well as examples of how to use them in queries and analysis. The project feature this folder is focused on is the `data tables`.\n\nFor instance, the `blocks.md` guide covers the concept of blocks in blockchains and rollups, providing useful tables and column data that can be used to analyze block activity and transaction changes over time. This guide might be useful for analysts who want to track the growth of a specific blockchain or identify patterns in block activity.\n\nSimilarly, the `event-logs.md` guide focuses on the `Event Logs` tables, which store all logs data generated by smart contracts. This guide is particularly useful for developers who need to query contracts that are not yet decoded or are not able to be decoded since the code of the smart contract is not public.\n\nThe `traces.md` guide provides a comprehensive overview of the Traces feature, which contains information about the execution of smaller atomic actions generated by transactions. This guide might be useful for analysts who want to understand the gas usage of specific transactions or identify the creation of new smart contracts.\n\nLastly, the `transactions.md` guide offers a detailed explanation of transactions in the Ethereum network, including tables and column data. This guide is crucial for developers working with transaction data, as it includes detailed descriptions of each column and examples of how to use the data in the table.\n\nIn addition to the main folder, there are two subfolders: `bitcoin` and `solana`. The `bitcoin` subfolder contains a comprehensive app technical guide for working with Bitcoin data, covering aspects such as blocks, transactions, inputs, and outputs. The `solana` subfolder provides a thorough understanding of various Solana data tables and their usage in queries and analysis.\n\nOverall, the guides in the `.autodoc\\docs\\json\\docs\\data tables\\raw` folder provide a detailed understanding of various raw data tables and their usage in queries and analysis. These guides are essential for developers and analysts working with blockchain data and contribute significantly to the larger project feature of data tables.",
  "questions": ""
}