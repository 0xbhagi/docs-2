{
  "fileName": "call-tables.md",
  "filePath": "docs\\data tables\\decoded\\call-tables.md",
  "url": "https://dune.com/blob/master/data tables\\decoded\\call-tables.md",
  "summary": "# Call Tables\n\nThis technical guide covers how Dune parses all message calls and transactions made to smart contracts in their own tables. The guide explains that smart contracts generally have functions that can be called by either an externally owned account (EOA) or other smart contracts. The tables are named according to the project name, contract name, and function name. \n\nThe guide provides examples of how Dune records transactions in the tables, such as when a Uniswap v3 pool gets created via the Uniswap v3 factory function `createPool`. The guide also explains that for a contract where multiple instances exist, Dune will decode all calls to all instances of this smart contract into one table. \n\nThe guide addresses common misconceptions, such as the fact that web3.js, web3.py, and all other methods of locally calling a `pure`, `read`, or `constant` function do not broadcast or publish anything on the blockchain and are therefore not recorded in Dune. However, if one of these functions is invoked by another smart contract in the context of a transaction, this will be broadcast on the chain and therefore accessible in Dune. \n\nThe guide concludes with further reading resources, including links to articles on the difference between a transaction and a call, Soliditylang.org documentation, and how calldata is encoded. \n\nOverall, this technical guide provides a high-level overview of how Dune records transactions in tables and how to access this data. It is useful for developers who want to understand how Dune works and how to use it to analyze smart contract transactions.",
  "questions": "1. What tables are created for smart contract calls and transactions on Dune?\n- On Dune, tables are created for all message calls and transactions made to smart contracts, and they are named according to the contract name and function name.\n\n2. How does Dune handle multiple instances of a smart contract?\n- For a contract with multiple instances, Dune decodes all calls to all instances into one table.\n\n3. What is a common misconception about accessing state data on Dune?\n- Local calls to `pure`, `read`, or `constant` functions using web3.js or web3.py are not recorded on Dune, but if these functions are invoked by another smart contract in the context of a transaction, the message call will be recorded."
}